language: cpp

if: tag IS blank

env:
    - TRAVIS_TAG="autotagname"

deploy: &deploy_base
    provider: releases
    tag_name: ${TRAVIS_TAG}
    api_key:
        secure: Lmn/pbRiw2viv5zVyvEpQIXn7qAt2JSrrfepUyFimq3FgvPAIYBdMIk38lpwTrTiOT4uizce1B6wGObcgPvkr1e3QAGhJZeYE6sUt95HliqFNfop5YFGFQbB1KR+ZRwo1ghVFm6EB9hpsLWUk9W4ynXPmMgNBXuEp6lHohbVXo8=
    skip_cleanup: true
    overwrite: true
    draft: true
    prerelease: true

jobs:
  include:
   - name: "Ubuntu 18.04"
     os: linux
     dist: bionic
     compiler: gcc
     script: cmake -D CMAKE_BUILD_TYPE=Release . && cmake --build . --parallel && echo wait 10 > run_test.txt && echo exit >> run_test.txt && cat run_test.txt | ./UxVCtrl 

   - name: "Windows"
     os: windows
     script: 
       - cmd //c "cmake . & cmake --build . --config Release --target UxVCtrl --parallel & @echo wait 10 > run_test.txt & @echo exit >> run_test.txt & .\Release\UxVCtrl.exe < run_test.txt"
   
     # Virtual memory exhausted with --parallel...?
   - name: "Ubuntu 18.04 with OpenCV 3.2.0 and all"
     os: linux
     dist: bionic
     compiler: gcc
     services: xvfb
     before_install: 
         # Allowed to fail...
       - sudo apt-get -q update || true
     script: cmake -D CMAKE_BUILD_TYPE=Release -D DISABLE_OPENCV_SUPPORT=OFF -D ENABLE_MAVLINK_SUPPORT=ON -D ENABLE_LABJACK_SUPPORT=ON -D ENABLE_LIBMODBUS_SUPPORT=ON -D ENABLE_SBG_SUPPORT=ON -D ENABLE_BLUEVIEW_SUPPORT=ON . && cmake --build . && echo wait 10 > run_test.txt && echo exit >> run_test.txt && cat run_test.txt | xvfb-run -a ./UxVCtrl && cp ./UxVCtrl ./UxVCtrl_Ubuntu64
     deploy:
       <<: *deploy_base
       file: UxVCtrl_Ubuntu64

     # Virtual memory exhausted with --parallel...?
   - name: "Ubuntu 16.04 with OpenCV 2.4 and all"
     os: linux
     dist: xenial
     compiler: gcc
     services: xvfb
     before_install: 
         # Allowed to fail...
       - sudo apt-get -q update || true
     script: cmake -D CMAKE_BUILD_TYPE=Release -D DISABLE_OPENCV_SUPPORT=OFF -D ENABLE_MAVLINK_SUPPORT=ON -D ENABLE_LABJACK_SUPPORT=ON -D ENABLE_LIBMODBUS_SUPPORT=ON -D ENABLE_SBG_SUPPORT=ON -D ENABLE_BLUEVIEW_SUPPORT=ON . && cmake --build . && echo wait 10 > run_test.txt && echo exit >> run_test.txt && cat run_test.txt | xvfb-run -a ./UxVCtrl 
 
   - name: "Mac OS"
     os: osx
     osx_image: xcode10.1
     script: cmake -D CMAKE_BUILD_TYPE=Release . && cmake --build . --parallel && echo wait 10 > run_test.txt && echo exit >> run_test.txt && cat run_test.txt | ./UxVCtrl 

   - name: "Mac OS with cv4 and all without bv"
     os: osx
     osx_image: xcode10.1
     script: cmake -D CMAKE_BUILD_TYPE=Release -D DISABLE_OPENCV_SUPPORT=OFF -D ENABLE_MAVLINK_SUPPORT=ON -D ENABLE_LABJACK_SUPPORT=ON -D ENABLE_LIBMODBUS_SUPPORT=ON -D ENABLE_SBG_SUPPORT=ON . && cmake --build . --parallel && echo wait 10 > run_test.txt && echo exit >> run_test.txt && cat run_test.txt | ./UxVCtrl 

   - name: "Windows MinGW 8.1.0 x64"
     os: windows
     compiler: gcc
     install: 
       - choco install -y make
     script: 
       - cmake -G "MSYS Makefiles" -D CMAKE_BUILD_TYPE=Release . && cmake --build . --parallel && echo wait 10 > run_test.txt && echo exit >> run_test.txt && cat run_test.txt | ./UxVCtrl

   - name: "Ubuntu 12.04 with OpenCV 2 and all"
     os: linux
     dist: precise
     compiler: gcc
     services: xvfb
     before_install: 
       - sudo apt-get -q update || true
     script: cmake -D CMAKE_BUILD_TYPE=Release -D DISABLE_OPENCV_SUPPORT=OFF -D ENABLE_MAVLINK_SUPPORT=ON -D ENABLE_LABJACK_SUPPORT=ON -D ENABLE_LIBMODBUS_SUPPORT=ON -D ENABLE_SBG_SUPPORT=ON -D ENABLE_BLUEVIEW_SUPPORT=ON . && cmake --build . && echo wait 10 > run_test.txt && echo exit >> run_test.txt && cat run_test.txt | xvfb-run -a ./UxVCtrl 

   - name: "Ubuntu 16.04 static without cv, modbus, bv"
     os: linux
     dist: xenial
     compiler: gcc
     services: xvfb
     before_install: 
         # Allowed to fail...
       - sudo apt-get -q update || true
     script: cmake -D CMAKE_BUILD_TYPE=Release -D ENABLE_STATIC=ON -D ENABLE_MAVLINK_SUPPORT=ON -D ENABLE_LABJACK_SUPPORT=ON -D ENABLE_SBG_SUPPORT=ON . && cmake --build . && echo wait 10 > run_test.txt && echo exit >> run_test.txt && cat run_test.txt | xvfb-run -a ./UxVCtrl && cp ./UxVCtrl ./UxVCtrl_Ubuntu64_static
     deploy:
       <<: *deploy_base
       file: UxVCtrl_Ubuntu64_static

   - name: "Mac OS static without cv, modbus, bv"
     os: osx
     osx_image: xcode10.1
     script: cmake -D CMAKE_BUILD_TYPE=Release -D ENABLE_MAVLINK_SUPPORT=ON -D ENABLE_LABJACK_SUPPORT=ON -D ENABLE_SBG_SUPPORT=ON . && cmake --build . --parallel && echo wait 10 > run_test.txt && echo exit >> run_test.txt && cat run_test.txt | ./UxVCtrl && cp ./UxVCtrl ./UxVCtrl_MacOS
     deploy:
       <<: *deploy_base
       file: UxVCtrl_MacOS

   - name: "Windows MinGW 8.1.0 x64 cv412 and all without kinect, cleye, lj, sbg, bv"
     os: windows
     compiler: gcc
     install: 
       - choco install -y make
         # For OpenCV
       - powershell -Command "Install-WindowsFeature Server-Media-Foundation"
       - wget http://www.ensta-bretagne.fr/lebars/Share/windows_server_core_prereq.zip --no-check-certificate -nv
       - cmd //c "7z x windows_server_core_prereq.zip -o"%SystemRoot%" -y"
#         # Lighter version of OpenCV, instead of the one that would be downloaded automatically by CMakeLists.txt...
#       - wget http://www.ensta-bretagne.fr/lebars/Share/OpenCV3.2.0_mini.zip --no-check-certificate -nv
#       - cmd //c "7z x OpenCV3.2.0_mini.zip -o"%SystemDrive%" -y"
#         # PATH
#       - wget http://www.ensta-bretagne.fr/lebars/Share/cmake_extra_tools.zip --no-check-certificate -nv
#       - cmd //c "7z x cmake_extra_tools.zip -o"%SystemDrive%" -y"
#       - cmd //c "%SystemDrive%\cmake_extra_tools\pathman /as C:\OpenCV3.2.0\x64\mingw8\bin"
     script: 
       - cmd //c "cmake -G "MSYS Makefiles" -D CMAKE_BUILD_TYPE=Release -D DISABLE_OPENCV_SUPPORT=OFF -D OPENCV2413=OFF -D OPENCV320=OFF -D OPENCV412=ON -D ENABLE_MAVLINK_SUPPORT=ON -D ENABLE_LIBMODBUS_SUPPORT=ON . & cmake --build . & refreshenv.cmd & @echo wait 10 > run_test.txt & @echo exit >> run_test.txt & .\UxVCtrl.exe < run_test.txt"

   - name: "Windows compat"
     os: windows
     install: 
#       - powerShell -Command "Set-ExecutionPolicy -ExecutionPolicy RemoteSigned"
       - choco uninstall -y cmake.install
#       - choco uninstall -y cmake cmake.install
       - wget https://cmake.org/files/v3.15/cmake-3.15.5-win32-x86.msi --no-check-certificate -nv
       - cmd //c "cmake-3.15.5-win32-x86.msi /qb-! /norestart ALLUSERS=1"
         # For OpenCV
       - powershell -Command "Install-WindowsFeature Server-Media-Foundation"
#       - powerShell -Command "Add-WindowsCapability -Online -Name Tools.Graphics.DirectX*"
#       - powerShell -Command "Add-WindowsCapability -Online -Name Media.WindowsMediaPlayer*"
#       - powerShell -Command "Add-WindowsCapability -Online -Name Browser.InternetExplorer*"
#       - powerShell -Command "Add-WindowsCapability -Online -Name ServerCore.AppCompatibility*"
       - wget http://www.ensta-bretagne.fr/lebars/Share/windows_server_core_prereq.zip --no-check-certificate -nv
       - cmd //c "7z x windows_server_core_prereq.zip -o"%SystemRoot%" -y"
         # For LabJack
         # https://dirteam.com/sander/2018/11/20/important-issues-in-windows-server-2019-build-10-0-17763-1-release-notes/
       - wget http://www.ensta-bretagne.fr/lebars/Share/windows_server_2019_sxs.zip --no-check-certificate -nv
       - cmd //c "7z x windows_server_2019_sxs.zip -o"%SystemDrive%" -y"
       - cmd //c "Dism /online /enable-feature /featurename:NetFx3 /All /Source:%SystemDrive%\sxs /NoRestart"
#       - cmd //c "Dism /online /enable-feature /featurename:NetFx3 /All /Source:%SystemDrive%\sxs /LimitAccess /NoRestart"
#       - powerShell -Command "Add-WindowsCapability -Online -Name NetFX3*"
#       - powershell -Command "Install-WindowsFeature NET-Framework-Features"
#       - powershell -Command "Install-WindowsFeature NET-Framework-Core"
#       - cmd //c "DISM /online /enable-feature /featurename:NetFx3 /all"
#       - choco install -y dotnet3.5 
         # PATH
       - wget http://www.ensta-bretagne.fr/lebars/Share/cmake_extra_tools.zip --no-check-certificate -nv
       - cmd //c "7z x cmake_extra_tools.zip -o"%SystemDrive%" -y"
       - cmd //c "%SystemDrive%\cmake_extra_tools\pathman /as C:\Progra~2\CMake\bin"
     script: 
         #  -T v141_xp...
       - cmd //c "refreshenv.cmd & cmake -G "Visual Studio 15" -A Win32 -D ENABLE_STATIC=ON -D DISABLE_OPENCV_SUPPORT=OFF -D OPENCV2413=OFF -D OPENCV320=ON -D OPENCV412=OFF -D ENABLE_MAVLINK_SUPPORT=ON -D ENABLE_LABJACK_SUPPORT=ON -D ENABLE_LIBMODBUS_SUPPORT=ON -D ENABLE_SBG_SUPPORT=ON . & cmake --build . --config Release --target UxVCtrl --parallel & refreshenv.cmd & @echo wait 10 > run_test.txt & @echo exit >> run_test.txt & .\Release\UxVCtrl.exe < run_test.txt & copy .\Release\UxVCtrl.exe .\Release\UxVCtrl_compat.exe"
     deploy:
       <<: *deploy_base
       file: Release\UxVCtrl_compat.exe

   - name: "Windows vc15 x64 cv412 and all without kinect, cleye, lj, bv"
     os: windows
     install: 
         # For OpenCV
       - powershell -Command "Install-WindowsFeature Server-Media-Foundation"
       - wget http://www.ensta-bretagne.fr/lebars/Share/windows_server_core_prereq.zip --no-check-certificate -nv
       - cmd //c "7z x windows_server_core_prereq.zip -o"%SystemRoot%" -y"
         # For Kinect v2
       - wget http://www.ensta-bretagne.fr/lebars/Share/KinectSDK-v2.0.zip --no-check-certificate -nv
       - 7z x KinectSDK-v2.0.zip -o/C/ -y
       - mkdir -p "/C/Program Files/Microsoft SDKs/Kinect"
       - 7z x /C/KinectSDK-v2.0/v2.0_1409.zip -o"/C/Program Files/Microsoft SDKs/Kinect" -y
       - cmd //c "setx KINECTSDK20_DIR C:\Progra~1\Microsoft" "SDKs\Kinect\v2.0_1409 /m"
       - cmd //c "copy /Y %SystemDrive%\KinectSDK-v2.0\x64\Kinect20.dll %SystemRoot%\System32\Kinect20.dll"
       - cmd //c "copy /Y %SystemDrive%\KinectSDK-v2.0\x86\Kinect20.dll %SystemRoot%\SysWOW64\Kinect20.dll"
       - cmd //c "del /s /q KinectSDK-v2.0.zip %SystemDrive%\KinectSDK-v2.0"
#       - choco install -y vcredist-all
  script: 
       - cmd //c "refreshenv.cmd & cmake -G "Visual Studio 15" -A x64 -D DISABLE_OPENCV_SUPPORT=OFF -D OPENCV2413=OFF -D OPENCV320=OFF -D OPENCV412=ON -D ENABLE_MAVLINK_SUPPORT=ON -D ENABLE_LIBMODBUS_SUPPORT=ON -D ENABLE_SBG_SUPPORT=ON . & cmake --build . --config Release --target UxVCtrl --parallel & refreshenv.cmd & @echo wait 10 > run_test.txt & @echo exit >> run_test.txt & .\Release\UxVCtrl.exe < run_test.txt"

   - name: "Windows Qt 2010.05 MinGW 4.4.0 x86 cv2413 and all without kinect, cleye, lj, sbg"
     os: windows
     install: 
         # Take 2 min...
       - choco uninstall -y mingw
#       - choco install -y mingw --version=5.3.0 --allow-downgrade
       - choco install -y make
       - wget http://www.ensta-bretagne.fr/lebars/Share/qt-sdk-win-opensource-2010.05.exe --no-check-certificate -nv
       - cmd //c "move /Y qt-sdk-win-opensource-2010.05.exe %SystemDrive%\ "
         # Take several min...
       - cmd //c "%SystemDrive%\qt-sdk-win-opensource-2010.05.exe /S"
       - cmd //c "del /f /q %SystemDrive%\qt-sdk-win-opensource-2010.05.exe"
         # For OpenCV
       - powershell -Command "Install-WindowsFeature Server-Media-Foundation"
       - wget http://www.ensta-bretagne.fr/lebars/Share/windows_server_core_prereq.zip --no-check-certificate -nv
       - cmd //c "7z x windows_server_core_prereq.zip -o"%SystemRoot%" -y"
         # For BlueView
       - choco install -y vcredist2010
         # PATH
       - wget http://www.ensta-bretagne.fr/lebars/Share/cmake_extra_tools.zip --no-check-certificate -nv
       - cmd //c "7z x cmake_extra_tools.zip -o"%SystemDrive%" -y"
       - cmd //c "%SystemDrive%\cmake_extra_tools\pathman /as C:\Qt\2010.05\qt\bin;C:\Qt\2010.05\bin;C:\Qt\2010.05\mingw\bin"
     script: 
       - cmd //c "refreshenv.cmd & set PATH=C:\Qt\2010.05\qt\bin;C:\Qt\2010.05\bin;C:\Qt\2010.05\mingw\bin;%PATH% & cmake -G "MSYS Makefiles" -D CMAKE_BUILD_TYPE=Release -D DISABLE_OPENCV_SUPPORT=OFF -D OPENCV2413=ON -D OPENCV320=OFF -D OPENCV412=OFF -D ENABLE_MAVLINK_SUPPORT=ON -D ENABLE_LIBMODBUS_SUPPORT=ON -D ENABLE_BLUEVIEW_SUPPORT=ON . & cmake --build . & refreshenv.cmd & @echo wait 10 > run_test.txt & @echo exit >> run_test.txt & .\UxVCtrl.exe < run_test.txt"

   - name: "Windows Qt 5.12.6 MinGW 7.3.0 x86 cv320 and all without kinect, cleye, lj, sbg"
     os: windows
     install: 
         # Take 2 min...
       - choco uninstall -y mingw
       - choco install -y make
       - wget http://download.qt.io/archive/qt/5.12/5.12.6/qt-opensource-windows-x86-5.12.6.exe --no-check-certificate -nv
       - cmd //c "move /Y qt-opensource-windows-x86-5.12.6.exe %SystemDrive%\ "
       - wget http://www.ensta-bretagne.fr/lebars/Share/qt-installer-5.12.6-mingw73_32.qs --no-check-certificate -nv
       - cmd //c "move /Y qt-installer-5.12.6-mingw73_32.qs %SystemDrive%\ "
         # Take several min...
       - cmd //c "%SystemDrive%\qt-opensource-windows-x86-5.12.6.exe --script %SystemDrive%\qt-installer-5.12.6-mingw73_32.qs"
       - cmd //c "del /f /q %SystemDrive%\qt-opensource-windows-x86-5.12.6.exe"
         # For OpenCV
       - powershell -Command "Install-WindowsFeature Server-Media-Foundation"
       - wget http://www.ensta-bretagne.fr/lebars/Share/windows_server_core_prereq.zip --no-check-certificate -nv
       - cmd //c "7z x windows_server_core_prereq.zip -o"%SystemRoot%" -y"
         # For BlueView
       - choco install -y vcredist2010
         # PATH
       - wget http://www.ensta-bretagne.fr/lebars/Share/cmake_extra_tools.zip --no-check-certificate -nv
       - cmd //c "7z x cmake_extra_tools.zip -o"%SystemDrive%" -y"
       - cmd //c "%SystemDrive%\cmake_extra_tools\pathman /as C:\Qt\Qt5.12.6\5.12.6\mingw73_32\bin;C:/Qt/Qt5.12.6/Tools/mingw730_32\bin"
     script: 
       - cmd //c "refreshenv.cmd & set PATH=C:\Qt\Qt5.12.6\5.12.6\mingw73_32\bin;C:/Qt/Qt5.12.6/Tools/mingw730_32\bin;%PATH% & cmake -G "MSYS Makefiles" -D CMAKE_BUILD_TYPE=Release -D DISABLE_OPENCV_SUPPORT=OFF -D OPENCV2413=OFF -D OPENCV320=ON -D OPENCV412=OFF -D ENABLE_MAVLINK_SUPPORT=ON -D ENABLE_LIBMODBUS_SUPPORT=ON -D ENABLE_BLUEVIEW_SUPPORT=ON . & cmake --build . & refreshenv.cmd & @echo wait 10 > run_test.txt & @echo exit >> run_test.txt & .\UxVCtrl.exe < run_test.txt"
