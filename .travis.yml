language: cpp

if: tag IS blank

env:
    - TRAVIS_TAG="autotagname"

deploy: &deploy_base
    provider: releases
    tag_name: ${TRAVIS_TAG}
    api_key:
        secure: Lmn/pbRiw2viv5zVyvEpQIXn7qAt2JSrrfepUyFimq3FgvPAIYBdMIk38lpwTrTiOT4uizce1B6wGObcgPvkr1e3QAGhJZeYE6sUt95HliqFNfop5YFGFQbB1KR+ZRwo1ghVFm6EB9hpsLWUk9W4ynXPmMgNBXuEp6lHohbVXo8=
    skip_cleanup: true
    overwrite: true
    draft: true
    prerelease: true

jobs:
  include: 
   - name: "Ubuntu 18.04"
     os: linux
     dist: bionic
     compiler: gcc
     script: cmake -D CMAKE_BUILD_TYPE=Release . && cmake --build . && echo wait 10 > run_test.txt && echo exit >> run_test.txt && cat run_test.txt | ./UxVCtrl 

   - name: "Windows"
     os: windows
     script: 
       - cmd //c "cmake . & cmake --build . --config Release --target UxVCtrl & @echo wait 10 > run_test.txt & @echo exit >> run_test.txt & .\Release\UxVCtrl.exe < run_test.txt"
   
   - name: "Ubuntu 18.04 amd64 with default OpenCV 3.2.0 without Kinect v2, CLEye support"
     os: linux
     arch: amd64
     dist: bionic
     compiler: gcc
     services: xvfb
     before_install: 
       - sudo apt-get -q update || true
       - df
     script: cmake -D CMAKE_BUILD_TYPE=Release -D DISABLE_OPENCV_SUPPORT=OFF -D ENABLE_MAVLINK_SUPPORT=ON -D ENABLE_LABJACK_SUPPORT=ON -D ENABLE_LIBMODBUS_SUPPORT=ON -D ENABLE_SBG_SDK_SUPPORT=ON -D ENABLE_RPLIDAR_SDK_SUPPORT=ON -D ENABLE_BLUEVIEW_SUPPORT=ON . && cmake --build . && echo wait 10 > run_test.txt && echo exit >> run_test.txt && cat run_test.txt | xvfb-run -a ./UxVCtrl
       # Virtual memory exhausted with --parallel...?
 
   - name: "Mac OS"
     os: osx
     osx_image: xcode10.1
     script: cmake -D CMAKE_BUILD_TYPE=Release . && cmake --build . && echo wait 10 > run_test.txt && echo exit >> run_test.txt && cat run_test.txt | ./UxVCtrl 

   - name: "Mac OS Xcode 10.1 with latest OpenCV without SBG SDK, RPLIDAR SDK, BlueView, Kinect v2, CLEye support"
     os: osx
     osx_image: xcode10.1
     before_install:
       - df
     script: cmake -D CMAKE_BUILD_TYPE=Release -D DISABLE_OPENCV_SUPPORT=OFF -D ENABLE_MAVLINK_SUPPORT=ON -D ENABLE_LABJACK_SUPPORT=ON -D ENABLE_LIBMODBUS_SUPPORT=ON -D ENABLE_SBG_SDK_SUPPORT=OFF -D ENABLE_RPLIDAR_SDK_SUPPORT=OFF . && cmake --build . && echo wait 10 > run_test.txt && echo exit >> run_test.txt && cat run_test.txt | ./UxVCtrl && cp ./UxVCtrl ./UxVCtrl_MacOS
     deploy:
       <<: *deploy_base
       file: UxVCtrl_MacOS

   - name: "Ubuntu 16.04 i386 Docker static without OpenCV, libmodbus, SBG SDK, RPLIDAR SDK, BlueView, Kinect v2, CLEye support"
     os: linux
     dist: xenial
     compiler: gcc
     services:
       - docker
     script: 
       - "docker run -i -v \"${PWD}/..:${PWD}/..\" i386/ubuntu:xenial /bin/bash -c \"linux32 --32bit i386 uname -a && cd ${PWD} && apt-get -q update && apt-get -y install sudo lsb-release wget unzip build-essential cmake && lsb_release -a && cmake -D CMAKE_BUILD_TYPE=Release -D ENABLE_STATIC=ON -D ENABLE_MAVLINK_SUPPORT=ON -D ENABLE_LABJACK_SUPPORT=ON -D ENABLE_SBG_SDK_SUPPORT=OFF -D ENABLE_RPLIDAR_SDK_SUPPORT=OFF . && cmake --build . && echo wait 10 > run_test.txt && echo exit >> run_test.txt && cat run_test.txt | ./UxVCtrl && cp ./UxVCtrl ./UxVCtrl_compat_Ubuntu32 \""
     deploy:
       <<: *deploy_base
       file: UxVCtrl_compat_Ubuntu32

   - name: "Raspbian Buster pi Docker static without OpenCV, libmodbus, SBG SDK, RPLIDAR SDK, BlueView, Kinect v2, CLEye support"
     os: linux
     dist: bionic
     compiler: gcc
     services:
       - docker
     before_install: 
       - docker run --rm --privileged multiarch/qemu-user-static:register --reset
     script: 
       - "docker run -i -v \"${PWD}/..:${PWD}/..\" lebarsfa/pi:buster /bin/bash -c \"uname -a && cat /etc/os-release && cd ${PWD} && apt-get -q update && apt-get -y install sudo lsb-release wget unzip build-essential cmake && lsb_release -a && cmake -D CMAKE_BUILD_TYPE=Release -D ENABLE_STATIC=ON -D ENABLE_MAVLINK_SUPPORT=ON -D ENABLE_LABJACK_SUPPORT=ON -D ENABLE_SBG_SDK_SUPPORT=OFF -D ENABLE_RPLIDAR_SDK_SUPPORT=OFF . && cmake --build . && echo wait 10 > run_test.txt && echo exit >> run_test.txt && cat run_test.txt | ./UxVCtrl && cp ./UxVCtrl ./UxVCtrl_compat_pi \""
     deploy:
       <<: *deploy_base
       file: UxVCtrl_compat_pi
 
   - name: "Raspbian Buster pi Docker static with OpenCV 4.2.0 without SBG SDK, RPLIDAR SDK, BlueView, Kinect v2, CLEye support"
     os: linux
     dist: bionic
     compiler: gcc
     services:
       - xvfb
       - docker
     before_install: 
       - docker run --rm --privileged multiarch/qemu-user-static:register --reset
     script: 
       - "docker run -i -v \"${PWD}/..:${PWD}/..\" lebarsfa/pi:buster-cv420-static /bin/bash -c \"uname -a && cat /etc/os-release && cd ${PWD} && apt-get -q update && apt-get -y install xvfb xauth && lsb_release -a && cmake -D CMAKE_BUILD_TYPE=Release -D DISABLE_OPENCV_SUPPORT=OFF -D ENABLE_MAVLINK_SUPPORT=ON -D ENABLE_LABJACK_SUPPORT=ON -D ENABLE_LIBMODBUS_SUPPORT=ON -D ENABLE_SBG_SDK_SUPPORT=OFF -D ENABLE_RPLIDAR_SDK_SUPPORT=OFF . && cmake --build . && { Xvfb :99 & echo X_starting && sleep 3 ; } && export DISPLAY=:99 && echo wait 10 > run_test.txt && echo exit >> run_test.txt && cat run_test.txt | ./UxVCtrl && cp ./UxVCtrl ./UxVCtrl_pi \""
     deploy:
       <<: *deploy_base
       file: UxVCtrl_pi
 
   - name: "Windows MinGW 8.1.0 x64"
     os: windows
     compiler: gcc
     before_install: 
       - choco install -y make
     script: 
       - cmake -G "MSYS Makefiles" -D CMAKE_BUILD_TYPE=Release . && cmake --build . && echo wait 10 > run_test.txt && echo exit >> run_test.txt && cat run_test.txt | ./UxVCtrl

   - name: "Ubuntu 12.04 amd64 with default OpenCV 2.3.1 without Kinect v2, CLEye support"
     os: linux
     arch: amd64
     dist: precise
     compiler: gcc
     services: xvfb
     before_install: 
       - sudo apt-get -q update || true
       - df
     script: cmake -D CMAKE_BUILD_TYPE=Release -D DISABLE_OPENCV_SUPPORT=OFF -D ENABLE_MAVLINK_SUPPORT=ON -D ENABLE_LABJACK_SUPPORT=ON -D ENABLE_LIBMODBUS_SUPPORT=ON -D ENABLE_SBG_SDK_SUPPORT=ON -D ENABLE_RPLIDAR_SDK_SUPPORT=ON -D ENABLE_BLUEVIEW_SUPPORT=ON . && cmake --build . && echo wait 10 > run_test.txt && echo exit >> run_test.txt && cat run_test.txt | xvfb-run -a ./UxVCtrl 
        
   - name: "Ubuntu 20.04 amd64 with default OpenCV 4.2.0 without Kinect v2, CLEye support"
     os: linux
     arch: amd64
     dist: focal
     compiler: gcc
     services: xvfb
     before_install: 
       - sudo apt-get -q update || true
       - df
     script: cmake -D CMAKE_BUILD_TYPE=Release -D DISABLE_OPENCV_SUPPORT=OFF -D ENABLE_MAVLINK_SUPPORT=ON -D ENABLE_LABJACK_SUPPORT=ON -D ENABLE_LIBMODBUS_SUPPORT=ON -D ENABLE_SBG_SDK_SUPPORT=ON -D ENABLE_RPLIDAR_SDK_SUPPORT=ON -D ENABLE_BLUEVIEW_SUPPORT=ON . && cmake --build . && echo wait 10 > run_test.txt && echo exit >> run_test.txt && cat run_test.txt | xvfb-run -a ./UxVCtrl

   - name: "Ubuntu 16.04 amd64 static without OpenCV, libmodbus, SBG SDK, RPLIDAR SDK, BlueView, Kinect v2, CLEye support"
     os: linux
     arch: amd64
     dist: xenial
     compiler: gcc
     services: xvfb
     before_install: 
       - sudo apt-get -q update || true
     script: cmake -D CMAKE_BUILD_TYPE=Release -D ENABLE_STATIC=ON -D ENABLE_MAVLINK_SUPPORT=ON -D ENABLE_LABJACK_SUPPORT=ON -D ENABLE_SBG_SDK_SUPPORT=OFF -D ENABLE_RPLIDAR_SDK_SUPPORT=OFF . && cmake --build . && echo wait 10 > run_test.txt && echo exit >> run_test.txt && cat run_test.txt | xvfb-run -a ./UxVCtrl && cp ./UxVCtrl ./UxVCtrl_compat_Ubuntu64
     deploy:
       <<: *deploy_base
       file: UxVCtrl_compat_Ubuntu64
   
   - name: "Ubuntu 18.04 amd64 static with OpenCV 4.2.0 without SBG SDK, RPLIDAR SDK, Kinect v2, CLEye support"
     os: linux
     arch: amd64
     dist: bionic
     compiler: gcc
     services: xvfb
     before_install: 
       - sudo apt-get -q update || true
       - sudo apt-get install -y libopencv-dev libgtk2.0
       - wget https://www.ensta-bretagne.fr/lebars/Share/libmodbus-3.0.6-Ubuntu64-static.zip && unzip -q -o libmodbus-3.0.6-Ubuntu64-static.zip && sudo cp -Rf libmodbus-3.0.6-static/* /usr/ && rm -Rf libmodbus-3.0.6-static libmodbus-3.0.6-Ubuntu64-static.zip
       - wget https://www.ensta-bretagne.fr/lebars/Share/OpenCV-4.2.0-Ubuntu64-static.tar.gz && tar xfz OpenCV-4.2.0-Ubuntu64-static.tar.gz && sudo cp -Rf OpenCV-unknown-x86_64/* /usr/local/ && rm -Rf OpenCV-unknown-x86_64 OpenCV-4.2.0-Ubuntu64-static.tar.gz
       - df
     script: cmake -D CMAKE_BUILD_TYPE=Release -D ENABLE_STATIC=ON -D DISABLE_OPENCV_SUPPORT=OFF -D ENABLE_MAVLINK_SUPPORT=ON -D ENABLE_LABJACK_SUPPORT=ON -D ENABLE_LIBMODBUS_SUPPORT=ON -D ENABLE_SBG_SDK_SUPPORT=OFF -D ENABLE_RPLIDAR_SDK_SUPPORT=OFF -D ENABLE_BLUEVIEW_SUPPORT=ON . && cmake --build . && echo wait 10 > run_test.txt && echo exit >> run_test.txt && cat run_test.txt | xvfb-run -a ./UxVCtrl && cp ./UxVCtrl ./UxVCtrl_Ubuntu64
     deploy:
       <<: *deploy_base
       file: UxVCtrl_Ubuntu64

   - name: "Mac OS Xcode 10.1 static without OpenCV, libmodbus, SBG SDK, RPLIDAR SDK, BlueView, Kinect v2, CLEye support"
     os: osx
     osx_image: xcode10.1
     script: cmake -D CMAKE_BUILD_TYPE=Release -D ENABLE_STATIC=ON -D ENABLE_MAVLINK_SUPPORT=ON -D ENABLE_LABJACK_SUPPORT=ON -D ENABLE_SBG_SDK_SUPPORT=OFF -D ENABLE_RPLIDAR_SDK_SUPPORT=OFF . && cmake --build . && echo wait 10 > run_test.txt && echo exit >> run_test.txt && cat run_test.txt | ./UxVCtrl && cp ./UxVCtrl ./UxVCtrl_compat_MacOS
     deploy:
       <<: *deploy_base
       file: UxVCtrl_compat_MacOS

#   - name: "Mac OS Xcode 10.1 static with OpenCV 4.2.0 without BlueView, Kinect v2, CLEye support"
#     os: osx
#     osx_image: xcode10.1
#     before_install:
#       - wget https://www.ensta-bretagne.fr/lebars/Share/libmodbus-3.0.6-mac-static.zip && unzip -q -o libmodbus-3.0.6-mac-static.zip && sudo cp -Rf libmodbus-3.0.6-static/* /usr/local/ && rm -Rf libmodbus-3.0.6-static libmodbus-3.0.6-mac-static.zip
#       - wget https://www.ensta-bretagne.fr/lebars/Share/OpenCV-4.2.0-mac-static.tar.gz && tar xfz OpenCV-4.2.0-mac-static.tar.gz && sudo cp -Rf OpenCV-unknown-x86_64/* /usr/local/ && rm -Rf OpenCV-unknown-x86_64 OpenCV-4.2.0-mac-static.tar.gz
#       - df
#     script: cmake -D CMAKE_BUILD_TYPE=Release -D ENABLE_STATIC=ON -D DISABLE_OPENCV_SUPPORT=OFF -D ENABLE_MAVLINK_SUPPORT=ON -D ENABLE_LABJACK_SUPPORT=ON -D ENABLE_LIBMODBUS_SUPPORT=ON -D ENABLE_SBG_SDK_SUPPORT=ON -D ENABLE_RPLIDAR_SDK_SUPPORT=ON . && cmake --build . && echo wait 10 > run_test.txt && echo exit >> run_test.txt && cat run_test.txt | ./UxVCtrl && cp ./UxVCtrl ./UxVCtrl_MacOS
#     deploy:
#       <<: *deploy_base
#       file: UxVCtrl_MacOS

   - name: "Windows MinGW 8.1.0 x64 with OpenCV 4.2.0 (Kinect v2, CLEye currently incompatible) without LabJack, SBG SDK, RPLIDAR SDK, BlueView, Kinect v2, CLEye support"
     os: windows
     compiler: gcc
     before_install: 
       - choco install -y make
         # For OpenCV
       - powershell -Command "Install-WindowsFeature Server-Media-Foundation"
       - wget http://www.ensta-bretagne.fr/lebars/Share/windows_server_core_prereq.zip --no-check-certificate -nv
       - cmd //c "7z x windows_server_core_prereq.zip -o"%SystemRoot%" -y"
#         # Lighter version of OpenCV, instead of the one that would be downloaded automatically by CMakeLists.txt...
#       - wget http://www.ensta-bretagne.fr/lebars/Share/OpenCV4.2.0_mini.zip --no-check-certificate -nv
#       - cmd //c "7z x OpenCV4.2.0_mini.zip -o"%SystemDrive%" -y"
#         # PATH
#       - wget http://www.ensta-bretagne.fr/lebars/Share/cmake_extra_tools.zip --no-check-certificate -nv
#       - cmd //c "7z x cmake_extra_tools.zip -o"%SystemDrive%" -y"
#       - cmd //c "%SystemDrive%\cmake_extra_tools\pathman /as C:\OpenCV4.2.0\x64\mingw\bin"
     script: 
       - cmd //c "cmake -G "MSYS Makefiles" -D CMAKE_BUILD_TYPE=Release -D DISABLE_OPENCV_SUPPORT=OFF -D OPENCV2413=OFF -D OPENCV320=OFF -D OPENCV420=ON -D ENABLE_MAVLINK_SUPPORT=ON -D ENABLE_LIBMODBUS_SUPPORT=ON . & cmake --build . & refreshenv.cmd & @echo wait 10 > run_test.txt & @echo exit >> run_test.txt & .\UxVCtrl.exe < run_test.txt"

   - name: "Windows Visual Studio 2017 x86 static with OpenCV 3.2.0 without SBG SDK, RPLIDAR SDK, BlueView, Kinect v2, CLEye support"
     os: windows
     before_install: 
         # Test alternate CMake version...
       - choco uninstall -y cmake.install
       - wget https://cmake.org/files/v3.15/cmake-3.15.5-win32-x86.msi --no-check-certificate -nv
       - cmd //c "cmake-3.15.5-win32-x86.msi /qb-! /norestart ALLUSERS=1"
         # For OpenCV
       - powershell -Command "Install-WindowsFeature Server-Media-Foundation"
       - wget http://www.ensta-bretagne.fr/lebars/Share/windows_server_core_prereq.zip --no-check-certificate -nv
       - cmd //c "7z x windows_server_core_prereq.zip -o"%SystemRoot%" -y"
         # For LabJack
         # https://dirteam.com/sander/2018/11/20/important-issues-in-windows-server-2019-build-10-0-17763-1-release-notes/
       - wget http://www.ensta-bretagne.fr/lebars/Share/windows_server_2019_sxs.zip --no-check-certificate -nv
       - cmd //c "7z x windows_server_2019_sxs.zip -o"%SystemDrive%" -y"
       - cmd //c "Dism /online /enable-feature /featurename:NetFx3 /All /Source:%SystemDrive%\sxs /NoRestart"
         # For XP support
#       - wget "https://aka.ms/vs/15/release/vs_buildtools.exe" -O vs_buildtools.exe
#       - ./vs_buildtools.exe modify --installPath "C:\Program Files (x86)\Microsoft Visual Studio\2017\BuildTools" --passive --norestart --wait --includeRecommended --add Microsoft.VisualStudio.ComponentGroup.NativeDesktop.WinXP --add Microsoft.VisualStudio.Component.WinXP
         # PATH
       - wget http://www.ensta-bretagne.fr/lebars/Share/cmake_extra_tools.zip --no-check-certificate -nv
       - cmd //c "7z x cmake_extra_tools.zip -o"%SystemDrive%" -y"
       - cmd //c "%SystemDrive%\cmake_extra_tools\pathman /as C:\Progra~2\CMake\bin"
     script: 
       - cmd //c "refreshenv.cmd & cmake -G "Visual Studio 15" -A Win32 -T v141_xp -D ENABLE_STATIC=ON -D DISABLE_OPENCV_SUPPORT=OFF -D OPENCV2413=OFF -D OPENCV320=ON -D OPENCV420=OFF -D ENABLE_MAVLINK_SUPPORT=ON -D ENABLE_LABJACK_SUPPORT=ON -D ENABLE_LIBMODBUS_SUPPORT=ON -D ENABLE_SBG_SDK_SUPPORT=OFF -D ENABLE_RPLIDAR_SDK_SUPPORT=OFF . & cmake --build . --config Release --target UxVCtrl & refreshenv.cmd & @echo wait 10 > run_test.txt & @echo exit >> run_test.txt & .\Release\UxVCtrl.exe < run_test.txt & copy .\Release\UxVCtrl.exe .\Release\UxVCtrl_compat.exe"
     deploy:
       <<: *deploy_base
       file: Release\UxVCtrl_compat.exe

   - name: "Windows Visual Studio 2017 x86 static with OpenCV 4.2.0 (Kinect v2, CLEye currently incompatible) without SBG SDK, RPLIDAR SDK, CLEye support"
     os: windows
     before_install: 
#       - powerShell -Command "Set-ExecutionPolicy -ExecutionPolicy RemoteSigned"
         # Need to free up disk space...
       - choco uninstall -y mingw
         # Test alternate CMake version...
       - choco uninstall -y cmake.install
#       - choco uninstall -y cmake cmake.install
       - wget https://cmake.org/files/v3.15/cmake-3.15.5-win32-x86.msi --no-check-certificate -nv
       - cmd //c "cmake-3.15.5-win32-x86.msi /qb-! /norestart ALLUSERS=1"
         # For OpenCV
       - powershell -Command "Install-WindowsFeature Server-Media-Foundation"
#       - powerShell -Command "Add-WindowsCapability -Online -Name Tools.Graphics.DirectX*"
#       - powerShell -Command "Add-WindowsCapability -Online -Name Media.WindowsMediaPlayer*"
#       - powerShell -Command "Add-WindowsCapability -Online -Name Browser.InternetExplorer*"
#       - powerShell -Command "Add-WindowsCapability -Online -Name ServerCore.AppCompatibility*"
       - wget http://www.ensta-bretagne.fr/lebars/Share/windows_server_core_prereq.zip --no-check-certificate -nv
       - cmd //c "7z x windows_server_core_prereq.zip -o"%SystemRoot%" -y"
         # For LabJack
         # https://dirteam.com/sander/2018/11/20/important-issues-in-windows-server-2019-build-10-0-17763-1-release-notes/
       - wget http://www.ensta-bretagne.fr/lebars/Share/windows_server_2019_sxs.zip --no-check-certificate -nv
       - cmd //c "7z x windows_server_2019_sxs.zip -o"%SystemDrive%" -y"
       - cmd //c "Dism /online /enable-feature /featurename:NetFx3 /All /Source:%SystemDrive%\sxs /NoRestart"
#       - cmd //c "Dism /online /enable-feature /featurename:NetFx3 /All /Source:%SystemDrive%\sxs /LimitAccess /NoRestart"
#       - powerShell -Command "Add-WindowsCapability -Online -Name NetFX3*"
#       - powershell -Command "Install-WindowsFeature NET-Framework-Features"
#       - powershell -Command "Install-WindowsFeature NET-Framework-Core"
#       - cmd //c "DISM /online /enable-feature /featurename:NetFx3 /all"
#       - choco install -y dotnet3.5 
         # For Kinect v2
       - choco install -y vcredist2012
       - wget http://www.ensta-bretagne.fr/lebars/Share/KinectSDK-v2.0.zip --no-check-certificate -nv
       - 7z x KinectSDK-v2.0.zip -o/C/ -y
       - mkdir -p "/C/Program Files/Microsoft SDKs/Kinect"
       - 7z x /C/KinectSDK-v2.0/v2.0_1409.zip -o"/C/Program Files/Microsoft SDKs/Kinect" -y
       - cmd //c "setx KINECTSDK20_DIR C:\Progra~1\Microsoft" "SDKs\Kinect\v2.0_1409 /m"
       - cmd //c "copy /Y /B %SystemDrive%\KinectSDK-v2.0\x64\Kinect20.dll %SystemRoot%\System32\Kinect20.dll"
       - cmd //c "copy /Y /B %SystemDrive%\KinectSDK-v2.0\x86\Kinect20.dll %SystemRoot%\SysWOW64\Kinect20.dll"
       - cmd //c "del /f /q KinectSDK-v2.0.zip %SystemDrive%\KinectSDK-v2.0"
#       - choco install -y vcredist-all
         # PATH
       - wget http://www.ensta-bretagne.fr/lebars/Share/cmake_extra_tools.zip --no-check-certificate -nv
       - cmd //c "7z x cmake_extra_tools.zip -o"%SystemDrive%" -y"
       - cmd //c "%SystemDrive%\cmake_extra_tools\pathman /as C:\Progra~2\CMake\bin"
       - df
     script: 
       - cmd //c "refreshenv.cmd & cmake -G "Visual Studio 15" -A Win32 -D ENABLE_STATIC=ON -D DISABLE_OPENCV_SUPPORT=OFF -D OPENCV2413=OFF -D OPENCV320=OFF -D OPENCV420=ON -D ENABLE_MAVLINK_SUPPORT=ON -D ENABLE_LABJACK_SUPPORT=ON -D ENABLE_LIBMODBUS_SUPPORT=ON -D ENABLE_SBG_SDK_SUPPORT=OFF -D ENABLE_RPLIDAR_SDK_SUPPORT=OFF -D ENABLE_BLUEVIEW_SUPPORT=ON -D ENABLE_CVKINECT2SDKHOOK=ON . & cmake --build . --config Release --target UxVCtrl & refreshenv.cmd & @echo wait 10 > run_test.txt & @echo exit >> run_test.txt & .\Release\UxVCtrl.exe < run_test.txt"
     deploy:
       <<: *deploy_base
       file: Release\UxVCtrl.exe

   - name: "Windows Visual Studio 2017 x86 static with OpenCV 3.2.0 and FFmpeg without SBG SDK, RPLIDAR SDK, CLEye support"
     os: windows
     before_install: 
         # Need to free up disk space...
       - choco uninstall -y mingw
         # Test alternate CMake version...
       - choco uninstall -y cmake.install
       - wget https://cmake.org/files/v3.15/cmake-3.15.5-win32-x86.msi --no-check-certificate -nv
       - cmd //c "cmake-3.15.5-win32-x86.msi /qb-! /norestart ALLUSERS=1"
         # For OpenCV
       - powershell -Command "Install-WindowsFeature Server-Media-Foundation"
       - wget http://www.ensta-bretagne.fr/lebars/Share/windows_server_core_prereq.zip --no-check-certificate -nv
       - cmd //c "7z x windows_server_core_prereq.zip -o"%SystemRoot%" -y"
         # For LabJack
         # https://dirteam.com/sander/2018/11/20/important-issues-in-windows-server-2019-build-10-0-17763-1-release-notes/
       - wget http://www.ensta-bretagne.fr/lebars/Share/windows_server_2019_sxs.zip --no-check-certificate -nv
       - cmd //c "7z x windows_server_2019_sxs.zip -o"%SystemDrive%" -y"
       - cmd //c "Dism /online /enable-feature /featurename:NetFx3 /All /Source:%SystemDrive%\sxs /NoRestart"
         # For Kinect v2
       - choco install -y vcredist2012
       - wget http://www.ensta-bretagne.fr/lebars/Share/KinectSDK-v2.0.zip --no-check-certificate -nv
       - 7z x KinectSDK-v2.0.zip -o/C/ -y
       - mkdir -p "/C/Program Files/Microsoft SDKs/Kinect"
       - 7z x /C/KinectSDK-v2.0/v2.0_1409.zip -o"/C/Program Files/Microsoft SDKs/Kinect" -y
       - cmd //c "setx KINECTSDK20_DIR C:\Progra~1\Microsoft" "SDKs\Kinect\v2.0_1409 /m"
       - cmd //c "copy /Y /B %SystemDrive%\KinectSDK-v2.0\x64\Kinect20.dll %SystemRoot%\System32\Kinect20.dll"
       - cmd //c "copy /Y /B %SystemDrive%\KinectSDK-v2.0\x86\Kinect20.dll %SystemRoot%\SysWOW64\Kinect20.dll"
       - cmd //c "del /f /q KinectSDK-v2.0.zip %SystemDrive%\KinectSDK-v2.0"
         # PATH
       - wget http://www.ensta-bretagne.fr/lebars/Share/cmake_extra_tools.zip --no-check-certificate -nv
       - cmd //c "7z x cmake_extra_tools.zip -o"%SystemDrive%" -y"
       - cmd //c "%SystemDrive%\cmake_extra_tools\pathman /as C:\Progra~2\CMake\bin"
     script: 
       - cmd //c "refreshenv.cmd & cmake -G "Visual Studio 15" -A Win32 -D ENABLE_STATIC=ON -D DISABLE_OPENCV_SUPPORT=OFF -D OPENCV2413=OFF -D OPENCV320=ON -D OPENCV420=OFF -D ENABLE_MAVLINK_SUPPORT=ON -D ENABLE_LABJACK_SUPPORT=ON -D ENABLE_LIBMODBUS_SUPPORT=ON -D ENABLE_SBG_SDK_SUPPORT=OFF -D ENABLE_RPLIDAR_SDK_SUPPORT=OFF -D ENABLE_BLUEVIEW_SUPPORT=ON -D ENABLE_CVKINECT2SDKHOOK=ON -D USE_FFMPEG_VIDEO=ON . & cmake --build . --config Release --target UxVCtrl & refreshenv.cmd & @echo wait 10 > run_test.txt & @echo exit >> run_test.txt & .\Release\UxVCtrl.exe < run_test.txt & copy .\Release\UxVCtrl.exe .\Release\UxVCtrl_cv320_ffmpeg.exe"
     deploy:
       <<: *deploy_base
       file: Release\UxVCtrl_cv320_ffmpeg.exe

   - name: "Windows Visual Studio 2017 x86 static with OpenCV 2.4.13 without SBG SDK, RPLIDAR SDK, CLEye support"
     os: windows
     before_install: 
         # Need to free up disk space...
       - choco uninstall -y mingw
         # Test alternate CMake version...
       - choco uninstall -y cmake.install
#       - choco uninstall -y cmake cmake.install
       - wget https://cmake.org/files/v3.15/cmake-3.15.5-win32-x86.msi --no-check-certificate -nv
       - cmd //c "cmake-3.15.5-win32-x86.msi /qb-! /norestart ALLUSERS=1"
         # For OpenCV
       - powershell -Command "Install-WindowsFeature Server-Media-Foundation"
       - wget http://www.ensta-bretagne.fr/lebars/Share/windows_server_core_prereq.zip --no-check-certificate -nv
       - cmd //c "7z x windows_server_core_prereq.zip -o"%SystemRoot%" -y"
         # For LabJack
         # https://dirteam.com/sander/2018/11/20/important-issues-in-windows-server-2019-build-10-0-17763-1-release-notes/
       - wget http://www.ensta-bretagne.fr/lebars/Share/windows_server_2019_sxs.zip --no-check-certificate -nv
       - cmd //c "7z x windows_server_2019_sxs.zip -o"%SystemDrive%" -y"
       - cmd //c "Dism /online /enable-feature /featurename:NetFx3 /All /Source:%SystemDrive%\sxs /NoRestart"
         # For Kinect v2
       - choco install -y vcredist2012
       - wget http://www.ensta-bretagne.fr/lebars/Share/KinectSDK-v2.0.zip --no-check-certificate -nv
       - 7z x KinectSDK-v2.0.zip -o/C/ -y
       - mkdir -p "/C/Program Files/Microsoft SDKs/Kinect"
       - 7z x /C/KinectSDK-v2.0/v2.0_1409.zip -o"/C/Program Files/Microsoft SDKs/Kinect" -y
       - cmd //c "setx KINECTSDK20_DIR C:\Progra~1\Microsoft" "SDKs\Kinect\v2.0_1409 /m"
       - cmd //c "copy /Y /B %SystemDrive%\KinectSDK-v2.0\x64\Kinect20.dll %SystemRoot%\System32\Kinect20.dll"
       - cmd //c "copy /Y /B %SystemDrive%\KinectSDK-v2.0\x86\Kinect20.dll %SystemRoot%\SysWOW64\Kinect20.dll"
       - cmd //c "del /f /q KinectSDK-v2.0.zip %SystemDrive%\KinectSDK-v2.0"
         # PATH
       - wget http://www.ensta-bretagne.fr/lebars/Share/cmake_extra_tools.zip --no-check-certificate -nv
       - cmd //c "7z x cmake_extra_tools.zip -o"%SystemDrive%" -y"
       - cmd //c "%SystemDrive%\cmake_extra_tools\pathman /as C:\Progra~2\CMake\bin"
       - df
     script: 
       - cmd //c "refreshenv.cmd & cmake -G "Visual Studio 15" -A Win32 -D ENABLE_STATIC=ON -D DISABLE_OPENCV_SUPPORT=OFF -D OPENCV2413=ON -D OPENCV320=OFF -D OPENCV420=OFF -D ENABLE_MAVLINK_SUPPORT=ON -D ENABLE_LABJACK_SUPPORT=ON -D ENABLE_LIBMODBUS_SUPPORT=ON -D ENABLE_SBG_SDK_SUPPORT=OFF -D ENABLE_RPLIDAR_SDK_SUPPORT=OFF -D ENABLE_BLUEVIEW_SUPPORT=ON -D ENABLE_CVKINECT2SDKHOOK=ON . & cmake --build . --config Release --target UxVCtrl & refreshenv.cmd & @echo wait 10 > run_test.txt & @echo exit >> run_test.txt & .\Release\UxVCtrl.exe < run_test.txt & copy .\Release\UxVCtrl.exe .\Release\UxVCtrl_cv2413.exe"
     deploy:
       <<: *deploy_base
       file: Release\UxVCtrl_cv2413.exe

   - name: "Windows Visual Studio 2017 x64 static with OpenCV 4.2.0 (Kinect v2, CLEye currently incompatible) without BlueView, CLEye support"
     os: windows
     before_install: 
         # Need to free up disk space...
       - choco uninstall -y mingw
         # For OpenCV
       - powershell -Command "Install-WindowsFeature Server-Media-Foundation"
       - wget http://www.ensta-bretagne.fr/lebars/Share/windows_server_core_prereq.zip --no-check-certificate -nv
       - cmd //c "7z x windows_server_core_prereq.zip -o"%SystemRoot%" -y"
         # For LabJack
         # https://dirteam.com/sander/2018/11/20/important-issues-in-windows-server-2019-build-10-0-17763-1-release-notes/
       - wget http://www.ensta-bretagne.fr/lebars/Share/windows_server_2019_sxs.zip --no-check-certificate -nv
       - cmd //c "7z x windows_server_2019_sxs.zip -o"%SystemDrive%" -y"
       - cmd //c "Dism /online /enable-feature /featurename:NetFx3 /All /Source:%SystemDrive%\sxs /NoRestart"
         # For Kinect v2
       - choco install -y vcredist2012
       - wget http://www.ensta-bretagne.fr/lebars/Share/KinectSDK-v2.0.zip --no-check-certificate -nv
       - 7z x KinectSDK-v2.0.zip -o/C/ -y
       - mkdir -p "/C/Program Files/Microsoft SDKs/Kinect"
       - 7z x /C/KinectSDK-v2.0/v2.0_1409.zip -o"/C/Program Files/Microsoft SDKs/Kinect" -y
       - cmd //c "setx KINECTSDK20_DIR C:\Progra~1\Microsoft" "SDKs\Kinect\v2.0_1409 /m"
       - cmd //c "copy /Y /B %SystemDrive%\KinectSDK-v2.0\x64\Kinect20.dll %SystemRoot%\System32\Kinect20.dll"
       - cmd //c "copy /Y /B %SystemDrive%\KinectSDK-v2.0\x86\Kinect20.dll %SystemRoot%\SysWOW64\Kinect20.dll"
       - cmd //c "del /f /q KinectSDK-v2.0.zip %SystemDrive%\KinectSDK-v2.0"
       - df
     script: 
       - cmd //c "refreshenv.cmd & cmake -G "Visual Studio 15" -A x64 -D ENABLE_STATIC=ON -D DISABLE_OPENCV_SUPPORT=OFF -D OPENCV2413=OFF -D OPENCV320=OFF -D OPENCV420=ON -D ENABLE_MAVLINK_SUPPORT=ON -D ENABLE_LABJACK_SUPPORT=ON -D ENABLE_LIBMODBUS_SUPPORT=ON -D ENABLE_SBG_SDK_SUPPORT=ON -D ENABLE_RPLIDAR_SDK_SUPPORT=ON -D ENABLE_CVKINECT2SDKHOOK=ON . & cmake --build . --config Release --target UxVCtrl & refreshenv.cmd & @echo wait 10 > run_test.txt & @echo exit >> run_test.txt & .\Release\UxVCtrl.exe < run_test.txt & copy .\Release\UxVCtrl.exe .\Release\UxVCtrl_x64.exe"
     deploy:
       <<: *deploy_base
       file: Release\UxVCtrl_x64.exe

   - name: "Windows Qt 2010.05 MinGW 4.4.0 x86 with OpenCV 2.4.13 without LabJack, SBG SDK, RPLIDAR SDK, BlueView, Kinect v2, CLEye support"
     os: windows
     before_install: 
       - choco uninstall -y mingw
       - choco install -y make
       - wget http://www.ensta-bretagne.fr/lebars/Share/qt-sdk-win-opensource-2010.05.exe --no-check-certificate -nv
       - cmd //c "move /Y qt-sdk-win-opensource-2010.05.exe %SystemDrive%\ "
         # Take several min...
       - cmd //c "%SystemDrive%\qt-sdk-win-opensource-2010.05.exe /S"
       - cmd //c "del /f /q %SystemDrive%\qt-sdk-win-opensource-2010.05.exe"
         # For OpenCV
       - powershell -Command "Install-WindowsFeature Server-Media-Foundation"
       - wget http://www.ensta-bretagne.fr/lebars/Share/windows_server_core_prereq.zip --no-check-certificate -nv
       - cmd //c "7z x windows_server_core_prereq.zip -o"%SystemRoot%" -y"
         # For BlueView
       - choco install -y vcredist2010
         # PATH
       - wget http://www.ensta-bretagne.fr/lebars/Share/cmake_extra_tools.zip --no-check-certificate -nv
       - cmd //c "7z x cmake_extra_tools.zip -o"%SystemDrive%" -y"
       - cmd //c "%SystemDrive%\cmake_extra_tools\pathman /as C:\Qt\2010.05\qt\bin;C:\Qt\2010.05\bin;C:\Qt\2010.05\mingw\bin"
       - df
     script: 
       - cmd //c "refreshenv.cmd & set PATH=C:\Qt\2010.05\qt\bin;C:\Qt\2010.05\bin;C:\Qt\2010.05\mingw\bin;%PATH% & cmake -G "MSYS Makefiles" -D CMAKE_BUILD_TYPE=Release -D DISABLE_OPENCV_SUPPORT=OFF -D OPENCV2413=ON -D OPENCV320=OFF -D OPENCV420=OFF -D ENABLE_MAVLINK_SUPPORT=ON -D ENABLE_LIBMODBUS_SUPPORT=ON -D ENABLE_BLUEVIEW_SUPPORT=ON . & cmake --build . & refreshenv.cmd & @echo wait 10 > run_test.txt & @echo exit >> run_test.txt & .\UxVCtrl.exe < run_test.txt"

   - name: "Windows Qt 5.12.6 MinGW 7.3.0 x86 with OpenCV 4.2.0 without LabJack, SBG SDK, RPLIDAR SDK, BlueView, Kinect v2, CLEye support"
     os: windows
     before_install: 
       - choco uninstall -y mingw
#       - choco install -y mingw --version=5.3.0 --allow-downgrade
         # Need to free up disk space...
#       - choco uninstall -y visualstudio2017-workload-webbuildtools visualstudio2017-workload-netcorebuildtools visualstudio2017-workload-vctools microsoft-build-tools
#       - wget "https://aka.ms/vs/15/release/vs_buildtools.exe" -O vs_buildtools.exe
#       - ./vs_buildtools.exe modify --installPath "C:\Program Files (x86)\Microsoft Visual Studio\2017\BuildTools" --passive --norestart --wait --remove Microsoft.VisualStudio.ComponentGroup.NativeDesktop.WinXP --remove Microsoft.VisualStudio.Component.WinXP --remove Microsoft.VisualStudio.Component.VC.CLI.Support
       - df
       - rm -Rf "/C/Program Files (x86)/Microsoft Visual Studio/2017/BuildTools" || true
       - df
       - rm -Rf "/C/Program Files (x86)/Windows Kits" || true
       - df
       - rm -Rf "/C/Windows/SoftwareDistribution" || true
       - df
       - choco install -y make
       - wget http://download.qt.io/archive/qt/5.12/5.12.6/qt-opensource-windows-x86-5.12.6.exe --no-check-certificate -nv
       - cmd //c "move /Y qt-opensource-windows-x86-5.12.6.exe %SystemDrive%\ "
       - wget http://www.ensta-bretagne.fr/lebars/Share/qt-installer-5.12.6-mingw73_32.qs --no-check-certificate -nv
       - cmd //c "move /Y qt-installer-5.12.6-mingw73_32.qs %SystemDrive%\ "
       - cmd //c netsh advfirewall set allprofiles state on
       - cmd //c netsh advfirewall firewall add rule name="Qt offline installer" dir=out action=block program="%SystemDrive%\qt-opensource-windows-x86-5.12.6.exe" enable=yes
         # Take several min...
       - cmd //c "%SystemDrive%\qt-opensource-windows-x86-5.12.6.exe --script %SystemDrive%\qt-installer-5.12.6-mingw73_32.qs"
       - cmd //c netsh advfirewall firewall del rule name="Qt offline installer"
       - cmd //c netsh advfirewall set allprofiles state off
       - cmd //c "del /f /q %SystemDrive%\qt-opensource-windows-x86-5.12.6.exe"
         # For OpenCV
       - powershell -Command "Install-WindowsFeature Server-Media-Foundation"
       - wget http://www.ensta-bretagne.fr/lebars/Share/windows_server_core_prereq.zip --no-check-certificate -nv
       - cmd //c "7z x windows_server_core_prereq.zip -o"%SystemRoot%" -y"
         # For BlueView
       - choco install -y vcredist2010
         # PATH
       - wget http://www.ensta-bretagne.fr/lebars/Share/cmake_extra_tools.zip --no-check-certificate -nv
       - cmd //c "7z x cmake_extra_tools.zip -o"%SystemDrive%" -y"
       - cmd //c "%SystemDrive%\cmake_extra_tools\pathman /as C:\Qt\Qt5.12.6\5.12.6\mingw73_32\bin;C:\Qt\Qt5.12.6\Tools\mingw730_32\bin"
       - df
     script: 
       - cmd //c "refreshenv.cmd & set PATH=C:\Qt\Qt5.12.6\5.12.6\mingw73_32\bin;C:\Qt\Qt5.12.6\Tools\mingw730_32\bin;%PATH% & cmake -G "MSYS Makefiles" -D CMAKE_BUILD_TYPE=Release -D DISABLE_OPENCV_SUPPORT=OFF -D OPENCV2413=OFF -D OPENCV320=OFF -D OPENCV420=ON -D ENABLE_MAVLINK_SUPPORT=ON -D ENABLE_LIBMODBUS_SUPPORT=ON -D ENABLE_BLUEVIEW_SUPPORT=ON . & cmake --build . & refreshenv.cmd & @echo wait 10 > run_test.txt & @echo exit >> run_test.txt & .\UxVCtrl.exe < run_test.txt"
