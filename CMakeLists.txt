cmake_minimum_required(VERSION 3.2)
project(UxVCtrl)

if (NOT EXISTS "../OSUtils")
    file(DOWNLOAD "https://github.com/ENSTABretagneRobotics/OSUtils/archive/master.zip" "../OSUtils.zip")
	execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvfz "../OSUtils.zip")
	execute_process(COMMAND ${CMAKE_COMMAND} -E rename OSUtils-master ../OSUtils)
	execute_process(COMMAND ${CMAKE_COMMAND} -E remove "../OSUtils.zip")
endif()
if (NOT EXISTS "../Extensions")
    file(DOWNLOAD "https://github.com/ENSTABretagneRobotics/Extensions/archive/master.zip" "../Extensions.zip")
	execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvfz "../Extensions.zip")
	execute_process(COMMAND ${CMAKE_COMMAND} -E rename Extensions-master ../Extensions)
	execute_process(COMMAND ${CMAKE_COMMAND} -E remove "../Extensions.zip")
endif()
if (NOT EXISTS "../interval")
    file(DOWNLOAD "https://github.com/ENSTABretagneRobotics/interval/archive/master.zip" "../interval.zip")
	execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvfz "../interval.zip")
	execute_process(COMMAND ${CMAKE_COMMAND} -E rename interval-master ../interval)
	execute_process(COMMAND ${CMAKE_COMMAND} -E remove "../interval.zip")
endif()
if (NOT EXISTS "../matrix_lib")
    file(DOWNLOAD "https://github.com/ENSTABretagneRobotics/matrix_lib/archive/master.zip" "../matrix_lib.zip")
	execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvfz "../matrix_lib.zip")
	execute_process(COMMAND ${CMAKE_COMMAND} -E rename matrix_lib-master ../matrix_lib)
	execute_process(COMMAND ${CMAKE_COMMAND} -E remove "../matrix_lib.zip")
endif()

add_executable(UxVCtrl Observer.cpp NMEAInterface.cpp Main.cpp Globals.cpp Controller.cpp Config.cpp Computations.cpp Commands.cpp Hardware/ublox.cpp Hardware/RS232Port.cpp Hardware/RazorAHRS.cpp Hardware/NMEADevice.cpp Hardware/Maestro.cpp Hardware/gpControl.cpp ../interval/imatrix.cpp ../interval/rmatrix.cpp ../interval/box.cpp ../interval/interval.cpp ../interval/iboolean.cpp ../OSUtils/OSTimer.c ../OSUtils/OSTime.c ../OSUtils/OSThread.c ../OSUtils/OSSem.c ../OSUtils/OSNet.c ../OSUtils/OSMisc.c ../OSUtils/OSEv.c ../OSUtils/OSCriticalSection.c ../OSUtils/OSCore.c ../OSUtils/OSComputerRS232Port.c)

if(WIN32)
	option(ENABLE_CVKINECT2SDKHOOK "ENABLE_CVKINECT2SDKHOOK" OFF)
	option(ENABLE_CVCLEYESDKHOOK "ENABLE_CVCLEYESDKHOOK" OFF)
endif()
option(ENABLE_BLUEVIEW_SUPPORT "ENABLE_BLUEVIEW_SUPPORT" OFF)
option(ENABLE_MAVLINK_SUPPORT "ENABLE_MAVLINK_SUPPORT" OFF) 
option(ENABLE_LABJACK_SUPPORT "ENABLE_LABJACK_SUPPORT" OFF) 
option(ENABLE_LIBMODBUS_SUPPORT "ENABLE_LIBMODBUS_SUPPORT" OFF) 
option(ENABLE_SBG_SUPPORT "ENABLE_SBG_SUPPORT" OFF) 
option(DISABLE_OPENCV_SUPPORT "DISABLE_OPENCV_SUPPORT" ON) 
option(DISABLE_OPENCV_SUPPORT "USE_FFMPEG_VIDEO" OFF) 

option(ENABLE_BUILD_OPTIMIZATION_SAILBOAT "ENABLE_BUILD_OPTIMIZATION_SAILBOAT" OFF)
option(OPENCV2413 "OPENCV2413" ON)
#option(OPENCV320 "OPENCV320" OFF)
option(USE_ALTERNATE_RECORDING "USE_ALTERNATE_RECORDING" OFF)
option(DISABLE_AIS_SUPPORT "DISABLE_AIS_SUPPORT" OFF)

if(ENABLE_BUILD_OPTIMIZATION_SAILBOAT)
	add_definitions(-DENABLE_BUILD_OPTIMIZATION_SAILBOAT)
endif()

if(ENABLE_BLUEVIEW_SUPPORT)
	add_definitions(-DENABLE_BLUEVIEW_SUPPORT)
	add_definitions(-DBVTSDK_VERSION=4)
	target_sources(UxVCtrl PUBLIC Hardware/BlueView.cpp) 
	if(WIN32)
		include_directories("${BVTSDK_DIR}/include")
		if(MSVC)
			target_link_libraries(UxVCtrl -L"${BVTSDK_DIR}/x86/vc15/lib")
			target_link_libraries(UxVCtrl bvtsdk4.lib)
		else()
			target_link_libraries(UxVCtrl -L"${BVTSDK_DIR}/x86/vc9/lib")
			target_link_libraries(UxVCtrl bvtsdk4)
		endif()
	else()
		target_link_libraries(UxVCtrl bvtsdk)
	endif()
else()
endif()

if(ENABLE_CVKINECT2SDKHOOK)
	add_definitions(-DENABLE_CVKINECT2SDKHOOK)
	include_directories("${KINECTSDK20_DIR}/inc")
	if(MSVC)
		target_link_libraries(UxVCtrl -L"${KINECTSDK20_DIR}/Lib/x86")
		target_link_libraries(UxVCtrl Kinect20.lib)
	else()
		target_link_libraries(UxVCtrl -L"${KINECTSDK20_DIR}/Lib/x86")
		target_link_libraries(UxVCtrl Kinect20)
	endif()
endif()

if(ENABLE_CVCLEYESDKHOOK)
	add_definitions(-DENABLE_CVCLEYESDKHOOK)
	include_directories("${CLEYESDK_DIR}/Include")
	if(MSVC)
		target_link_libraries(UxVCtrl -L"${CLEYESDK_DIR}/Lib")
		target_link_libraries(UxVCtrl CLEyeMulticam.lib)
	else()
		target_link_libraries(UxVCtrl -L"${CLEYESDK_DIR}/Lib")
		target_link_libraries(UxVCtrl CLEyeMulticam)
	endif()
endif()

if(ENABLE_MAVLINK_SUPPORT)
	add_definitions(-DENABLE_MAVLINK_SUPPORT)
	target_sources(UxVCtrl PUBLIC MAVLinkInterface.cpp Hardware/MAVLinkDevice.cpp) 
	if(WIN32)
		include_directories("${MAVLINK_SDK_DIR}")
	endif()
else()
endif()

if(ENABLE_LABJACK_SUPPORT)
	add_definitions(-DENABLE_LABJACK_SUPPORT)
	target_sources(UxVCtrl PUBLIC Hardware/UE9A.cpp ../Extensions/Devices/LabjackUtils/UE9Utils/UE9UtilsUE9Mgr.cpp ../Extensions/Devices/LabjackUtils/UE9Utils/UE9Cfg.cpp ../Extensions/Devices/LabjackUtils/UE9Utils/UE9Core.cpp ../Extensions/Devices/LabjackUtils/UE9Utils/ue9.cpp ../Extensions/Devices/LabjackUtils/liblabjackusb/labjackusb.cpp)
	include_directories("${PROJECT_SOURCE_DIR}/../Extensions/Devices/LabjackUtils/liblabjackusb")
	include_directories("${PROJECT_SOURCE_DIR}/../Extensions/Devices/LabjackUtils/UE9Utils")
	include_directories("${ProgramFiles}/LabJack/Drivers")
	if(WIN32)
		if(MSVC)
			target_link_libraries(UxVCtrl -L"${ProgramFiles}/LabJack/Drivers")
			target_link_libraries(UxVCtrl labjackud.lib)
		else()
			target_link_libraries(UxVCtrl -L"${ProgramFiles}/LabJack/Drivers")
			target_link_libraries(UxVCtrl labjackud)
		endif()
	else()
	endif()
else()
endif()

if(ENABLE_LIBMODBUS_SUPPORT)
	add_definitions(-DENABLE_LIBMODBUS_SUPPORT)
	target_sources(UxVCtrl PUBLIC Hardware/CISCREA.cpp) 
	if(WIN32)
		include_directories("${ProgramFiles}/libmodbus-3.0.6-msvc/include")
		if(MSVC)
			target_link_libraries(UxVCtrl -L"${ProgramFiles}/libmodbus-3.0.6-msvc/x86/vc15/lib")
			target_link_libraries(UxVCtrl libmodbus-3.0.6-msvcd.lib debug)
			target_link_libraries(UxVCtrl libmodbus-3.0.6-msvc.lib optimized)
		else()
			target_link_libraries(UxVCtrl -L"${ProgramFiles}/libmodbus-3.0.6-msvc/x86/vc9/lib")
			target_link_libraries(UxVCtrl libmodbus-3.0.6-msvc)
		endif()
	else()
		target_link_libraries(UxVCtrl modbus)
	endif()
else()
endif()

if(ENABLE_SBG_SUPPORT)
	add_definitions(-DENABLE_SBG_SUPPORT)
	target_sources(UxVCtrl PUBLIC Hardware/SBG.cpp) 
	if(WIN32)
		include_directories("${SBG_SDK_DIR}/include/sbgECom/common")
		include_directories("${SBG_SDK_DIR}/include/sbgECom/src")
		if(MSVC)
			target_link_libraries(UxVCtrl -L"${SBG_SDK_DIR}/x86/vc15/lib")
			target_link_libraries(UxVCtrl sbgEComd.lib debug)
			target_link_libraries(UxVCtrl sbgECom.lib optimized)
		else()
			target_link_libraries(UxVCtrl -L"${SBG_SDK_DIR}/x86/vc9/lib")
			target_link_libraries(UxVCtrl sbgECom)
		endif()
	else()
		include_directories("/usr/local/include/sbgECom/common")
		include_directories("/usr/local/include/sbgECom/src")
		target_link_libraries(UxVCtrl sbgECom)
	endif()
else()
endif()

if(DISABLE_OPENCV_SUPPORT)
	add_definitions(-DDISABLE_OPENCV_SUPPORT)
else()
	if(ENABLE_BUILD_OPTIMIZATION_SAILBOAT)
		target_sources(UxVCtrl PUBLIC Ball.cpp OpenCVGUI.cpp VideoRecord.cpp Hardware/Video.cpp ../Extensions/Img/CvCore.c ../Extensions/Img/CvDisp.c ../Extensions/Img/CvDraw.c ../Extensions/Img/CvFiles.c ../Extensions/Img/CvProc.c)
	else()
		target_sources(UxVCtrl PUBLIC Ball.cpp ExternalVisualLocalization.cpp MissingWorker.cpp OpenCVGUI.cpp Pinger.cpp Pipeline.cpp SurfaceVisualObstacle.cpp VisualObstacle.cpp VideoRecord.cpp Wall.cpp Hardware/Video.cpp ../Extensions/Img/CvCore.c ../Extensions/Img/CvDisp.c ../Extensions/Img/CvDraw.c ../Extensions/Img/CvFiles.c ../Extensions/Img/CvProc.c)
	endif()
	if(OPENCV2413)
		add_definitions(-DOPENCV2413)
	elseif(OPENCV320)
		add_definitions(-DOPENCV320)
	endif()
	if(WIN32)
		include_directories("C:/OpenCV2.4.13/include")
		if(MSVC)
			target_link_libraries(UxVCtrl -L"C:/OpenCV2.4.13/x86/vc15/lib")
			target_link_libraries(UxVCtrl opencv_core2413d.lib opencv_imgproc2413d.lib opencv_highgui2413d.lib debug)
			target_link_libraries(UxVCtrl opencv_core2413.lib opencv_imgproc2413.lib opencv_highgui2413.lib optimized)
		else()
			target_link_libraries(UxVCtrl -L"C:/OpenCV2.4.13/x86/mingw/lib")
			target_link_libraries(UxVCtrl opencv_core2413 opencv_imgproc2413 opencv_highgui2413)
		endif()
	else()
		target_link_libraries(UxVCtrl opencv_core opencv_imgproc opencv_highgui)
	endif()
endif()

if(USE_FFMPEG_VIDEO)
	add_definitions(-DUSE_FFMPEG_VIDEO)
	target_sources(UxVCtrl PUBLIC Hardware/SBG.cpp) 
	if(WIN32)
		if(MSVC)
			include_directories("${ProgramFiles}/ffmpeg-msvc/include")
			target_link_libraries(UxVCtrl -L"${ProgramFiles}/ffmpeg-msvc/x86/vc15/lib")
			target_link_libraries(UxVCtrl avcodec.lib avdevice.lib avfilter.lib avformat.lib avutil.lib postproc.lib swresample.lib swscale.lib)
		else()
			include_directories("${ProgramFiles}/ffmpeg-msvc/include")
			target_link_libraries(UxVCtrl -L"${ProgramFiles}/ffmpeg-msvc/x86/vc15/lib")
			target_link_libraries(UxVCtrl avcodec avdevice avfilter avformat avutil postproc swresample swscale)
		endif()
	else()
		target_link_libraries(UxVCtrl avcodec avdevice avfilter avformat avutil postproc swresample swscale)
	endif()
else()
endif()

if(ENABLE_BUILD_OPTIMIZATION_SAILBOAT)
else()
 target_sources(UxVCtrl PUBLIC SSC32Interface.cpp SonarLocalization.cpp SonarAltitudeEstimation.cpp Simulator.cpp SeanetProcessing.cpp RazorAHRSInterface.cpp FollowMe.cpp Hardware/SwarmonDevice.cpp Hardware/SSC32.cpp Hardware/Seanet.cpp Hardware/RPLIDAR.cpp Hardware/PathfinderDVL.cpp Hardware/P33x.cpp Hardware/NortekDVL.cpp Hardware/MT.cpp Hardware/MS583730BA.cpp Hardware/MS580314BA.cpp Hardware/MiniSSC.cpp Hardware/MES.cpp Hardware/MDM.cpp Hardware/LIRMIA3.cpp Hardware/Hokuyo.cpp Hardware/IM483I.cpp)
endif()

if(USE_ALTERNATE_RECORDING)
	add_definitions(-DUSE_ALTERNATE_RECORDING)
endif()

if(DISABLE_AIS_SUPPORT)
	add_definitions(-DDISABLE_AIS_SUPPORT)
endif()

if (WIN32)
	add_definitions(-DENABLE_GETTIMEOFDAY_WIN32 -DDISABLE_TIMEZONE_STRUCT_REDEFINITION)
	add_definitions(-DENABLE_CANCEL_THREAD -DENABLE_KILL_THREAD)
else()
	add_definitions(-DENABLE_OPENCV_HIGHGUI_THREADS_WORKAROUND)
endif()
add_definitions(-DSIMULATED_INTERNET_SWARMONDEVICE)

include_directories("${PROJECT_SOURCE_DIR}")
include_directories("${PROJECT_SOURCE_DIR}/../OSUtils")
include_directories("${PROJECT_SOURCE_DIR}/../Extensions/Img")
include_directories("${PROJECT_SOURCE_DIR}/../interval")
include_directories("${PROJECT_SOURCE_DIR}/../matrix_lib")
include_directories("${PROJECT_SOURCE_DIR}/Hardware")
include_directories("..")

if(WIN32)
	if(MSVC)
		target_link_libraries(UxVCtrl WinMM.lib WS2_32.lib)
	else()
		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O3 -Wall -Wno-unknown-pragmas -Wno-unused-parameter")
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fpermissive")
		target_link_libraries(UxVCtrl WinMM WS2_32)
	endif()
else()
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O3 -Wall -Wno-unknown-pragmas -Wno-unused-parameter")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fpermissive")
	target_link_libraries(UxVCtrl pthread rt m)
endif()
