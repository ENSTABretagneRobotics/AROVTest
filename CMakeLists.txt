cmake_minimum_required(VERSION 2.8...3.16)

if(${CMAKE_VERSION} VERSION_LESS "3.12")
	message(WARNING "CMake < 3.12 is not fully supported...")
endif()

#if(POLICY CMP0053)
#cmake_policy(SET CMP0053 OLD)
#endif()
set(ProgramFilesx86 "ProgramFiles(x86)")

if(POLICY CMP0076)
cmake_policy(SET CMP0076 OLD)
endif()

project(UxVCtrl)

if(NOT(PROJECT_BINARY_DIR STREQUAL PROJECT_SOURCE_DIR))
	message(WARNING "Please set the CMake build folder to the same as the source folder if possible...")
	message(WARNING "Ensure also the working directory at runtime is UxVCtrl folder...")
endif()

option(OPENCV2413 "OPENCV2413" OFF)
option(OPENCV320 "OPENCV320" ON)
option(OPENCV342 "OPENCV342" OFF)
option(OPENCV420 "OPENCV420" OFF)

if(WIN32)
	if(NOT DEFINED ARCH)
		# First attempt to guess...
		if(CMAKE_SIZEOF_VOID_P EQUAL 8)
			set(ARCH "x64")
		elseif(CMAKE_SIZEOF_VOID_P EQUAL 4)
			set(ARCH "x86")
		else()
			message(WARNING "Unknown architecture, please try to set manually ARCH and RUNTIME variables...")
		endif()
		if(MSVC)
			# Get cl target bitness
			if("${CMAKE_GENERATOR_PLATFORM}" STREQUAL "x64")
				set(ARCH "x64")
			elseif("${CMAKE_GENERATOR_PLATFORM}" STREQUAL "Win64")
				set(ARCH "x64")
			elseif("${CMAKE_GENERATOR_PLATFORM}" STREQUAL "x86")
				set(ARCH "x86")
			elseif("${CMAKE_GENERATOR_PLATFORM}" STREQUAL "Win32")
				set(ARCH "x86")
			elseif("${CMAKE_GENERATOR_PLATFORM}" STREQUAL "ARM64")
				set(ARCH "ARM64")
			elseif("${CMAKE_GENERATOR_PLATFORM}" STREQUAL "ARM")
				set(ARCH "ARM")
			endif()
		endif()
	endif()
	if(NOT DEFINED RUNTIME)
		if(MSVC)
			if(MSVC_TOOLSET_VERSION EQUAL 80)
				set(RUNTIME "vc8")
			elseif(MSVC_TOOLSET_VERSION EQUAL 90)
				set(RUNTIME "vc9")
			elseif(MSVC_TOOLSET_VERSION EQUAL 100)
				set(RUNTIME "vc10")
			elseif(MSVC_TOOLSET_VERSION EQUAL 110)
				set(RUNTIME "vc11")
			elseif(MSVC_TOOLSET_VERSION EQUAL 120)
				set(RUNTIME "vc12")
			elseif(MSVC_TOOLSET_VERSION EQUAL 140)
				set(RUNTIME "vc14")
			elseif(MSVC_TOOLSET_VERSION EQUAL 141)
				set(RUNTIME "vc15")
			elseif(MSVC_TOOLSET_VERSION EQUAL 142)
				set(RUNTIME "vc16")
			else()
				message(WARNING "Unknown Visual Studio compiler, please try to set manually ARCH and RUNTIME variables...")
				set(RUNTIME "vc10") # MSVC_TOOLSET_VERSION not set probably because an old version of CMake on XP with hopefully the latest Visual Studio for XP...
			endif()
		elseif(MINGW)
			set(RUNTIME "mingw")
		else()
			message(WARNING "Unknown compiler, please try to set manually ARCH and RUNTIME variables...")
		endif()
	endif()
else()
	if(NOT DEFINED ARCH)
	    # CMAKE_SYSTEM_PROCESSOR...?
		if(CMAKE_SIZEOF_VOID_P EQUAL 8)
			set(ARCH "x86_64")
		elseif(CMAKE_SIZEOF_VOID_P EQUAL 4)
			set(ARCH "i386")
		else()
			message(WARNING "Unknown architecture, please try to set manually ARCH and USR_LIB_ARCH_DIR variables...")
		endif()
	endif()
	if(NOT DEFINED USR_LIB_ARCH_DIR)
		if(APPLE)
			set(USR_LIB_ARCH_DIR "/usr/local/lib")
		else()
			if("${ARCH}" STREQUAL "x86_64")
				set(USR_LIB_ARCH_DIR "/usr/lib/${ARCH}-linux-gnu")
			elseif("${ARCH}" STREQUAL "i386")
				set(USR_LIB_ARCH_DIR "/usr/lib/${ARCH}-linux-gnu")
			else()
				message(WARNING "Unknown architecture, please try to set manually ARCH and USR_LIB_ARCH_DIR variables...")
				set(USR_LIB_ARCH_DIR "/usr/lib")
			endif()
		endif()
	endif()
endif()

if(WIN32 AND ((NOT DEFINED LIBPREFIXRUNTIME) OR (NOT DEFINED LIBEXTRUNTIME)))
	if(MSVC)
		set(LIBPREFIXRUNTIME "")
		set(LIBEXTRUNTIME ".lib")
	elseif(MINGW)
		set(LIBPREFIXRUNTIME "lib")
		set(LIBEXTRUNTIME ".dll.a")
	else()
		message(WARNING "Please try to set manually LIBPREFIXRUNTIME and LIBEXTRUNTIME variables...")
	endif()
endif()

option(ENABLE_AUTO_DOWNLOAD "ENABLE_AUTO_DOWNLOAD" ON)
if(WIN32)
	#set(SUDO_COMMAND "elevate" CACHE STRING "SUDO_COMMAND")
	set(INSTALL_PKG_COMMAND "choco install -y -r --no-progress" CACHE STRING "INSTALL_PKG_COMMAND")
	set(OPENCV_PKG_NAME "opencv --package-parameters '/Environment:C:\\tools\\opencv\\build'" CACHE STRING "OPENCV_PKG_NAME")
	#set(LIBMODBUS_PKG_NAME "libmodbus" CACHE STRING "LIBMODBUS_PKG_NAME")
	set(LIBMODBUS_PKG_PREFIX "$ENV{ProgramFiles}" CACHE STRING "LIBMODBUS_PKG_PREFIX")
	set(FFMPEG_PKG_PREFIX "$ENV{ProgramFiles}" CACHE STRING "FFMPEG_PKG_PREFIX")
	set(MAVLINK_PKG_PREFIX "$ENV{ProgramFiles}" CACHE STRING "MAVLINK_PKG_PREFIX")
	set(SBG_SDK_PKG_PREFIX "$ENV{ProgramFiles}" CACHE STRING "SBG_SDK_PKG_PREFIX")
	set(RPLIDAR_SDK_PKG_PREFIX "$ENV{ProgramFiles}" CACHE STRING "RPLIDAR_SDK_PKG_PREFIX")
	option(ENABLE_FIND_PACKAGE "ENABLE_FIND_PACKAGE" OFF)
elseif(APPLE)
	set(SUDO_COMMAND "sudo" CACHE STRING "SUDO_COMMAND")
	set(INSTALL_PKG_COMMAND "brew install" CACHE STRING "INSTALL_PKG_COMMAND")
	set(OPENCV_PKG_NAME "opencv" CACHE STRING "OPENCV_PKG_NAME")
	set(LIBMODBUS_PKG_NAME "libmodbus" CACHE STRING "LIBMODBUS_PKG_NAME")
	set(LIBMODBUS_PKG_PREFIX "/usr/local" CACHE STRING "LIBMODBUS_PKG_PREFIX")
	set(FFMPEG_PKG_NAME "ffmpeg" CACHE STRING "FFMPEG_PKG_NAME")
	set(FFMPEG_PKG_PREFIX "/usr/local" CACHE STRING "FFMPEG_PKG_PREFIX")
	set(MAVLINK_PKG_PREFIX "/usr/local" CACHE STRING "MAVLINK_PKG_PREFIX")
	set(SBG_SDK_PKG_PREFIX "/usr/local" CACHE STRING "SBG_SDK_PKG_PREFIX")
	set(RPLIDAR_SDK_PKG_PREFIX "/usr/local" CACHE STRING "RPLIDAR_SDK_PKG_PREFIX")
	option(ENABLE_FIND_PACKAGE "ENABLE_FIND_PACKAGE" ON)
else()
	set(SUDO_COMMAND "sudo" CACHE STRING "SUDO_COMMAND")
	set(INSTALL_PKG_COMMAND "sudo apt-get -y install" CACHE STRING "INSTALL_PKG_COMMAND")
	set(OPENCV_PKG_NAME "libopencv-dev" CACHE STRING "OPENCV_PKG_NAME")
	set(LIBMODBUS_PKG_NAME "libmodbus-dev" CACHE STRING "LIBMODBUS_PKG_NAME")
	set(LIBMODBUS_PKG_PREFIX "/usr/local" CACHE STRING "LIBMODBUS_PKG_PREFIX")
	set(FFMPEG_PKG_NAME "libavcodec-dev" CACHE STRING "FFMPEG_PKG_NAME")
	set(FFMPEG_PKG_PREFIX "/usr/local" CACHE STRING "FFMPEG_PKG_PREFIX")
	set(MAVLINK_PKG_PREFIX "/usr/local" CACHE STRING "MAVLINK_PKG_PREFIX")
	set(SBG_SDK_PKG_PREFIX "/usr/local" CACHE STRING "SBG_SDK_PKG_PREFIX")
	set(RPLIDAR_SDK_PKG_PREFIX "/usr/local" CACHE STRING "RPLIDAR_SDK_PKG_PREFIX")
	set(LIBFREENECT2_PREREQ_PKG_NAME "libusb-1.0-0-dev libturbojpeg0-dev libglfw3-dev" CACHE STRING "LIBFREENECT2_PREREQ_PKG_NAME")
	option(ENABLE_FIND_PACKAGE "ENABLE_FIND_PACKAGE" ON)
endif()
option(ENABLE_STATIC "ENABLE_STATIC" OFF)

if(ENABLE_AUTO_DOWNLOAD)
	if(WIN32)
		message(STATUS "If behind a proxy, you might need to type e.g. \"set https_proxy=192.168.1.17:8080\" in the same terminal before running cmake-gui/cmake to configure the proxy settings...")
	else()
		message(STATUS "If behind a proxy, you might need to type e.g. \"export https_proxy=192.168.1.17:8080\" in the same terminal before running cmake-gui/cmake to configure the proxy settings...")
	endif()
	message(STATUS "If some prerequisites cannot be downloaded and installed automatically, try to install them manually and change ENABLE_AUTO_DOWNLOAD option in cmake-gui/cmake...")
endif()

if(ENABLE_AUTO_DOWNLOAD)
	if(NOT EXISTS "${PROJECT_SOURCE_DIR}/../OSUtils")
		message(STATUS "Downloading OSUtils...")
		file(DOWNLOAD "https://github.com/ENSTABretagneRobotics/OSUtils/archive/master.zip" "${PROJECT_SOURCE_DIR}/../OSUtils.zip")
		execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/../OSUtils.zip")
		execute_process(COMMAND ${CMAKE_COMMAND} -E rename "${PROJECT_SOURCE_DIR}/OSUtils-master" "${PROJECT_SOURCE_DIR}/../OSUtils")
		execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/../OSUtils.zip")
	endif()
	if(NOT EXISTS "${PROJECT_SOURCE_DIR}/../Extensions")
		message(STATUS "Downloading Extensions...")
		file(DOWNLOAD "https://github.com/ENSTABretagneRobotics/Extensions/archive/master.zip" "${PROJECT_SOURCE_DIR}/../Extensions.zip")
		execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/../Extensions.zip")
		execute_process(COMMAND ${CMAKE_COMMAND} -E rename "${PROJECT_SOURCE_DIR}/Extensions-master" "${PROJECT_SOURCE_DIR}/../Extensions")
		execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/../Extensions.zip")
	endif()
	if(NOT EXISTS "${PROJECT_SOURCE_DIR}/../interval")
		message(STATUS "Downloading interval...")
		file(DOWNLOAD "https://github.com/ENSTABretagneRobotics/interval/archive/master.zip" "${PROJECT_SOURCE_DIR}/../interval.zip")
		execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/../interval.zip")
		execute_process(COMMAND ${CMAKE_COMMAND} -E rename "${PROJECT_SOURCE_DIR}/interval-master" "${PROJECT_SOURCE_DIR}/../interval")
		execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/../interval.zip")
	endif()
	if(NOT EXISTS "${PROJECT_SOURCE_DIR}/../matrix_lib")
		message(STATUS "Downloading matrix_lib...")
		file(DOWNLOAD "https://github.com/ENSTABretagneRobotics/matrix_lib/archive/master.zip" "${PROJECT_SOURCE_DIR}/../matrix_lib.zip")
		execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/../matrix_lib.zip")
		execute_process(COMMAND ${CMAKE_COMMAND} -E rename "${PROJECT_SOURCE_DIR}/matrix_lib-master" "${PROJECT_SOURCE_DIR}/../matrix_lib")
		execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/../matrix_lib.zip")
	endif()
endif()

if(${CMAKE_VERSION} VERSION_LESS "3.1")
	list(APPEND UxVCtrl_SOURCES Observer.cpp NMEAInterface.cpp Main.cpp Globals.cpp Controller.cpp Config.cpp Computations.cpp Commands.cpp Hardware/ublox.cpp Hardware/RS232Port.cpp Hardware/RazorAHRS.cpp Hardware/Pololu.cpp Hardware/NMEADevice.cpp Hardware/I2CBus.cpp Hardware/gpControl.cpp ../interval/imatrix.cpp ../interval/rmatrix.cpp ../interval/box.cpp ../interval/interval.cpp ../interval/iboolean.cpp ../OSUtils/OSTimer.c ../OSUtils/OSTime.c ../OSUtils/OSThread.c ../OSUtils/OSSem.c ../OSUtils/OSNet.c ../OSUtils/OSMisc.c ../OSUtils/OSEv.c ../OSUtils/OSCriticalSection.c ../OSUtils/OSCore.c ../OSUtils/OSComputerRS232Port.c ../OSUtils/OSComputerI2CBus.c)
else()
	add_executable(UxVCtrl Observer.cpp NMEAInterface.cpp Main.cpp Globals.cpp Controller.cpp Config.cpp Computations.cpp Commands.cpp Hardware/ublox.cpp Hardware/RS232Port.cpp Hardware/RazorAHRS.cpp Hardware/Pololu.cpp Hardware/NMEADevice.cpp Hardware/I2CBus.cpp Hardware/gpControl.cpp ../interval/imatrix.cpp ../interval/rmatrix.cpp ../interval/box.cpp ../interval/interval.cpp ../interval/iboolean.cpp ../OSUtils/OSTimer.c ../OSUtils/OSTime.c ../OSUtils/OSThread.c ../OSUtils/OSSem.c ../OSUtils/OSNet.c ../OSUtils/OSMisc.c ../OSUtils/OSEv.c ../OSUtils/OSCriticalSection.c ../OSUtils/OSCore.c ../OSUtils/OSComputerRS232Port.c ../OSUtils/OSComputerI2CBus.c)
endif()

include_directories("${PROJECT_SOURCE_DIR}")
include_directories("${PROJECT_SOURCE_DIR}/../OSUtils")
include_directories("${PROJECT_SOURCE_DIR}/../Extensions/Img")
include_directories("${PROJECT_SOURCE_DIR}/../Extensions/Misc")
include_directories("${PROJECT_SOURCE_DIR}/../Extensions/Net")
include_directories("${PROJECT_SOURCE_DIR}/../interval")
include_directories("${PROJECT_SOURCE_DIR}/../matrix_lib")
include_directories("${PROJECT_SOURCE_DIR}/Hardware")
include_directories("${PROJECT_SOURCE_DIR}/..")

option(_DEBUG "_DEBUG" OFF)
option(_DEBUG_DISPLAY "_DEBUG_DISPLAY" OFF)
option(_DEBUG_MESSAGES "_DEBUG_MESSAGES" OFF)
option(_DEBUG_WARNINGS "_DEBUG_WARNINGS" OFF)
if(NOT MSVC)
	option(ENABLE_VALGRIND_DEBUG "ENABLE_VALGRIND_DEBUG" OFF)
endif()

option(ENABLE_CVKINECT2SDKHOOK "ENABLE_CVKINECT2SDKHOOK" OFF)
if(WIN32)
	option(USE_LIBFREENECT2 "USE_LIBFREENECT2" OFF)
	option(ENABLE_CVCLEYESDKHOOK "ENABLE_CVCLEYESDKHOOK" OFF)
else()
	option(USE_LIBFREENECT2 "USE_LIBFREENECT2" ON)
endif()
option(ENABLE_BLUEVIEW_SUPPORT "ENABLE_BLUEVIEW_SUPPORT" OFF)
option(ENABLE_MAVLINK_SUPPORT "ENABLE_MAVLINK_SUPPORT" OFF)
option(ENABLE_LABJACK_SUPPORT "ENABLE_LABJACK_SUPPORT" OFF)
option(ENABLE_LIBMODBUS_SUPPORT "ENABLE_LIBMODBUS_SUPPORT" OFF)
option(ENABLE_SBG_SDK_SUPPORT "ENABLE_SBG_SDK_SUPPORT" OFF)
option(DISABLE_SBG_TCP "DISABLE_SBG_TCP" OFF)
option(ENABLE_RPLIDAR_SDK_SUPPORT "ENABLE_RPLIDAR_SDK_SUPPORT" OFF)
option(DISABLE_OPENCV_SUPPORT "DISABLE_OPENCV_SUPPORT" ON)

option(ENABLE_BUILD_OPTIMIZATION_SAILBOAT "ENABLE_BUILD_OPTIMIZATION_SAILBOAT" OFF)
option(USE_OPENCV_HIGHGUI_CPP_API "USE_OPENCV_HIGHGUI_CPP_API" OFF)
option(DISABLE_OPENCV_C_API_CTORS "DISABLE_OPENCV_C_API_CTORS" OFF)
if(WIN32)
	option(ENABLE_OPENCV_HIGHGUI_THREADS_WORKAROUND "ENABLE_OPENCV_HIGHGUI_THREADS_WORKAROUND" OFF)
	option(FORCE_SINGLE_THREAD_OPENCVGUI "FORCE_SINGLE_THREAD_OPENCVGUI" OFF)
else()
	option(ENABLE_OPENCV_HIGHGUI_THREADS_WORKAROUND "ENABLE_OPENCV_HIGHGUI_THREADS_WORKAROUND" ON)
	option(FORCE_SINGLE_THREAD_OPENCVGUI "FORCE_SINGLE_THREAD_OPENCVGUI" ON)
endif()
option(ENABLE_OPENCV_HIGHGUI_STARTWINDOWTHREAD "ENABLE_OPENCV_HIGHGUI_STARTWINDOWTHREAD" OFF)
option(ENABLE_SHARED_WAITKEY_OPENCVGUI "ENABLE_SHARED_WAITKEY_OPENCVGUI" OFF)
option(USE_FFMPEG_VIDEO "USE_FFMPEG_VIDEO" OFF)
option(DISABLE_AIS_SUPPORT "DISABLE_AIS_SUPPORT" OFF)
if(APPLE)
	option(USE_OLD_CHRONO "USE_OLD_CHRONO" ON)
	option(USE_OLD_TIMER "USE_OLD_TIMER" ON)
	option(ENABLE_COMPUTERI2CBUS_SUPPORT "ENABLE_COMPUTERI2CBUS_SUPPORT" OFF)
else()
	option(USE_OLD_CHRONO "USE_OLD_CHRONO" OFF)
	option(USE_OLD_TIMER "USE_OLD_TIMER" OFF)
	option(ENABLE_COMPUTERI2CBUS_SUPPORT "ENABLE_COMPUTERI2CBUS_SUPPORT" ON)
endif()
if(MINGW)
	option(ENABLE_MINGW64_STDCALL_FIX "ENABLE_MINGW64_STDCALL_FIX" OFF)
endif()

mark_as_advanced(SUDO_COMMAND INSTALL_PKG_COMMAND OPENCV_PKG_NAME LIBMODBUS_PKG_NAME LIBMODBUS_PKG_PREFIX FFMPEG_PKG_NAME FFMPEG_PKG_PREFIX MAVLINK_PKG_PREFIX SBG_SDK_PKG_PREFIX RPLIDAR_SDK_PKG_PREFIX LIBFREENECT2_PREREQ_PKG_NAME _DEBUG _DEBUG_DISPLAY _DEBUG_MESSAGES _DEBUG_WARNINGS ENABLE_VALGRIND_DEBUG USE_LIBFREENECT2 ENABLE_CVCLEYESDKHOOK ENABLE_BUILD_OPTIMIZATION_SAILBOAT USE_OPENCV_HIGHGUI_CPP_API DISABLE_OPENCV_C_API_CTORS ENABLE_OPENCV_HIGHGUI_THREADS_WORKAROUND ENABLE_OPENCV_HIGHGUI_STARTWINDOWTHREAD ENABLE_SHARED_WAITKEY_OPENCVGUI USE_FFMPEG_VIDEO DISABLE_AIS_SUPPORT ENABLE_COMPUTERI2CBUS_SUPPORT ENABLE_MINGW64_STDCALL_FIX)

if(ENABLE_BUILD_OPTIMIZATION_SAILBOAT)
	add_definitions(-D ENABLE_BUILD_OPTIMIZATION_SAILBOAT)
endif()

if(ENABLE_BLUEVIEW_SUPPORT)
	add_definitions(-D ENABLE_BLUEVIEW_SUPPORT)
	if(${CMAKE_VERSION} VERSION_LESS "3.1")
		list(APPEND UxVCtrl_SOURCES Hardware/BlueView.cpp)
	else()
		target_sources(UxVCtrl PUBLIC Hardware/BlueView.cpp) 
	endif()
	if(WIN32)
		add_definitions(-D BVTSDK_VERSION=4)
		set(BVTSDK_DIR "$ENV{ProgramFiles}/BlueView/bvtsdk")
		if(ENABLE_AUTO_DOWNLOAD)
			if(NOT EXISTS "${BVTSDK_DIR}/include/bvt_sdk.h")
				message(STATUS "Downloading BlueView...")
				file(DOWNLOAD "http://download.microsoft.com/download/C/6/D/C6D0FD4E-9E53-4897-9B91-836EBA2AACD3/vcredist_x86.exe" "${PROJECT_SOURCE_DIR}/vcredist_x86.exe")
				execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND cmd /c vcredist_x86.exe /Q)
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/vcredist_x86.exe")
				if(ARCH STREQUAL "x64")
					file(DOWNLOAD "http://download.microsoft.com/download/A/8/0/A80747C3-41BD-45DF-B505-E9710D2744E0/vcredist_x64.exe" "${PROJECT_SOURCE_DIR}/vcredist_x64.exe")
					execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND cmd /c vcredist_x64.exe /Q)
					execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/vcredist_x64.exe")
				endif()
				file(DOWNLOAD "http://www.ensta-bretagne.fr/lebars/Share/bv.zip" "${PROJECT_SOURCE_DIR}/bv.zip")
				execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/bv.zip")
				execute_process(COMMAND ${CMAKE_COMMAND} -E make_directory "$ENV{ProgramFiles}/BlueView")
				execute_process(COMMAND ${CMAKE_COMMAND} -E copy_directory "${PROJECT_SOURCE_DIR}/bv/bv_4.2.0.9526_win32/bvtsdk" "${BVTSDK_DIR}")
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove_directory "${PROJECT_SOURCE_DIR}/bv")
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/bv.zip")
				file(DOWNLOAD "http://www.ensta-bretagne.fr/lebars/Share/cmake_extra_tools.zip" "${PROJECT_SOURCE_DIR}/cmake_extra_tools.zip")
				execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/cmake_extra_tools.zip")
				execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}/cmake_extra_tools" COMMAND cmd /c pathman /as "$ENV{ProgramFiles}\\BlueView\\bvtsdk\\x86\\vc15\\bin")
				execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}/cmake_extra_tools" COMMAND cmd /c "sleep 5")
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove_directory "${PROJECT_SOURCE_DIR}/cmake_extra_tools")
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/cmake_extra_tools.zip")
			endif()
		endif()
		include_directories("${BVTSDK_DIR}/include")
		if(MSVC)
			set(CMAKE_EXE_LINKER_FLAGS "/LIBPATH:\"${BVTSDK_DIR}/x86/vc15/lib\" ${CMAKE_EXE_LINKER_FLAGS}")
		else()
			set(CMAKE_EXE_LINKER_FLAGS "-L\"${BVTSDK_DIR}/x86/vc15/lib\" ${CMAKE_EXE_LINKER_FLAGS}")
		endif()
		if(${CMAKE_VERSION} VERSION_LESS "3.1")
			list(APPEND UxVCtrl_LIBRARIES bvtsdk4)
		else()
			target_link_libraries(UxVCtrl bvtsdk4)
		endif()
	else()
		if(ENABLE_AUTO_DOWNLOAD)
			if((NOT EXISTS "/usr/local/include/bvt_sdk.h") AND (NOT EXISTS "/usr/include/bvt_sdk.h"))
				message(STATUS "Downloading BlueView...")
				file(DOWNLOAD "http://www.ensta-bretagne.fr/lebars/Share/bv.zip" "${PROJECT_SOURCE_DIR}/bv.zip")
				execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/bv.zip")
				execute_process(COMMAND sh -c "${SUDO_COMMAND} mkdir -p /usr/local/include")
				execute_process(COMMAND sh -c "${SUDO_COMMAND} mkdir -p /usr/local/lib")
				execute_process(COMMAND sh -c "${SUDO_COMMAND} mkdir -p /usr/include")
				execute_process(COMMAND sh -c "${SUDO_COMMAND} mkdir -p /usr/lib")
				if("${CMAKE_SIZEOF_VOID_P}" EQUAL "4")
					execute_process(COMMAND sh -c "${SUDO_COMMAND} cp -R \"${PROJECT_SOURCE_DIR}/bv/bv_3.5.0.5861_Ubuntu32_16.04.2/bvtsdk/include/\"* /usr/local/include/")
					execute_process(COMMAND sh -c "${SUDO_COMMAND} cp -R \"${PROJECT_SOURCE_DIR}/bv/bv_3.5.0.5861_Ubuntu32_16.04.2/bvtsdk/lib/\"* /usr/local/lib/")
				else()
					execute_process(COMMAND sh -c "${SUDO_COMMAND} cp -R \"${PROJECT_SOURCE_DIR}/bv/bv_3.5.0.6257_Ubuntu64_16.04.2/bvtsdk/include/\"* /usr/local/include/")
					execute_process(COMMAND sh -c "${SUDO_COMMAND} cp -R \"${PROJECT_SOURCE_DIR}/bv/bv_3.5.0.6257_Ubuntu64_16.04.2/bvtsdk/lib/\"* /usr/local/lib/")
				endif()
				execute_process(COMMAND sh -c "${SUDO_COMMAND} rm -f /usr/local/lib/libbvtsdk.so /usr/local/lib/libbvtsdk.so.3 /usr/local/lib/libbvtsdk.so.3.5")
				execute_process(COMMAND sh -c "${SUDO_COMMAND} ln -s -f /usr/local/lib/libbvtsdk.so.3.5.0 /usr/local/lib/libbvtsdk.so")
				execute_process(COMMAND sh -c "${SUDO_COMMAND} ln -s -f /usr/local/lib/libbvtsdk.so.3.5.0 /usr/local/lib/libbvtsdk.so.3")
				execute_process(COMMAND sh -c "${SUDO_COMMAND} ln -s -f /usr/local/lib/libbvtsdk.so.3.5.0 /usr/local/lib/libbvtsdk.so.3.5")
				execute_process(COMMAND sh -c "${SUDO_COMMAND} ln -s -f /usr/local/lib/libbv* /usr/lib/")
				execute_process(COMMAND sh -c "${SUDO_COMMAND} chmod -R 777 /usr/local/include/bv*")
				execute_process(COMMAND sh -c "${SUDO_COMMAND} chmod -R 777 /usr/local/lib/libbv*")
				execute_process(COMMAND sh -c "${SUDO_COMMAND} chmod -R 777 /usr/lib/libbv*")
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove_directory "${PROJECT_SOURCE_DIR}/bv")
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/bv.zip")
			endif()
		endif()
		include_directories("/usr/local/include")
		if(${CMAKE_VERSION} VERSION_LESS "3.1")
			list(APPEND UxVCtrl_LIBRARIES bvtsdk)
		else()
			target_link_libraries(UxVCtrl bvtsdk)
		endif()
	endif()
else()
	if(WIN32)
		if(EXISTS "$ENV{ProgramFiles}/BlueView/bvtsdk/include/bvt_sdk.h")
			message(STATUS "BlueView has been detected, see ENABLE_BLUEVIEW_SUPPORT option to try to use it...")
		endif()
	else()
		if((EXISTS "/usr/local/include/bvt_sdk.h") OR (EXISTS "/usr/include/bvt_sdk.h"))
			message(STATUS "BlueView has been detected, see ENABLE_BLUEVIEW_SUPPORT option to try to use it...")
		endif()
	endif()
endif()

if(ENABLE_CVKINECT2SDKHOOK)
	add_definitions(-D ENABLE_CVKINECT2SDKHOOK)
	if(USE_LIBFREENECT2)
		add_definitions(-D USE_LIBFREENECT2)
		if(ENABLE_FIND_PACKAGE)
			find_package(freenect2 QUIET)
			find_package(GLFW3 QUIET)
			find_package(OpenGL QUIET)
			if(freenect2_VERSION VERSION_LESS "0.2")
				if(ENABLE_AUTO_DOWNLOAD)
					if(WIN32)
						message(WARNING "libfreenect2 might need to be installed manually and the freenect2_DIR CMake variable might need to be set to e.g. $HOME/freenect2/lib/cmake/freenect2 (might need also to remove PKG_CONFIG_FOUND part in libfreenect2-master\cmake_modules\FindLibUSB.cmake and FindGLFW3.cmake)...")
					elseif(APPLE)
						message(WARNING "libfreenect2 might need to be installed manually and the freenect2_DIR CMake variable might need to be set to e.g. $HOME/freenect2/lib/cmake/freenect2...")
					else()
						message(STATUS "Trying to download libfreenect2, run \"${SUDO_COMMAND} apt-get update\" before if needed and check if the terminal is asking for a password...")
						execute_process(COMMAND sh -c "${INSTALL_PKG_COMMAND} ${LIBFREENECT2_PREREQ_PKG_NAME}")
						file(DOWNLOAD "https://github.com/OpenKinect/libfreenect2/archive/master.zip" "${PROJECT_SOURCE_DIR}/master.zip")
						execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/master.zip")
						execute_process(COMMAND sh -c "cd \"${PROJECT_SOURCE_DIR}/libfreenect2-master\" && cmake . && make")
						execute_process(COMMAND sh -c "cd \"${PROJECT_SOURCE_DIR}/libfreenect2-master\" && ${SUDO_COMMAND} make install")
						execute_process(COMMAND ${CMAKE_COMMAND} -E remove_directory "${PROJECT_SOURCE_DIR}/libfreenect2-master")
						execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/master.zip")
						find_package(freenect2 QUIET)
						find_package(GLFW3 QUIET)
						find_package(OpenGL QUIET)
					endif()
				endif()
			endif()
			include_directories(${freenect2_INCLUDE_DIR} ${GLFW3_INCLUDE_DIRS} ${flextGL_INCLUDE_DIRS})
			# See https://github.com/glfw/glfw/issues/1030...
			if(GLFW3_VERSION VERSION_GREATER "3.1.2")
				if(NOT GLFW3_LIBRARIES)
					set(GLFW3_LIBRARIES glfw)
				endif()
			endif()
			if(${CMAKE_VERSION} VERSION_LESS "3.1")
				list(APPEND UxVCtrl_LIBRARIES ${freenect2_LIBRARIES} ${GLFW3_LIBRARIES} ${OPENGL_gl_LIBRARY})
			else()
				target_link_libraries(UxVCtrl ${freenect2_LIBRARIES} ${GLFW3_LIBRARIES} ${OPENGL_gl_LIBRARY})
			endif()
		else()
			if((NOT EXISTS "$ENV{LIBFREENECT2_DIR}/include/libfreenect2/libfreenect2.hpp") AND (NOT EXISTS "/usr/local/include/libfreenect2/libfreenect2.hpp") AND (NOT EXISTS "/usr/include/libfreenect2/libfreenect2.hpp"))
				message(WARNING "libfreenect2 might need to be installed manually and the LIBFREENECT2_DIR environment variable might need to be set (might need also to remove PKG_CONFIG_FOUND part in libfreenect2-master\cmake_modules\FindLibUSB.cmake and FindGLFW3.cmake)...")
			endif()
			include_directories("$ENV{LIBFREENECT2_DIR}/include")
			if(MSVC)
				set(CMAKE_EXE_LINKER_FLAGS "/LIBPATH:\"$ENV{LIBFREENECT2_DIR}/lib/\" ${CMAKE_EXE_LINKER_FLAGS}")
			else()
				set(CMAKE_EXE_LINKER_FLAGS "-L\"$ENV{LIBFREENECT2_DIR}/lib/\" ${CMAKE_EXE_LINKER_FLAGS}")
			endif()
			if(${CMAKE_VERSION} VERSION_LESS "3.1")
				list(APPEND UxVCtrl_LIBRARIES freenect2)
			else()
				target_link_libraries(UxVCtrl freenect2)
			endif()
		endif()
	else()
		if(ENABLE_AUTO_DOWNLOAD)
			if(NOT EXISTS "$ENV{KINECTSDK20_DIR}/inc/Kinect.h")
				message(WARNING "Kinect v2 SDK might need to be installed manually and the KINECTSDK20_DIR environment variable might need to be set to e.g. C:\\Program Files\\Microsoft SDKs\\Kinect\\v2.0_1409\\ ...")
				message(STATUS "Downloading Kinect v2 SDK...")
				file(DOWNLOAD "http://download.microsoft.com/download/1/6/B/16B06F60-3B20-4FF2-B699-5E9B7962F9AE/VSU_4/vcredist_x86.exe" "${PROJECT_SOURCE_DIR}/vcredist_x86.exe")
				execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND cmd /c vcredist_x86.exe /Q)
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/vcredist_x86.exe")
				if(ARCH STREQUAL "x64")
					file(DOWNLOAD "http://download.microsoft.com/download/1/6/B/16B06F60-3B20-4FF2-B699-5E9B7962F9AE/VSU_4/vcredist_x64.exe" "${PROJECT_SOURCE_DIR}/vcredist_x64.exe")
					execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND cmd /c vcredist_x64.exe /Q)
					execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/vcredist_x64.exe")
				endif()
				file(DOWNLOAD "http://www.ensta-bretagne.fr/lebars/Share/KinectSDK-v2.0.zip" "${PROJECT_SOURCE_DIR}/KinectSDK-v2.0.zip")
				execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/KinectSDK-v2.0.zip")
				execute_process(COMMAND ${CMAKE_COMMAND} -E make_directory "$ENV{ProgramFiles}/Microsoft SDKs/Kinect")
				execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/KinectSDK-v2.0/v2.0_1409.zip")
				execute_process(COMMAND ${CMAKE_COMMAND} -E copy_directory "${PROJECT_SOURCE_DIR}/v2.0_1409" "$ENV{ProgramFiles}/Microsoft SDKs/Kinect/v2.0_1409")
				execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND cmd /c setx KINECTSDK20_DIR "$ENV{ProgramFiles}\\Microsoft SDKs\\Kinect\\v2.0_1409\\" /m ) # The SDK installer adds a '\' in the end...
				if(ARCH STREQUAL "x64")
					execute_process(COMMAND ${CMAKE_COMMAND} -E copy "${PROJECT_SOURCE_DIR}/KinectSDK-v2.0/x64/Kinect20.dll" "$ENV{SystemRoot}/System32/Kinect20.dll")
					execute_process(COMMAND ${CMAKE_COMMAND} -E copy "${PROJECT_SOURCE_DIR}/KinectSDK-v2.0/x86/Kinect20.dll" "$ENV{SystemRoot}/SysWOW64/Kinect20.dll")
				else()
					execute_process(COMMAND ${CMAKE_COMMAND} -E copy "${PROJECT_SOURCE_DIR}/KinectSDK-v2.0/x86/Kinect20.dll" "$ENV{SystemRoot}/System32/Kinect20.dll")
				endif()
				file(DOWNLOAD "https://download.microsoft.com/download/E/6/8/E688A436-5937-41CB-AF76-498E99E19191/KinectRuntime-v2.2_1905.zip" "${PROJECT_SOURCE_DIR}/KinectRuntime-v2.2_1905.zip")
				execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/KinectRuntime-v2.2_1905.zip")
				execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}/drivers/x64" COMMAND cmd /c pnputil -i -a kinectsensor.inf)
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove_directory "${PROJECT_SOURCE_DIR}/drivers" "${PROJECT_SOURCE_DIR}/v2.0_1409" "${PROJECT_SOURCE_DIR}/KinectSDK-v2.0")
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/KinectRuntime-v2.2_1905.zip" "${PROJECT_SOURCE_DIR}/KinectSDK-v2.0.zip")
				include_directories("$ENV{ProgramFiles}/Microsoft SDKs/Kinect/v2.0_1409/inc")
				if(MSVC)
					set(CMAKE_EXE_LINKER_FLAGS "/LIBPATH:\"$ENV{ProgramFiles}/Microsoft SDKs/Kinect/v2.0_1409/Lib/${ARCH}\" ${CMAKE_EXE_LINKER_FLAGS}")
				else()
					set(CMAKE_EXE_LINKER_FLAGS "-L\"$ENV{ProgramFiles}/Microsoft SDKs/Kinect/v2.0_1409/Lib/${ARCH}\" ${CMAKE_EXE_LINKER_FLAGS}")
				endif()
			endif()
		else()
			if(NOT EXISTS "$ENV{KINECTSDK20_DIR}/inc/Kinect.h")
				message(WARNING "Kinect v2 SDK might need to be installed manually and the KINECTSDK20_DIR environment variable might need to be set to e.g. C:\\Program Files\\Microsoft SDKs\\Kinect\\v2.0_1409\\ ...")
			endif()
		endif()
		include_directories("$ENV{KINECTSDK20_DIR}/inc")
		if(MSVC)
			set(CMAKE_EXE_LINKER_FLAGS "/LIBPATH:\"$ENV{KINECTSDK20_DIR}/Lib/${ARCH}\" ${CMAKE_EXE_LINKER_FLAGS}")
		else()
			set(CMAKE_EXE_LINKER_FLAGS "-L\"$ENV{KINECTSDK20_DIR}/Lib/${ARCH}\" ${CMAKE_EXE_LINKER_FLAGS}")
		endif()
		if(${CMAKE_VERSION} VERSION_LESS "3.1")
			list(APPEND UxVCtrl_LIBRARIES Kinect20)
		else()
			target_link_libraries(UxVCtrl Kinect20)
		endif()
	endif()
endif()

if(ENABLE_CVCLEYESDKHOOK)
	add_definitions(-D ENABLE_CVCLEYESDKHOOK)
	include_directories("$ENV{CLEYESDK_DIR}/Include")
	if(MSVC)
		set(CMAKE_EXE_LINKER_FLAGS "/LIBPATH:\"$ENV{CLEYESDK_DIR}/Lib\" ${CMAKE_EXE_LINKER_FLAGS}")
	else()
		set(CMAKE_EXE_LINKER_FLAGS "-L\"$ENV{CLEYESDK_DIR}/Lib\" ${CMAKE_EXE_LINKER_FLAGS}")
	endif()
	if(${CMAKE_VERSION} VERSION_LESS "3.1")
		list(APPEND UxVCtrl_LIBRARIES CLEyeMulticam)
	else()
		target_link_libraries(UxVCtrl CLEyeMulticam)
	endif()
endif()

if(ENABLE_MAVLINK_SUPPORT)
	add_definitions(-D ENABLE_MAVLINK_SUPPORT)
	if(${CMAKE_VERSION} VERSION_LESS "3.1")
		list(APPEND UxVCtrl_SOURCES MAVLinkInterface.cpp Hardware/MAVLinkDevice.cpp)
	else()
		target_sources(UxVCtrl PUBLIC MAVLinkInterface.cpp Hardware/MAVLinkDevice.cpp)
	endif()
	if(WIN32)
		set(MAVLINK_SDK_DIR "${MAVLINK_PKG_PREFIX}/MAVLinkSDK")
		if(ENABLE_AUTO_DOWNLOAD)
			if(NOT EXISTS "${MAVLINK_PKG_PREFIX}/MAVLinkSDK/mavlink/common/mavlink.h")
				message(STATUS "Downloading mavlink...")
				file(DOWNLOAD "http://www.ensta-bretagne.fr/lebars/Share/MAVLinkSDK.zip" "${PROJECT_SOURCE_DIR}/MAVLinkSDK.zip")
				execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/MAVLinkSDK.zip")
				execute_process(COMMAND ${CMAKE_COMMAND} -E copy_directory "${PROJECT_SOURCE_DIR}/MAVLinkSDK" "${MAVLINK_SDK_DIR}")
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove_directory "${PROJECT_SOURCE_DIR}/MAVLinkSDK")
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/MAVLinkSDK.zip")
			endif()
		endif()
		include_directories("${MAVLINK_SDK_DIR}")
	else()
		if(ENABLE_AUTO_DOWNLOAD)
			if((NOT EXISTS "${MAVLINK_PKG_PREFIX}/include/mavlink/common/mavlink.h") AND (NOT EXISTS "/usr/include/mavlink/common/mavlink.h"))
				message(STATUS "Downloading mavlink...")
				#file(DOWNLOAD "https://github.com/mavlink/c_library_v2/archive/master.zip" "${PROJECT_SOURCE_DIR}/master.zip")
				#execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/master.zip")
				#execute_process(COMMAND sh -c "${SUDO_COMMAND} mkdir -p ${MAVLINK_PKG_PREFIX}/include")
				#execute_process(COMMAND sh -c "${SUDO_COMMAND} mv -f \"${PROJECT_SOURCE_DIR}/c_library_v2-master\" ${MAVLINK_PKG_PREFIX}/include/mavlink")
				#execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/master.zip")
				file(DOWNLOAD "http://www.ensta-bretagne.fr/lebars/Share/MAVLinkSDK.zip" "${PROJECT_SOURCE_DIR}/MAVLinkSDK.zip")
				execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/MAVLinkSDK.zip")
				execute_process(COMMAND sh -c "${SUDO_COMMAND} mkdir -p ${MAVLINK_PKG_PREFIX}/include")
				execute_process(COMMAND sh -c "${SUDO_COMMAND} mv -f \"${PROJECT_SOURCE_DIR}/MAVLinkSDK/mavlink\" ${MAVLINK_PKG_PREFIX}/include/mavlink")
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove_directory "${PROJECT_SOURCE_DIR}/MAVLinkSDK")
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/MAVLinkSDK.zip")
			endif()
		endif()
		include_directories("${MAVLINK_PKG_PREFIX}/include")
	endif()
else()
	if(WIN32)
		if(EXISTS "${MAVLINK_PKG_PREFIX}/MAVLinkSDK/mavlink/common/mavlink.h")
			message(STATUS "mavlink has been detected, see ENABLE_MAVLINK_SUPPORT option to try to use it...")
		endif()
	else()
		if((EXISTS "${MAVLINK_PKG_PREFIX}/include/mavlink/common/mavlink.h") OR (EXISTS "/usr/include/mavlink/common/mavlink.h"))
			message(STATUS "mavlink has been detected, see ENABLE_MAVLINK_SUPPORT option to try to use it...")
		endif()
	endif()
endif()

if(ENABLE_LABJACK_SUPPORT)
	add_definitions(-D ENABLE_LABJACK_SUPPORT)
	include_directories("${PROJECT_SOURCE_DIR}/../Extensions/Devices/LabjackUtils/UE9Utils")
	if(${CMAKE_VERSION} VERSION_LESS "3.1")
		list(APPEND UxVCtrl_SOURCES Hardware/UE9A.cpp ../Extensions/Devices/LabjackUtils/UE9Utils/UE9Cfg.c ../Extensions/Devices/LabjackUtils/UE9Utils/UE9Core.c)
	else()
		target_sources(UxVCtrl PUBLIC Hardware/UE9A.cpp ../Extensions/Devices/LabjackUtils/UE9Utils/UE9Cfg.c ../Extensions/Devices/LabjackUtils/UE9Utils/UE9Core.c)
	endif()
	if(WIN32)
		set_source_files_properties(../Extensions/Devices/LabjackUtils/UE9Utils/UE9Cfg.c ../Extensions/Devices/LabjackUtils/UE9Utils/UE9Core.c PROPERTIES LANGUAGE CXX)
		if(ENABLE_AUTO_DOWNLOAD)
			if((NOT EXISTS "$ENV{ProgramFiles}/LabJack/Drivers/LabJackUD.h") AND (NOT EXISTS "$ENV{${ProgramFilesx86}}/LabJack/Drivers/LabJackUD.h"))
				message(STATUS "Downloading LabJack...")
				if(ARCH STREQUAL "x64")
					file(DOWNLOAD "http://www.ensta-bretagne.fr/lebars/Share/LabJack-2019-05-20.zip" "${PROJECT_SOURCE_DIR}/LabJack.zip")
				else()
					file(DOWNLOAD "http://www.ensta-bretagne.fr/lebars/Share/LabJack-2013.3.5.zip" "${PROJECT_SOURCE_DIR}/LabJack.zip")
				endif()
#message(STATUS "LabJack downloaded!")
				execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/LabJack.zip")
				file(DOWNLOAD "http://www.ensta-bretagne.fr/lebars/Share/cmake_extra_tools.zip" "${PROJECT_SOURCE_DIR}/cmake_extra_tools.zip")
				execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/cmake_extra_tools.zip")
#message(STATUS "LabJack extracted!")
				execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}/LabJack" COMMAND cmd /c "regedit /s Certificates.reg")
#message(STATUS "Certificates OK!")
				if(ARCH STREQUAL "x64")
					execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}/LabJack" COMMAND cmd /c "start LabJack-2019-05-20.exe /S")
				else()
					execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}/LabJack" COMMAND cmd /c "start LabJack-2013.3.5.exe /S")
				endif()
#message(STATUS "LabJack installing!")
				execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}/cmake_extra_tools" COMMAND cmd /c "sleep 60")
				execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}/LabJack" COMMAND cmd /c "TASKKILL /F /IM LVRunTimeEng.exe /T")
				execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}/cmake_extra_tools" COMMAND cmd /c "sleep 5")
				if(ARCH STREQUAL "x64")
					execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/LabJack-2019-05-20.exe")
				else()
					execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/LabJack-2013.3.5.exe")
				endif()
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove_directory "${PROJECT_SOURCE_DIR}/cmake_extra_tools")
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/cmake_extra_tools.zip")
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove_directory "${PROJECT_SOURCE_DIR}/LabJack")
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/LabJack.zip")
#message(STATUS "LabJack installed!")
			endif()
		endif()
		if(NOT EXISTS "$ENV{ProgramFiles}/LabJack/Drivers/LabJackUD.h")
			include_directories("$ENV{${ProgramFilesx86}}/LabJack/Drivers")
			if(MSVC)
				if(ARCH STREQUAL "x64")
					set(CMAKE_EXE_LINKER_FLAGS "/LIBPATH:\"$ENV{${ProgramFilesx86}}/LabJack/Drivers/64bit\" ${CMAKE_EXE_LINKER_FLAGS}")
				else()
					set(CMAKE_EXE_LINKER_FLAGS "/LIBPATH:\"$ENV{${ProgramFilesx86}}/LabJack/Drivers\" ${CMAKE_EXE_LINKER_FLAGS}")
				endif()
			else()
				if(ARCH STREQUAL "x64")
					set(CMAKE_EXE_LINKER_FLAGS "-L\"$ENV{${ProgramFilesx86}}/LabJack/Drivers/64bit\" ${CMAKE_EXE_LINKER_FLAGS}")
				else()
					set(CMAKE_EXE_LINKER_FLAGS "-L\"$ENV{${ProgramFilesx86}}/LabJack/Drivers\" ${CMAKE_EXE_LINKER_FLAGS}")
				endif()
			endif()
		else()
			include_directories("$ENV{ProgramFiles}/LabJack/Drivers")
			if(MSVC)
				if(ARCH STREQUAL "x64")
					set(CMAKE_EXE_LINKER_FLAGS "/LIBPATH:\"$ENV{ProgramFiles}/LabJack/Drivers/64bit\" ${CMAKE_EXE_LINKER_FLAGS}")
				else()
					set(CMAKE_EXE_LINKER_FLAGS "/LIBPATH:\"$ENV{ProgramFiles}/LabJack/Drivers\" ${CMAKE_EXE_LINKER_FLAGS}")
				endif()
			else()
				if(ARCH STREQUAL "x64")
					set(CMAKE_EXE_LINKER_FLAGS "-L\"$ENV{ProgramFiles}/LabJack/Drivers/64bit\" ${CMAKE_EXE_LINKER_FLAGS}")
				else()
					set(CMAKE_EXE_LINKER_FLAGS "-L\"$ENV{ProgramFiles}/LabJack/Drivers\" ${CMAKE_EXE_LINKER_FLAGS}")
				endif()
			endif()
		endif()
		if(${CMAKE_VERSION} VERSION_LESS "3.1")
			list(APPEND UxVCtrl_LIBRARIES labjackud)
		else()
			target_link_libraries(UxVCtrl labjackud)
		endif()
	else()
		include_directories("${PROJECT_SOURCE_DIR}/../Extensions/Devices/LabjackUtils/liblabjackusb")
		if(${CMAKE_VERSION} VERSION_LESS "3.1")
			list(APPEND UxVCtrl_SOURCES ../Extensions/Devices/LabjackUtils/UE9Utils/ue9.c ../Extensions/Devices/LabjackUtils/liblabjackusb/labjackusb.c)
		else()
			target_sources(UxVCtrl PUBLIC ../Extensions/Devices/LabjackUtils/UE9Utils/ue9.c ../Extensions/Devices/LabjackUtils/liblabjackusb/labjackusb.c)
		endif()
	endif()
endif()

if(ENABLE_LIBMODBUS_SUPPORT)
	add_definitions(-D ENABLE_LIBMODBUS_SUPPORT)
	if(${CMAKE_VERSION} VERSION_LESS "3.1")
		list(APPEND UxVCtrl_SOURCES Hardware/CISCREA.cpp)
	else()
		target_sources(UxVCtrl PUBLIC Hardware/CISCREA.cpp)
	endif()
	if(WIN32)
		if(ENABLE_AUTO_DOWNLOAD)
			if(NOT EXISTS "${LIBMODBUS_PKG_PREFIX}/libmodbus-3.0.6-msvc/include/modbus/modbus.h")
				message(STATUS "Downloading libmodbus...")
				file(DOWNLOAD "http://www.ensta-bretagne.fr/lebars/Share/libmodbus-3.0.6-msvc.zip" "${PROJECT_SOURCE_DIR}/libmodbus-3.0.6-msvc.zip")
				execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/libmodbus-3.0.6-msvc.zip")
				execute_process(COMMAND ${CMAKE_COMMAND} -E copy_directory "${PROJECT_SOURCE_DIR}/libmodbus-3.0.6-msvc" "${LIBMODBUS_PKG_PREFIX}/libmodbus-3.0.6-msvc")
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove_directory "${PROJECT_SOURCE_DIR}/libmodbus-3.0.6-msvc")
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/libmodbus-3.0.6-msvc.zip")
			endif()
		endif()
		include_directories("${LIBMODBUS_PKG_PREFIX}/libmodbus-3.0.6-msvc/include")
		if(MSVC)
			if(ENABLE_STATIC)
				set(CMAKE_EXE_LINKER_FLAGS "/LIBPATH:\"${LIBMODBUS_PKG_PREFIX}/libmodbus-3.0.6-msvc/${ARCH}/${RUNTIME}/staticlib\" ${CMAKE_EXE_LINKER_FLAGS}")
			else()
				set(CMAKE_EXE_LINKER_FLAGS "/LIBPATH:\"${LIBMODBUS_PKG_PREFIX}/libmodbus-3.0.6-msvc/${ARCH}/${RUNTIME}/lib\" ${CMAKE_EXE_LINKER_FLAGS}")
			endif()
			if(${CMAKE_VERSION} VERSION_LESS "3.1")
				list(APPEND UxVCtrl_LIBRARIES debug libmodbus-3.0.6-msvcd)
				list(APPEND UxVCtrl_LIBRARIES optimized libmodbus-3.0.6-msvc)
			else()
				target_link_libraries(UxVCtrl debug libmodbus-3.0.6-msvcd)
				target_link_libraries(UxVCtrl optimized libmodbus-3.0.6-msvc)
			endif()
		else()
			if(ENABLE_STATIC)
				#set(CMAKE_EXE_LINKER_FLAGS "-L\"${LIBMODBUS_PKG_PREFIX}/libmodbus-3.0.6-msvc/${ARCH}/${RUNTIME}/staticlib\" ${CMAKE_EXE_LINKER_FLAGS}")
				set(CMAKE_EXE_LINKER_FLAGS "-L\"${LIBMODBUS_PKG_PREFIX}/libmodbus-3.0.6-msvc/${ARCH}/${RUNTIME}/lib\" ${CMAKE_EXE_LINKER_FLAGS}")
			else()
				set(CMAKE_EXE_LINKER_FLAGS "-L\"${LIBMODBUS_PKG_PREFIX}/libmodbus-3.0.6-msvc/${ARCH}/${RUNTIME}/lib\" ${CMAKE_EXE_LINKER_FLAGS}")
			endif()
			if(${CMAKE_VERSION} VERSION_LESS "3.1")
				list(APPEND UxVCtrl_LIBRARIES modbus)
			else()
				target_link_libraries(UxVCtrl modbus)
			endif()
		endif()
	else()
		if(ENABLE_AUTO_DOWNLOAD)
			if((NOT EXISTS "/usr/include/modbus/modbus.h") AND (NOT EXISTS "${LIBMODBUS_PKG_PREFIX}/include/modbus/modbus.h"))
				if(APPLE)
					message(STATUS "Trying to download libmodbus...")
					execute_process(COMMAND sh -c "${INSTALL_PKG_COMMAND} ${LIBMODBUS_PKG_NAME}")
				else()
					message(STATUS "Trying to download libmodbus, run \"${SUDO_COMMAND} apt-get update\" before if needed and check if the terminal is asking for a password...")
					execute_process(COMMAND sh -c "${INSTALL_PKG_COMMAND} ${LIBMODBUS_PKG_NAME}")
				endif()
			endif()
		endif()
		set(CMAKE_EXE_LINKER_FLAGS "-L\"${LIBMODBUS_PKG_PREFIX}/lib\" ${CMAKE_EXE_LINKER_FLAGS}")
		if(${CMAKE_VERSION} VERSION_LESS "3.1")
			list(APPEND UxVCtrl_LIBRARIES modbus)
		else()
			target_link_libraries(UxVCtrl modbus)
		endif()
	endif()
else()
	if(WIN32)
		if(EXISTS "${LIBMODBUS_PKG_PREFIX}/libmodbus-3.0.6-msvc/include/modbus/modbus.h")
			message(STATUS "modbus has been detected, see ENABLE_LIBMODBUS_SUPPORT option to try to use it...")
		endif()
	else()
		if((EXISTS "/usr/include/modbus/modbus.h") OR (EXISTS "${LIBMODBUS_PKG_PREFIX}/include/modbus/modbus.h"))
			message(STATUS "modbus has been detected, see ENABLE_LIBMODBUS_SUPPORT option to try to use it...")
		endif()
	endif()
endif()

if(ENABLE_SBG_SDK_SUPPORT)
	add_definitions(-D ENABLE_SBG_SDK_SUPPORT)
	if(WIN32)
		set(SBG_SDK_DIR "${SBG_SDK_PKG_PREFIX}/SBG Systems/Inertial SDK/Software Development/sbgECom")
		if(ENABLE_AUTO_DOWNLOAD)
			if((NOT EXISTS "${SBG_SDK_DIR}/common/sbgCommon.h") OR (NOT EXISTS "${SBG_SDK_DIR}/${ARCH}/vc15/lib/sbgECom.lib"))
				message(STATUS "Downloading SBG SDK...")
				file(DOWNLOAD "http://www.ensta-bretagne.fr/lebars/Share/SBG%20Systems.zip" "${PROJECT_SOURCE_DIR}/SBG Systems.zip")
				execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/SBG Systems.zip")
				execute_process(COMMAND ${CMAKE_COMMAND} -E copy_directory "${PROJECT_SOURCE_DIR}/SBG Systems" "${SBG_SDK_PKG_PREFIX}/SBG Systems")
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove_directory "${PROJECT_SOURCE_DIR}/SBG Systems")
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/SBG Systems.zip")
			endif()
		endif()
		include_directories("${SBG_SDK_DIR}/common")
		include_directories("${SBG_SDK_DIR}/src")
		if(MSVC)
			if(ENABLE_STATIC)
				set(CMAKE_EXE_LINKER_FLAGS "/LIBPATH:\"${SBG_SDK_DIR}/${ARCH}/${RUNTIME}/staticlib\" ${CMAKE_EXE_LINKER_FLAGS}")
			else()
				set(CMAKE_EXE_LINKER_FLAGS "/LIBPATH:\"${SBG_SDK_DIR}/${ARCH}/${RUNTIME}/lib\" ${CMAKE_EXE_LINKER_FLAGS}")
			endif()
			if(${CMAKE_VERSION} VERSION_LESS "3.1")
				list(APPEND UxVCtrl_LIBRARIES debug sbgEComd)
				list(APPEND UxVCtrl_LIBRARIES optimized sbgECom)
			else()
				target_link_libraries(UxVCtrl debug sbgEComd)
				target_link_libraries(UxVCtrl optimized sbgECom)
			endif()
		else()
			if(ENABLE_STATIC)
				set(CMAKE_EXE_LINKER_FLAGS "-L\"${SBG_SDK_DIR}/${ARCH}/vc15/staticlib\" ${CMAKE_EXE_LINKER_FLAGS}")
			else()
				set(CMAKE_EXE_LINKER_FLAGS "-L\"${SBG_SDK_DIR}/${ARCH}/vc15/lib\" ${CMAKE_EXE_LINKER_FLAGS}")
			endif()
			if(${CMAKE_VERSION} VERSION_LESS "3.1")
				list(APPEND UxVCtrl_LIBRARIES sbgECom)
			else()
				target_link_libraries(UxVCtrl sbgECom)
			endif()
		endif()
	else()
		if(ENABLE_AUTO_DOWNLOAD)
			if(((NOT EXISTS "${SBG_SDK_PKG_PREFIX}/include/sbgECom/common/sbgCommon.h") OR (NOT EXISTS "${SBG_SDK_PKG_PREFIX}/lib/libsbgECom.a")) AND 
			((NOT EXISTS "/usr/include/sbgECom/common/sbgCommon.h") OR (NOT EXISTS "/usr/lib/libsbgECom.a")))
				message(STATUS "Downloading SBG SDK...")
				file(DOWNLOAD "http://www.ensta-bretagne.fr/lebars/Share/SBG%20Systems.zip" "${PROJECT_SOURCE_DIR}/SBG Systems.zip")
				execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/SBG Systems.zip")
				execute_process(COMMAND sh -c "cd \"${PROJECT_SOURCE_DIR}/SBG Systems/Inertial SDK/Software Development/sbgECom/projects/unix\" && cmake . && make")
				execute_process(COMMAND sh -c "${SUDO_COMMAND} mkdir -p ${SBG_SDK_PKG_PREFIX}/include/sbgECom")
				execute_process(COMMAND sh -c "${SUDO_COMMAND} mkdir -p ${SBG_SDK_PKG_PREFIX}/lib")
				execute_process(COMMAND sh -c "${SUDO_COMMAND} mv -f \"${PROJECT_SOURCE_DIR}/SBG Systems/Inertial SDK/Software Development/sbgECom/src/\" ${SBG_SDK_PKG_PREFIX}/include/sbgECom/src")
				execute_process(COMMAND sh -c "${SUDO_COMMAND} mv -f \"${PROJECT_SOURCE_DIR}/SBG Systems/Inertial SDK/Software Development/sbgECom/common/\" ${SBG_SDK_PKG_PREFIX}/include/sbgECom/common")
				execute_process(COMMAND sh -c "${SUDO_COMMAND} mv -f \"${PROJECT_SOURCE_DIR}/SBG Systems/Inertial SDK/Software Development/sbgECom/bin/libsbgECom.a\" ${SBG_SDK_PKG_PREFIX}/lib/libsbgECom.a")
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove_directory "${PROJECT_SOURCE_DIR}/SBG Systems")
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/SBG Systems.zip")
			endif()
		endif()
		include_directories("${SBG_SDK_PKG_PREFIX}/include/sbgECom/common")
		include_directories("${SBG_SDK_PKG_PREFIX}/include/sbgECom/src")
		set(CMAKE_EXE_LINKER_FLAGS "-L\"${SBG_SDK_PKG_PREFIX}/lib\" ${CMAKE_EXE_LINKER_FLAGS}")
		if(${CMAKE_VERSION} VERSION_LESS "3.1")
			list(APPEND UxVCtrl_LIBRARIES sbgECom)
		else()
			target_link_libraries(UxVCtrl sbgECom)
		endif()
	endif()
else()
	if(WIN32)
		if(EXISTS "${SBG_SDK_PKG_PREFIX}/SBG Systems/Inertial SDK/Software Development/sbgECom/common/sbgCommon.h")
			message(STATUS "SBG SDK has been detected, see ENABLE_SBG_SDK_SUPPORT option to try to use it...")
		endif()
	else()
		if((EXISTS "${SBG_SDK_PKG_PREFIX}/include/sbgECom/common/sbgCommon.h") OR (EXISTS "/usr/include/sbgECom/common/sbgCommon.h"))
			message(STATUS "SBG SDK has been detected, see ENABLE_SBG_SDK_SUPPORT option to try to use it...")
		endif()
	endif()
endif()

if(ENABLE_RPLIDAR_SDK_SUPPORT)
	add_definitions(-D ENABLE_RPLIDAR_SDK_SUPPORT)
	if(WIN32)
		set(RPLIDAR_SDK_DIR "${RPLIDAR_SDK_PKG_PREFIX}/rplidar_sdk/sdk")
		if(ENABLE_AUTO_DOWNLOAD)
			if((NOT EXISTS "${RPLIDAR_SDK_DIR}/sdk/include/rplidar.h") OR (NOT EXISTS "${RPLIDAR_SDK_DIR}/output/win32/Release/rplidar_driver.lib"))
				message(STATUS "Downloading RPLIDAR SDK...")
				file(DOWNLOAD "http://www.ensta-bretagne.fr/lebars/Share/rplidar_sdk.zip" "${PROJECT_SOURCE_DIR}/rplidar_sdk.zip")
				execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/rplidar_sdk.zip")
				execute_process(COMMAND ${CMAKE_COMMAND} -E copy_directory "${PROJECT_SOURCE_DIR}/rplidar_sdk" "${RPLIDAR_SDK_PKG_PREFIX}/rplidar_sdk")
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove_directory "${PROJECT_SOURCE_DIR}/rplidar_sdk")
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/rplidar_sdk.zip")
			endif()
		endif()
		include_directories("${RPLIDAR_SDK_DIR}/sdk/include")
		include_directories("${RPLIDAR_SDK_DIR}/sdk/src")
		if(MSVC)
			if(ENABLE_STATIC)
				#set(CMAKE_EXE_LINKER_FLAGS "/LIBPATH:\"${RPLIDAR_SDK_DIR}/output/${ARCH}/${RUNTIME}/staticlib\" ${CMAKE_EXE_LINKER_FLAGS}")
				if(ARCH STREQUAL "x64")
					set(CMAKE_EXE_LINKER_FLAGS "/LIBPATH:\"${RPLIDAR_SDK_DIR}/output/win64/Release\" ${CMAKE_EXE_LINKER_FLAGS}")
				else()
					set(CMAKE_EXE_LINKER_FLAGS "/LIBPATH:\"${RPLIDAR_SDK_DIR}/output/win32/Release\" ${CMAKE_EXE_LINKER_FLAGS}")
				endif()
			else()
				#set(CMAKE_EXE_LINKER_FLAGS "/LIBPATH:\"${RPLIDAR_SDK_DIR}/output/${ARCH}/${RUNTIME}/lib\" ${CMAKE_EXE_LINKER_FLAGS}")
				if(ARCH STREQUAL "x64")
					set(CMAKE_EXE_LINKER_FLAGS "/LIBPATH:\"${RPLIDAR_SDK_DIR}/output/win64/Debug\" ${CMAKE_EXE_LINKER_FLAGS}")
				else()
					set(CMAKE_EXE_LINKER_FLAGS "/LIBPATH:\"${RPLIDAR_SDK_DIR}/output/win32/Debug\" ${CMAKE_EXE_LINKER_FLAGS}")
				endif()
			endif()
			if(${CMAKE_VERSION} VERSION_LESS "3.1")
				#list(APPEND UxVCtrl_LIBRARIES debug rplidar_driverd)
				#list(APPEND UxVCtrl_LIBRARIES optimized rplidar_driver)
				list(APPEND UxVCtrl_LIBRARIES rplidar_driver)
			else()
				#target_link_libraries(UxVCtrl debug rplidar_driverd)
				#target_link_libraries(UxVCtrl optimized rplidar_driver)
				target_link_libraries(UxVCtrl rplidar_driver)
			endif()
		else()
			if(ENABLE_STATIC)
				#set(CMAKE_EXE_LINKER_FLAGS "-L\"${RPLIDAR_SDK_DIR}/output/${ARCH}/vc15/staticlib\" ${CMAKE_EXE_LINKER_FLAGS}")
			else()
				#set(CMAKE_EXE_LINKER_FLAGS "-L\"${RPLIDAR_SDK_DIR}/output/${ARCH}/vc15/lib\" ${CMAKE_EXE_LINKER_FLAGS}")
			endif()
			set(CMAKE_EXE_LINKER_FLAGS "-L\"${RPLIDAR_SDK_DIR}/output/${ARCH}/Release\" ${CMAKE_EXE_LINKER_FLAGS}")
			if(${CMAKE_VERSION} VERSION_LESS "3.1")
				list(APPEND UxVCtrl_LIBRARIES rplidar_driver)
			else()
				target_link_libraries(UxVCtrl rplidar_driver)
			endif()
		endif()
	else()
		if(ENABLE_AUTO_DOWNLOAD)
			if(((NOT EXISTS "${RPLIDAR_SDK_PKG_PREFIX}/include/rplidar_sdk/sdk/sdk/include/rplidar.h") OR (NOT EXISTS "${RPLIDAR_SDK_PKG_PREFIX}/lib/librplidar_sdk.a")) AND 
			((NOT EXISTS "/usr/include/rplidar_sdk/sdk/sdk/include/rplidar.h") OR (NOT EXISTS "/usr/lib/librplidar_sdk.a")))
				message(STATUS "Downloading RPLIDAR SDK...")
				file(DOWNLOAD "http://www.ensta-bretagne.fr/lebars/Share/rplidar_sdk.zip" "${PROJECT_SOURCE_DIR}/rplidar_sdk.zip")
				execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/rplidar_sdk.zip")
				if(APPLE)
					execute_process(COMMAND sh -c "cd \"${PROJECT_SOURCE_DIR}/rplidar_sdk/sdk\" && SDKROOT=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk make")
				else()
					execute_process(COMMAND sh -c "cd \"${PROJECT_SOURCE_DIR}/rplidar_sdk/sdk\" && make")
				endif()
				execute_process(COMMAND sh -c "${SUDO_COMMAND} mkdir -p ${RPLIDAR_SDK_PKG_PREFIX}/include/rplidar_sdk/sdk/sdk")
				execute_process(COMMAND sh -c "${SUDO_COMMAND} mkdir -p ${RPLIDAR_SDK_PKG_PREFIX}/lib")
				execute_process(COMMAND sh -c "${SUDO_COMMAND} mkdir -p ${RPLIDAR_SDK_PKG_PREFIX}/bin")
				execute_process(COMMAND sh -c "${SUDO_COMMAND} mv -f \"${PROJECT_SOURCE_DIR}/rplidar_sdk/sdk/sdk/include/\" ${RPLIDAR_SDK_PKG_PREFIX}/include/rplidar_sdk/sdk/sdk/include")
				execute_process(COMMAND sh -c "${SUDO_COMMAND} mv -f \"${PROJECT_SOURCE_DIR}/rplidar_sdk/sdk/sdk/src/\" ${RPLIDAR_SDK_PKG_PREFIX}/include/rplidar_sdk/sdk/sdk/src")
				if(APPLE)
					execute_process(COMMAND sh -c "${SUDO_COMMAND} mv -f \"${PROJECT_SOURCE_DIR}/rplidar_sdk/sdk/output/Darwin/Release/librplidar_sdk.a\" ${RPLIDAR_SDK_PKG_PREFIX}/lib/librplidar_sdk.a")
					execute_process(COMMAND sh -c "${SUDO_COMMAND} mv -f \"${PROJECT_SOURCE_DIR}/rplidar_sdk/sdk/output/Darwin/Release/ultra_simple\" ${RPLIDAR_SDK_PKG_PREFIX}/bin/ultra_simple")
					execute_process(COMMAND sh -c "${SUDO_COMMAND} mv -f \"${PROJECT_SOURCE_DIR}/rplidar_sdk/sdk/output/Darwin/Release/simple_grabber\" ${RPLIDAR_SDK_PKG_PREFIX}/bin/simple_grabber")
				else()
					execute_process(COMMAND sh -c "${SUDO_COMMAND} mv -f \"${PROJECT_SOURCE_DIR}/rplidar_sdk/sdk/output/Linux/Release/librplidar_sdk.a\" ${RPLIDAR_SDK_PKG_PREFIX}/lib/librplidar_sdk.a")
					execute_process(COMMAND sh -c "${SUDO_COMMAND} mv -f \"${PROJECT_SOURCE_DIR}/rplidar_sdk/sdk/output/Linux/Release/ultra_simple\" ${RPLIDAR_SDK_PKG_PREFIX}/bin/ultra_simple")
					execute_process(COMMAND sh -c "${SUDO_COMMAND} mv -f \"${PROJECT_SOURCE_DIR}/rplidar_sdk/sdk/output/Linux/Release/simple_grabber\" ${RPLIDAR_SDK_PKG_PREFIX}/bin/simple_grabber")
				endif()
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove_directory "${PROJECT_SOURCE_DIR}/rplidar_sdk")
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/rplidar_sdk.zip")
			endif()
		endif()
		include_directories("${RPLIDAR_SDK_PKG_PREFIX}/include/rplidar_sdk/sdk/sdk/include")
		include_directories("${RPLIDAR_SDK_PKG_PREFIX}/include/rplidar_sdk/sdk/sdk/src")
		set(CMAKE_EXE_LINKER_FLAGS "-L\"${RPLIDAR_SDK_PKG_PREFIX}/lib\" ${CMAKE_EXE_LINKER_FLAGS}")
		if(${CMAKE_VERSION} VERSION_LESS "3.1")
			list(APPEND UxVCtrl_LIBRARIES rplidar_sdk)
		else()
			target_link_libraries(UxVCtrl rplidar_sdk)
		endif()
	endif()
else()
	if(WIN32)
		if(EXISTS "${RPLIDAR_SDK_PKG_PREFIX}/rplidar_sdk/sdk/sdk/include/rplidar.h")
			message(STATUS "RPLIDAR SDK has been detected, see ENABLE_RPLIDAR_SDK_SUPPORT option to try to use it...")
		endif()
	else()
		if((EXISTS "${RPLIDAR_SDK_PKG_PREFIX}/include/rplidar_sdk/sdk/sdk/include/rplidar.h") OR (EXISTS "/usr/include/rplidar_sdk/sdk/sdk/include/rplidar.h"))
			message(STATUS "RPLIDAR SDK has been detected, see ENABLE_RPLIDAR_SDK_SUPPORT option to try to use it...")
		endif()
	endif()
endif()

if(DISABLE_OPENCV_SUPPORT)
	add_definitions(-D DISABLE_OPENCV_SUPPORT)
	if(WIN32)
		if(EXISTS "$ENV{SystemDrive}/OpenCV2.4.13/${ARCH}/${RUNTIME}/lib/${LIBPREFIXRUNTIME}opencv_core2413${LIBEXTRUNTIME}")
			message(STATUS "OpenCV 2.4.13 has been detected, see DISABLE_OPENCV_SUPPORT and OPENCV2413 options to try to use it...")
		endif()
		if(EXISTS "$ENV{SystemDrive}/OpenCV3.2.0/${ARCH}/${RUNTIME}/lib/${LIBPREFIXRUNTIME}opencv_world320${LIBEXTRUNTIME}")
			message(STATUS "OpenCV 3.2.0 has been detected, see DISABLE_OPENCV_SUPPORT and OPENCV320 options to try to use it...")
		endif()
		if(EXISTS "$ENV{SystemDrive}/OpenCV3.4.2/${ARCH}/${RUNTIME}/lib/${LIBPREFIXRUNTIME}opencv_world342${LIBEXTRUNTIME}")
			message(STATUS "OpenCV 3.4.2 has been detected, see DISABLE_OPENCV_SUPPORT and OPENCV342 options to try to use it...")
		endif()
		if(EXISTS "$ENV{SystemDrive}/OpenCV4.2.0/${ARCH}/${RUNTIME}/lib/${LIBPREFIXRUNTIME}opencv_world420${LIBEXTRUNTIME}")
			message(STATUS "OpenCV 4.2.0 has been detected, see DISABLE_OPENCV_SUPPORT and OPENCV420 options to try to use it...")
		endif()
	else()
		if((EXISTS "/usr/include/opencv2/core/version.hpp") OR (EXISTS "/usr/include/opencv4/opencv2/core/version.hpp") OR (EXISTS "/usr/local/include/opencv4/opencv2/core/version.hpp") OR (EXISTS "/usr/local/include/opencv4/opencv2/core/version.hpp"))
			if((APPLE AND (EXISTS "${USR_LIB_ARCH_DIR}/libopencv_core.2.4.dylib")) OR ((NOT APPLE) AND (EXISTS "${USR_LIB_ARCH_DIR}/libopencv_core.so.2.4") OR (EXISTS "/usr/local/lib/libopencv_core.so.2.4")))
				message(STATUS "OpenCV 2.4 has been detected, see DISABLE_OPENCV_SUPPORT and OPENCV2413 options to try to use it...")
			endif()
			if((APPLE AND (EXISTS "${USR_LIB_ARCH_DIR}/libopencv_core.3.2.dylib")) OR ((NOT APPLE) AND (EXISTS "${USR_LIB_ARCH_DIR}/libopencv_core.so.3.2") OR (EXISTS "/usr/local/lib/libopencv_core.so.3.2")))
				message(STATUS "OpenCV 3.2 has been detected, see DISABLE_OPENCV_SUPPORT and OPENCV320 options to try to use it...")
			endif()
			if((APPLE AND (EXISTS "${USR_LIB_ARCH_DIR}/libopencv_core.3.4.dylib")) OR ((NOT APPLE) AND (EXISTS "${USR_LIB_ARCH_DIR}/libopencv_core.so.3.4") OR (EXISTS "/usr/local/lib/libopencv_core.so.3.4")))
				message(STATUS "OpenCV 3.4 has been detected, see DISABLE_OPENCV_SUPPORT and OPENCV342 options to try to use it...")
			endif()
			if((APPLE AND (EXISTS "${USR_LIB_ARCH_DIR}/libopencv_core.4.2.dylib")) OR ((NOT APPLE) AND (EXISTS "${USR_LIB_ARCH_DIR}/libopencv_core.so.4.2") OR (EXISTS "/usr/local/lib/libopencv_core.so.4.2")))
				message(STATUS "OpenCV 4.2 has been detected, see DISABLE_OPENCV_SUPPORT and OPENCV420 options to try to use it...")
			endif()
		endif()
	endif()
else()
	if(ENABLE_BUILD_OPTIMIZATION_SAILBOAT)
		if(${CMAKE_VERSION} VERSION_LESS "3.1")
			list(APPEND UxVCtrl_SOURCES Ball.cpp OpenCVGUI.cpp VideoRecord.cpp Hardware/Video.cpp)
		else()
			target_sources(UxVCtrl PUBLIC Ball.cpp OpenCVGUI.cpp VideoRecord.cpp Hardware/Video.cpp)
		endif()
	else()
		if(${CMAKE_VERSION} VERSION_LESS "3.1")
			list(APPEND UxVCtrl_SOURCES Ball.cpp ExternalVisualLocalization.cpp Obstacle.cpp OpenCVGUI.cpp Pinger.cpp SurfaceVisualObstacle.cpp VideoInterface.cpp VideoRecord.cpp Wall.cpp Hardware/Video.cpp)
		else()
			target_sources(UxVCtrl PUBLIC Ball.cpp ExternalVisualLocalization.cpp Obstacle.cpp OpenCVGUI.cpp Pinger.cpp SurfaceVisualObstacle.cpp VideoInterface.cpp VideoRecord.cpp Wall.cpp Hardware/Video.cpp)
		endif()
	endif()
	if(ENABLE_FIND_PACKAGE)
		find_package(OpenCV QUIET)
		if(OpenCV_VERSION VERSION_LESS "2.0")
			if(ENABLE_AUTO_DOWNLOAD)
				if(WIN32)
					message(STATUS "Trying to download OpenCV...")
					execute_process(COMMAND "${INSTALL_PKG_COMMAND} ${OPENCV_PKG_NAME}")
					find_package(OpenCV QUIET)
				elseif(APPLE)
					message(STATUS "Trying to download OpenCV...")
					execute_process(COMMAND sh -c "${INSTALL_PKG_COMMAND} ${OPENCV_PKG_NAME}")
					find_package(OpenCV QUIET)
				else()
					message(STATUS "Trying to download OpenCV, run \"${SUDO_COMMAND} apt-get update\" before if needed and check if the terminal is asking for a password...")
					execute_process(COMMAND sh -c "${INSTALL_PKG_COMMAND} ${OPENCV_PKG_NAME}")
					find_package(OpenCV QUIET)
				endif()
			endif()
		endif()
		if(OpenCV_VERSION VERSION_LESS "2.0")
			message(WARNING "Check if ENABLE_FIND_PACKAGE option should be disabled to try to detect OpenCV...")
		else()
			if(OpenCV_VERSION VERSION_LESS "3.0")
				if(OPENCV320)
					message(WARNING "Check if OPENCV2413 option should be enabled instead of OPENCV320...")
				elseif(OPENCV342)
					message(WARNING "Check if OPENCV2413 option should be enabled instead of OPENCV342...")
				elseif(OPENCV420)
					message(WARNING "Check if OPENCV2413 option should be enabled instead of OPENCV420...")
				endif()
			elseif(OpenCV_VERSION VERSION_LESS "3.3")
				if(OPENCV2413)
					message(WARNING "Check if OPENCV320 option should be enabled instead of OPENCV2413...")
				elseif(OPENCV342)
					message(WARNING "Check if OPENCV320 option should be enabled instead of OPENCV342...")
				elseif(OPENCV420)
					message(WARNING "Check if OPENCV320 option should be enabled instead of OPENCV420...")
				endif()
			elseif(OpenCV_VERSION VERSION_LESS "3.5")
				if(OPENCV2413)
					message(WARNING "Check if OPENCV342 option should be enabled instead of OPENCV2413...")
				elseif(OPENCV320)
					message(WARNING "Check if OPENCV342 option should be enabled instead of OPENCV320...")
				elseif(OPENCV420)
					message(WARNING "Check if OPENCV342 option should be enabled instead of OPENCV420...")
				endif()
			else()
				if(OPENCV2413)
					message(WARNING "Check if OPENCV420 option should be enabled instead of OPENCV2413...")
				elseif(OPENCV320)
					message(WARNING "Check if OPENCV420 option should be enabled instead of OPENCV320...")
				elseif(OPENCV342)
					message(WARNING "Check if OPENCV420 option should be enabled instead of OPENCV342...")
				endif()
				# C++11 necessary starting with OpenCV 4.0.0...
				set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11") # CMAKE_CXX_STANDARD does not seem to work on macOS...
			endif()
			include_directories(${OpenCV_INCLUDE_DIRS})
			if(${CMAKE_VERSION} VERSION_LESS "3.1")
				list(APPEND UxVCtrl_LIBRARIES ${OpenCV_LIBS})
			else()
				target_link_libraries(UxVCtrl ${OpenCV_LIBS})
			endif()
		endif()
	else()
		if(WIN32)
			# Done later in the script depending on OpenCV version...
		else()
			if(ENABLE_AUTO_DOWNLOAD)
				if((NOT EXISTS "/usr/include/opencv2/core/version.hpp") AND (NOT EXISTS "/usr/include/opencv4/opencv2/core/version.hpp") AND (NOT EXISTS "/usr/local/include/opencv4/opencv2/core/version.hpp") AND (NOT EXISTS "/usr/local/include/opencv4/opencv2/core/version.hpp"))
					if(APPLE)
						message(STATUS "Trying to download OpenCV...")
						execute_process(COMMAND sh -c "${INSTALL_PKG_COMMAND} ${OPENCV_PKG_NAME}")
					else()
						message(STATUS "Trying to download OpenCV, run \"${SUDO_COMMAND} apt-get update\" before if needed and check if the terminal is asking for a password...")
						execute_process(COMMAND sh -c "${INSTALL_PKG_COMMAND} ${OPENCV_PKG_NAME}")
					endif()
				endif()
			endif()
			if(OPENCV2413)
				if((APPLE AND (NOT EXISTS "${USR_LIB_ARCH_DIR}/libopencv_core.2.4.dylib")) OR ((NOT APPLE) AND ((NOT EXISTS "${USR_LIB_ARCH_DIR}/libopencv_core.so.2.4") AND (NOT EXISTS "/usr/local/lib/libopencv_core.so.2.4"))))
					message(WARNING "In case of problems, check if OPENCV320, OPENCV342 or OPENCV420 option should be enabled instead of OPENCV2413...")
				endif()
			elseif(OPENCV320)
				if((APPLE AND (NOT EXISTS "${USR_LIB_ARCH_DIR}/libopencv_core.3.2.dylib")) OR ((NOT APPLE) AND ((NOT EXISTS "${USR_LIB_ARCH_DIR}/libopencv_core.so.3.2") AND (NOT EXISTS "/usr/local/lib/libopencv_core.so.3.2"))))
					message(WARNING "In case of problems, check if OPENCV2413, OPENCV342 or OPENCV420 option should be enabled instead of OPENCV320...")
				endif()
			elseif(OPENCV342)
				if((APPLE AND (NOT EXISTS "${USR_LIB_ARCH_DIR}/libopencv_core.3.4.dylib")) OR ((NOT APPLE) AND ((NOT EXISTS "${USR_LIB_ARCH_DIR}/libopencv_core.so.3.4") AND (NOT EXISTS "/usr/local/lib/libopencv_core.so.3.4"))))
					message(WARNING "In case of problems, check if OPENCV2413, OPENCV320 or OPENCV420 option should be enabled instead of OPENCV342...")
				endif()
			elseif(OPENCV420)
				if((APPLE AND (NOT EXISTS "${USR_LIB_ARCH_DIR}/libopencv_core.4.2.dylib")) OR ((NOT APPLE) AND ((NOT EXISTS "${USR_LIB_ARCH_DIR}/libopencv_core.so.4.2") AND (NOT EXISTS "/usr/local/lib/libopencv_core.so.4.2"))))
					message(WARNING "In case of problems, check if OPENCV2413, OPENCV320 or OPENCV342 option should be enabled instead of OPENCV420...")
				endif()
			endif()
		endif()
		if(OPENCV2413)
			if(WIN32)
				if(ENABLE_AUTO_DOWNLOAD)
					if(NOT EXISTS "$ENV{SystemDrive}/OpenCV2.4.13/${ARCH}/${RUNTIME}/lib/${LIBPREFIXRUNTIME}opencv_core2413${LIBEXTRUNTIME}")
						message(STATUS "Downloading OpenCV 2.4.13...")
						file(DOWNLOAD "http://www.ensta-bretagne.fr/lebars/Share/OpenCV2.4.13.zip" "${PROJECT_SOURCE_DIR}/OpenCV2.4.13.zip")
						execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/OpenCV2.4.13.zip")
						execute_process(COMMAND ${CMAKE_COMMAND} -E copy_directory "${PROJECT_SOURCE_DIR}/OpenCV2.4.13" "$ENV{SystemDrive}/OpenCV2.4.13")
						execute_process(COMMAND ${CMAKE_COMMAND} -E remove_directory "${PROJECT_SOURCE_DIR}/OpenCV2.4.13")
						execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/OpenCV2.4.13.zip")
						file(DOWNLOAD "http://www.ensta-bretagne.fr/lebars/Share/cmake_extra_tools.zip" "${PROJECT_SOURCE_DIR}/cmake_extra_tools.zip")
						execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/cmake_extra_tools.zip")
						execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}/cmake_extra_tools" COMMAND cmd /c pathman /as "$ENV{SystemDrive}\\OpenCV2.4.13\\${ARCH}\\${RUNTIME}\\bin")
						execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}/cmake_extra_tools" COMMAND cmd /c "sleep 5")
						execute_process(COMMAND ${CMAKE_COMMAND} -E remove_directory "${PROJECT_SOURCE_DIR}/cmake_extra_tools")
						execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/cmake_extra_tools.zip")
					endif()
				endif()
				include_directories("$ENV{SystemDrive}/OpenCV2.4.13/include")
				if(MSVC)
					if(ENABLE_STATIC)
						set(CMAKE_EXE_LINKER_FLAGS "/LIBPATH:\"$ENV{SystemDrive}/OpenCV2.4.13/${ARCH}/${RUNTIME}/staticlib\" ${CMAKE_EXE_LINKER_FLAGS}")
						if(${CMAKE_VERSION} VERSION_LESS "3.1")
							list(APPEND UxVCtrl_LIBRARIES debug opencv_core2413d debug opencv_imgproc2413d debug opencv_highgui2413d debug IlmImfd debug zlibd debug libjasperd debug libjpegd debug libpngd debug libtiffd debug vfw32 debug comctl32)
							list(APPEND UxVCtrl_LIBRARIES optimized opencv_core2413 optimized opencv_imgproc2413 optimized opencv_highgui2413 optimized IlmImf optimized zlib optimized libjasper optimized libjpeg optimized libpng optimized libtiff optimized vfw32 optimized comctl32)
						else()
							target_link_libraries(UxVCtrl debug opencv_core2413d debug opencv_imgproc2413d debug opencv_highgui2413d debug IlmImfd debug zlibd debug libjasperd debug libjpegd debug libpngd debug libtiffd debug vfw32 debug comctl32)
							target_link_libraries(UxVCtrl optimized opencv_core2413 optimized opencv_imgproc2413 optimized opencv_highgui2413 optimized IlmImf optimized zlib optimized libjasper optimized libjpeg optimized libpng optimized libtiff optimized vfw32 optimized comctl32)
						endif()
					else()
						set(CMAKE_EXE_LINKER_FLAGS "/LIBPATH:\"$ENV{SystemDrive}/OpenCV2.4.13/${ARCH}/${RUNTIME}/lib\" ${CMAKE_EXE_LINKER_FLAGS}")
						if(${CMAKE_VERSION} VERSION_LESS "3.1")
							list(APPEND UxVCtrl_LIBRARIES debug opencv_core2413d debug opencv_imgproc2413d debug opencv_highgui2413d)
							list(APPEND UxVCtrl_LIBRARIES optimized opencv_core2413 optimized opencv_imgproc2413 optimized opencv_highgui2413)
						else()
							target_link_libraries(UxVCtrl debug opencv_core2413d debug opencv_imgproc2413d debug opencv_highgui2413d)
							target_link_libraries(UxVCtrl optimized opencv_core2413 optimized opencv_imgproc2413 optimized opencv_highgui2413)
						endif()
					endif()
				else()
					if(ENABLE_STATIC)
						set(CMAKE_EXE_LINKER_FLAGS "-L\"$ENV{SystemDrive}/OpenCV2.4.13/${ARCH}/${RUNTIME}/staticlib\" ${CMAKE_EXE_LINKER_FLAGS}")
						if(${CMAKE_VERSION} VERSION_LESS "3.1")
							list(APPEND UxVCtrl_LIBRARIES opencv_core2413 opencv_imgproc2413 opencv_highgui2413 IlmImf libjasper libjpeg libpng libtiff zlib vfw32 gdi32 uuid oleaut32 ole32 comctl32 comdlg32)
						else()
							target_link_libraries(UxVCtrl opencv_core2413 opencv_imgproc2413 opencv_highgui2413 IlmImf libjasper libjpeg libpng libtiff zlib vfw32 gdi32 uuid oleaut32 ole32 comctl32 comdlg32)
						endif()
					else()
						set(CMAKE_EXE_LINKER_FLAGS "-L\"$ENV{SystemDrive}/OpenCV2.4.13/${ARCH}/${RUNTIME}/lib\" ${CMAKE_EXE_LINKER_FLAGS}")
						if(${CMAKE_VERSION} VERSION_LESS "3.1")
							list(APPEND UxVCtrl_LIBRARIES opencv_core2413 opencv_imgproc2413 opencv_highgui2413)
						else()
							target_link_libraries(UxVCtrl opencv_core2413 opencv_imgproc2413 opencv_highgui2413)
						endif()
					endif()
				endif()
			else()
				if(APPLE)
					include_directories("/usr/local/opt/opencv@2/include")
					set(CMAKE_EXE_LINKER_FLAGS "-L\"/usr/local/opt/opencv@2/lib\" ${CMAKE_EXE_LINKER_FLAGS}")
				endif()
				if(ENABLE_STATIC)
					if(${CMAKE_VERSION} VERSION_LESS "3.1")
						list(APPEND UxVCtrl_LIBRARIES opencv_core opencv_imgproc opencv_highgui IlmImf libjasper libjpeg libpng libtiff zlib)
					else()
						target_link_libraries(UxVCtrl opencv_core opencv_imgproc opencv_highgui IlmImf libjasper libjpeg libpng libtiff zlib)
					endif()
				else()
					if(${CMAKE_VERSION} VERSION_LESS "3.1")
						list(APPEND UxVCtrl_LIBRARIES opencv_core opencv_imgproc opencv_highgui)
					else()
						target_link_libraries(UxVCtrl opencv_core opencv_imgproc opencv_highgui)
					endif()
				endif()
			endif()
		elseif(OPENCV320)
			if(WIN32)
				if(ENABLE_AUTO_DOWNLOAD)
					if(NOT EXISTS "$ENV{SystemDrive}/OpenCV3.2.0/${ARCH}/${RUNTIME}/lib/${LIBPREFIXRUNTIME}opencv_world320${LIBEXTRUNTIME}")
						message(STATUS "Downloading OpenCV 3.2.0...")
						file(DOWNLOAD "http://www.ensta-bretagne.fr/lebars/Share/OpenCV3.2.0.zip" "${PROJECT_SOURCE_DIR}/OpenCV3.2.0.zip")
						execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/OpenCV3.2.0.zip")
						execute_process(COMMAND ${CMAKE_COMMAND} -E copy_directory "${PROJECT_SOURCE_DIR}/OpenCV3.2.0" "$ENV{SystemDrive}/OpenCV3.2.0")
						execute_process(COMMAND ${CMAKE_COMMAND} -E remove_directory "${PROJECT_SOURCE_DIR}/OpenCV3.2.0")
						execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/OpenCV3.2.0.zip")
						file(DOWNLOAD "http://www.ensta-bretagne.fr/lebars/Share/cmake_extra_tools.zip" "${PROJECT_SOURCE_DIR}/cmake_extra_tools.zip")
						execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/cmake_extra_tools.zip")
						execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}/cmake_extra_tools" COMMAND cmd /c pathman /as "$ENV{SystemDrive}\\OpenCV3.2.0\\${ARCH}\\${RUNTIME}\\bin")
						execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}/cmake_extra_tools" COMMAND cmd /c "sleep 5")
						execute_process(COMMAND ${CMAKE_COMMAND} -E remove_directory "${PROJECT_SOURCE_DIR}/cmake_extra_tools")
						execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/cmake_extra_tools.zip")
					endif()
				endif()
				include_directories("$ENV{SystemDrive}/OpenCV3.2.0/include")
				if(MSVC)
					if(ENABLE_STATIC)
						set(CMAKE_EXE_LINKER_FLAGS "/LIBPATH:\"$ENV{SystemDrive}/OpenCV3.2.0/${ARCH}/${RUNTIME}/staticlib\" ${CMAKE_EXE_LINKER_FLAGS}")
						if(${CMAKE_VERSION} VERSION_LESS "3.1")
							list(APPEND UxVCtrl_LIBRARIES debug opencv_world320d debug libwebpd debug IlmImfd debug zlibd debug libjasperd debug libjpegd debug libpngd debug libtiffd debug vfw32 debug comctl32)
							list(APPEND UxVCtrl_LIBRARIES optimized opencv_world320 optimized libwebp optimized IlmImf optimized zlib optimized libjasper optimized libjpeg optimized libpng optimized libtiff optimized vfw32 optimized comctl32)
							list(APPEND UxVCtrl_LIBRARIES ippicvmt)
						else()
							target_link_libraries(UxVCtrl debug opencv_world320d debug libwebpd debug IlmImfd debug zlibd debug libjasperd debug libjpegd debug libpngd debug libtiffd debug vfw32 debug comctl32)
							target_link_libraries(UxVCtrl optimized opencv_world320 optimized libwebp optimized IlmImf optimized zlib optimized libjasper optimized libjpeg optimized libpng optimized libtiff optimized vfw32 optimized comctl32)
							target_link_libraries(UxVCtrl ippicvmt)
						endif()
					else()
						set(CMAKE_EXE_LINKER_FLAGS "/LIBPATH:\"$ENV{SystemDrive}/OpenCV3.2.0/${ARCH}/${RUNTIME}/lib\" ${CMAKE_EXE_LINKER_FLAGS}")
						if(${CMAKE_VERSION} VERSION_LESS "3.1")
							list(APPEND UxVCtrl_LIBRARIES debug opencv_world320d)
							list(APPEND UxVCtrl_LIBRARIES optimized opencv_world320)
						else()
							target_link_libraries(UxVCtrl debug opencv_world320d)
							target_link_libraries(UxVCtrl optimized opencv_world320)
						endif()
					endif()
				else()
					if(ENABLE_STATIC)
						set(CMAKE_EXE_LINKER_FLAGS "-L\"$ENV{SystemDrive}/OpenCV3.2.0/${ARCH}/${RUNTIME}/staticlib\" ${CMAKE_EXE_LINKER_FLAGS}")
						if(${CMAKE_VERSION} VERSION_LESS "3.1")
							list(APPEND UxVCtrl_LIBRARIES opencv_world320 libwebp IlmImf libjasper libjpeg libpng libtiff zlib vfw32 gdi32 uuid oleaut32 ole32 comctl32 comdlg32)
						else()
							target_link_libraries(UxVCtrl opencv_world320 libwebp IlmImf libjasper libjpeg libpng libtiff zlib vfw32 gdi32 uuid oleaut32 ole32 comctl32 comdlg32)
						endif()
					else()
						set(CMAKE_EXE_LINKER_FLAGS "-L\"$ENV{SystemDrive}/OpenCV3.2.0/${ARCH}/${RUNTIME}/lib\" ${CMAKE_EXE_LINKER_FLAGS}")
						if(${CMAKE_VERSION} VERSION_LESS "3.1")
							list(APPEND UxVCtrl_LIBRARIES opencv_world320)
						else()
							target_link_libraries(UxVCtrl opencv_world320)
						endif()
					endif()
				endif()
			else()
				if(APPLE)
					include_directories("/usr/local/opt/opencv@3/include")
					set(CMAKE_EXE_LINKER_FLAGS "-L\"/usr/local/opt/opencv@3/lib\" ${CMAKE_EXE_LINKER_FLAGS}")
				endif()
				if(ENABLE_STATIC)
					if(${CMAKE_VERSION} VERSION_LESS "3.1")
						list(APPEND UxVCtrl_LIBRARIES opencv_core opencv_imgproc opencv_highgui opencv_imgcodecs opencv_videoio libwebp IlmImf libjasper libjpeg libpng libtiff zlib)
					else()
						target_link_libraries(UxVCtrl opencv_core opencv_imgproc opencv_highgui opencv_imgcodecs opencv_videoio libwebp IlmImf libjasper libjpeg libpng libtiff zlib)
					endif()
				else()
					if(${CMAKE_VERSION} VERSION_LESS "3.1")
						list(APPEND UxVCtrl_LIBRARIES opencv_core opencv_imgproc opencv_highgui opencv_imgcodecs opencv_videoio)
					else()
						target_link_libraries(UxVCtrl opencv_core opencv_imgproc opencv_highgui opencv_imgcodecs opencv_videoio)
					endif()
				endif()
			endif()
		elseif(OPENCV342)
			if(WIN32)
				if(ENABLE_AUTO_DOWNLOAD)
					if(NOT EXISTS "$ENV{SystemDrive}/OpenCV3.4.2/${ARCH}/${RUNTIME}/lib/${LIBPREFIXRUNTIME}opencv_world342${LIBEXTRUNTIME}")
						message(STATUS "Downloading OpenCV 3.4.2...")
						file(DOWNLOAD "http://www.ensta-bretagne.fr/lebars/Share/OpenCV3.4.2.zip" "${PROJECT_SOURCE_DIR}/OpenCV3.4.2.zip")
						execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/OpenCV3.4.2.zip")
						execute_process(COMMAND ${CMAKE_COMMAND} -E copy_directory "${PROJECT_SOURCE_DIR}/OpenCV3.4.2" "$ENV{SystemDrive}/OpenCV3.4.2")
						execute_process(COMMAND ${CMAKE_COMMAND} -E remove_directory "${PROJECT_SOURCE_DIR}/OpenCV3.4.2")
						execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/OpenCV3.4.2.zip")
						file(DOWNLOAD "http://www.ensta-bretagne.fr/lebars/Share/cmake_extra_tools.zip" "${PROJECT_SOURCE_DIR}/cmake_extra_tools.zip")
						execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/cmake_extra_tools.zip")
						execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}/cmake_extra_tools" COMMAND cmd /c pathman /as "$ENV{SystemDrive}\\OpenCV3.4.2\\${ARCH}\\${RUNTIME}\\bin")
						execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}/cmake_extra_tools" COMMAND cmd /c "sleep 5")
						execute_process(COMMAND ${CMAKE_COMMAND} -E remove_directory "${PROJECT_SOURCE_DIR}/cmake_extra_tools")
						execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/cmake_extra_tools.zip")
					endif()
				endif()
				include_directories("$ENV{SystemDrive}/OpenCV3.4.2/include")
				if(MSVC)
					if(ENABLE_STATIC)
						set(CMAKE_EXE_LINKER_FLAGS "/LIBPATH:\"$ENV{SystemDrive}/OpenCV3.4.2/${ARCH}/${RUNTIME}/staticlib\" ${CMAKE_EXE_LINKER_FLAGS}")
						if(${CMAKE_VERSION} VERSION_LESS "3.1")
							list(APPEND UxVCtrl_LIBRARIES debug opencv_highgui342d debug opencv_videoio342d debug opencv_imgcodecs342d debug opencv_imgproc342d debug opencv_core342d debug libwebp debug ippiwd debug ittnotifyd debug libprotobufd debug IlmImfd debug zlibd debug libjasperd debug libjpeg-turbod debug libpngd debug libtiffd debug vfw32 debug comctl32)
							list(APPEND UxVCtrl_LIBRARIES optimized opencv_highgui342 optimized opencv_videoio342 optimized opencv_imgcodecs342 optimized opencv_imgproc342 optimized opencv_core342 optimized libwebp optimized ippiw optimized ittnotify optimized libprotobuf optimized IlmImf optimized zlib optimized libjasper optimized libjpeg-turbo optimized libpng optimized libtiff optimized vfw32 optimized comctl32)
							list(APPEND UxVCtrl_LIBRARIES ippicvmt)
						else()
							target_link_libraries(UxVCtrl debug opencv_highgui342d debug opencv_videoio342d debug opencv_imgcodecs342d debug opencv_imgproc342d debug opencv_core342d debug libwebp debug ippiwd debug ittnotifyd debug libprotobufd debug IlmImfd debug zlibd debug libjasperd debug libjpeg-turbod debug libpngd debug libtiffd debug vfw32 debug comctl32)
							target_link_libraries(UxVCtrl optimized opencv_highgui342 optimized opencv_videoio342 optimized opencv_imgcodecs342 optimized opencv_imgproc342 optimized opencv_core342 optimized libwebp optimized ippiw optimized ittnotify optimized libprotobuf optimized IlmImf optimized zlib optimized libjasper optimized libjpeg-turbo optimized libpng optimized libtiff optimized vfw32 optimized comctl32)
							target_link_libraries(UxVCtrl ippicvmt)
						endif()
					else()
						set(CMAKE_EXE_LINKER_FLAGS "/LIBPATH:\"$ENV{SystemDrive}/OpenCV3.4.2/${ARCH}/${RUNTIME}/lib\" ${CMAKE_EXE_LINKER_FLAGS}")
						if(${CMAKE_VERSION} VERSION_LESS "3.1")
							list(APPEND UxVCtrl_LIBRARIES debug opencv_world342d)
							list(APPEND UxVCtrl_LIBRARIES optimized opencv_world342)
						else()
							target_link_libraries(UxVCtrl debug opencv_world342d)
							target_link_libraries(UxVCtrl optimized opencv_world342)
						endif()
					endif()
				else()
					if(ENABLE_STATIC)
						set(CMAKE_EXE_LINKER_FLAGS "-L\"$ENV{SystemDrive}/OpenCV3.4.2/${ARCH}/${RUNTIME}/staticlib\" ${CMAKE_EXE_LINKER_FLAGS}")
						if(${CMAKE_VERSION} VERSION_LESS "3.1")
							list(APPEND UxVCtrl_LIBRARIES opencv_highgui342 opencv_videoio342 opencv_imgcodecs342 opencv_imgproc342 opencv_core342 IlmImf libjasper libjpeg-turbo libpng libprotobuf libtiff libwebp zlib vfw32 gdi32 uuid oleaut32 ole32 comctl32 comdlg32)
						else()
							target_link_libraries(UxVCtrl opencv_highgui342 opencv_videoio342 opencv_imgcodecs342 opencv_imgproc342 opencv_core342 IlmImf libjasper libjpeg-turbo libpng libprotobuf libtiff libwebp zlib vfw32 gdi32 uuid oleaut32 ole32 comctl32 comdlg32)
						endif()
					else()
						set(CMAKE_EXE_LINKER_FLAGS "-L\"$ENV{SystemDrive}/OpenCV3.4.2/${ARCH}/${RUNTIME}/lib\" ${CMAKE_EXE_LINKER_FLAGS}")
						if(${CMAKE_VERSION} VERSION_LESS "3.1")
							list(APPEND UxVCtrl_LIBRARIES opencv_world342)
						else()
							target_link_libraries(UxVCtrl opencv_world342)
						endif()
					endif()
				endif()
			else()
				if(APPLE)
					include_directories("/usr/local/opt/opencv@3/include")
					set(CMAKE_EXE_LINKER_FLAGS "-L\"/usr/local/opt/opencv@3/lib\" ${CMAKE_EXE_LINKER_FLAGS}")
				endif()
				if(ENABLE_STATIC)
					if(${CMAKE_VERSION} VERSION_LESS "3.1")
						list(APPEND UxVCtrl_LIBRARIES opencv_highgui opencv_videoio opencv_imgcodecs opencv_imgproc opencv_core IlmImf libjasper libjpeg-turbo libpng libprotobuf libtiff libwebp zlib)
					else()
						target_link_libraries(UxVCtrl opencv_highgui opencv_videoio opencv_imgcodecs opencv_imgproc opencv_core IlmImf libjasper libjpeg-turbo libpng libprotobuf libtiff libwebp zlib)
					endif()
				else()
					if(${CMAKE_VERSION} VERSION_LESS "3.1")
						list(APPEND UxVCtrl_LIBRARIES opencv_highgui opencv_videoio opencv_imgcodecs opencv_imgproc opencv_core)
					else()
						target_link_libraries(UxVCtrl opencv_highgui opencv_videoio opencv_imgcodecs opencv_imgproc opencv_core)
					endif()
				endif()
			endif()
		elseif(OPENCV420)
			add_definitions(-D USE_OPENCV_HIGHGUI_CPP_API)
			if(WIN32)
				if(ENABLE_AUTO_DOWNLOAD)
					if(NOT EXISTS "$ENV{SystemDrive}/OpenCV4.2.0/${ARCH}/${RUNTIME}/lib/${LIBPREFIXRUNTIME}opencv_world420${LIBEXTRUNTIME}")
						message(STATUS "Downloading OpenCV 4.2.0...")
						file(DOWNLOAD "http://www.ensta-bretagne.fr/lebars/Share/OpenCV4.2.0.zip" "${PROJECT_SOURCE_DIR}/OpenCV4.2.0.zip")
						execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/OpenCV4.2.0.zip")
						execute_process(COMMAND ${CMAKE_COMMAND} -E copy_directory "${PROJECT_SOURCE_DIR}/OpenCV4.2.0" "$ENV{SystemDrive}/OpenCV4.2.0")
						execute_process(COMMAND ${CMAKE_COMMAND} -E remove_directory "${PROJECT_SOURCE_DIR}/OpenCV4.2.0")
						execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/OpenCV4.2.0.zip")
						file(DOWNLOAD "http://www.ensta-bretagne.fr/lebars/Share/cmake_extra_tools.zip" "${PROJECT_SOURCE_DIR}/cmake_extra_tools.zip")
						execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/cmake_extra_tools.zip")
						execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}/cmake_extra_tools" COMMAND cmd /c pathman /as "$ENV{SystemDrive}\\OpenCV4.2.0\\${ARCH}\\${RUNTIME}\\bin")
						execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}/cmake_extra_tools" COMMAND cmd /c "sleep 5")
						execute_process(COMMAND ${CMAKE_COMMAND} -E remove_directory "${PROJECT_SOURCE_DIR}/cmake_extra_tools")
						execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/cmake_extra_tools.zip")
					endif()
				endif()
				include_directories("$ENV{SystemDrive}/OpenCV4.2.0/include")
				if(MSVC)
					if(ENABLE_STATIC)
						set(CMAKE_EXE_LINKER_FLAGS "/LIBPATH:\"$ENV{SystemDrive}/OpenCV4.2.0/${ARCH}/${RUNTIME}/staticlib\" ${CMAKE_EXE_LINKER_FLAGS}")
						if(${CMAKE_VERSION} VERSION_LESS "3.1")
							list(APPEND UxVCtrl_LIBRARIES debug opencv_highgui420d debug opencv_videoio420d debug opencv_imgcodecs420d debug opencv_imgproc420d debug opencv_core420d debug libwebpd debug ippiwd debug ittnotifyd debug libprotobufd debug IlmImfd debug zlibd debug libjasperd debug libjpeg-turbod debug libpngd debug libtiffd debug vfw32 debug comctl32)
							list(APPEND UxVCtrl_LIBRARIES optimized opencv_highgui420 optimized opencv_videoio420 optimized opencv_imgcodecs420 optimized opencv_imgproc420 optimized opencv_core420 optimized libwebp optimized ippiw optimized ittnotify optimized libprotobuf optimized IlmImf optimized zlib optimized libjasper optimized libjpeg-turbo optimized libpng optimized libtiff optimized vfw32 optimized comctl32)
							list(APPEND UxVCtrl_LIBRARIES ippicvmt)
						else()
							target_link_libraries(UxVCtrl debug opencv_highgui420d debug opencv_videoio420d debug opencv_imgcodecs420d debug opencv_imgproc420d debug opencv_core420d debug libwebpd debug ippiwd debug ittnotifyd debug libprotobufd debug IlmImfd debug zlibd debug libjasperd debug libjpeg-turbod debug libpngd debug libtiffd debug vfw32 debug comctl32)
							target_link_libraries(UxVCtrl optimized opencv_highgui420 optimized opencv_videoio420 optimized opencv_imgcodecs420 optimized opencv_imgproc420 optimized opencv_core420 optimized libwebp optimized ippiw optimized ittnotify optimized libprotobuf optimized IlmImf optimized zlib optimized libjasper optimized libjpeg-turbo optimized libpng optimized libtiff optimized vfw32 optimized comctl32)
							target_link_libraries(UxVCtrl ippicvmt)
						endif()
					else()
						set(CMAKE_EXE_LINKER_FLAGS "/LIBPATH:\"$ENV{SystemDrive}/OpenCV4.2.0/${ARCH}/${RUNTIME}/lib\" ${CMAKE_EXE_LINKER_FLAGS}")
						if(${CMAKE_VERSION} VERSION_LESS "3.1")
							list(APPEND UxVCtrl_LIBRARIES debug opencv_world420d)
							list(APPEND UxVCtrl_LIBRARIES optimized opencv_world420)
						else()
							target_link_libraries(UxVCtrl debug opencv_world420d)
							target_link_libraries(UxVCtrl optimized opencv_world420)
						endif()
					endif()
				else()
					set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11") 
					if(ENABLE_STATIC)
						set(CMAKE_EXE_LINKER_FLAGS "-L\"$ENV{SystemDrive}/OpenCV4.2.0/${ARCH}/${RUNTIME}/staticlib\" ${CMAKE_EXE_LINKER_FLAGS}")
						if(${CMAKE_VERSION} VERSION_LESS "3.1")
							list(APPEND UxVCtrl_LIBRARIES opencv_highgui420 opencv_videoio420 opencv_imgcodecs420 opencv_imgproc420 opencv_core420 ade quirc libwebp libprotobuf IlmImf zlib libjasper libjpeg-turbo libpng libtiff vfw32 gdi32 uuid oleaut32 ole32 comctl32 comdlg32)
						else()
							target_link_libraries(UxVCtrl opencv_highgui420 opencv_videoio420 opencv_imgcodecs420 opencv_imgproc420 opencv_core420 ade quirc libwebp libprotobuf IlmImf zlib libjasper libjpeg-turbo libpng libtiff vfw32 gdi32 uuid oleaut32 ole32 comctl32 comdlg32)
						endif()
					else()
						set(CMAKE_EXE_LINKER_FLAGS "-L\"$ENV{SystemDrive}/OpenCV4.2.0/${ARCH}/${RUNTIME}/lib\" ${CMAKE_EXE_LINKER_FLAGS}")
						if(${CMAKE_VERSION} VERSION_LESS "3.1")
							list(APPEND UxVCtrl_LIBRARIES opencv_world420)
						else()
							target_link_libraries(UxVCtrl opencv_world420)
						endif()
					endif()
				endif()
			else()
				if(APPLE)
					include_directories("/usr/local/opt/opencv@4/include/opencv4")
					set(CMAKE_EXE_LINKER_FLAGS "-L\"/usr/local/opt/opencv@4/lib\" -L\"/usr/local/opt/opencv@4/lib/opencv4/3rdparty\" ${CMAKE_EXE_LINKER_FLAGS}")
				endif()
				include_directories("/usr/local/include/opencv4")
				set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11") 
				set(CMAKE_EXE_LINKER_FLAGS "-L\"/usr/local/lib\" ${CMAKE_EXE_LINKER_FLAGS}")
				set(CMAKE_EXE_LINKER_FLAGS "-L\"/usr/local/lib/opencv4/3rdparty\" ${CMAKE_EXE_LINKER_FLAGS}")
				if(ENABLE_STATIC)
					if(${CMAKE_VERSION} VERSION_LESS "3.1")
						list(APPEND UxVCtrl_LIBRARIES opencv_highgui opencv_videoio opencv_imgcodecs opencv_imgproc opencv_core ade quirc ippiw ittnotify ippicv libprotobuf)
					else()
						target_link_libraries(UxVCtrl opencv_highgui opencv_videoio opencv_imgcodecs opencv_imgproc opencv_core ade quirc ippiw ittnotify ippicv libprotobuf)
					endif()
				else()
					if(${CMAKE_VERSION} VERSION_LESS "3.1")
						list(APPEND UxVCtrl_LIBRARIES opencv_highgui opencv_videoio opencv_imgcodecs opencv_imgproc opencv_core)
					else()
						target_link_libraries(UxVCtrl opencv_highgui opencv_videoio opencv_imgcodecs opencv_imgproc opencv_core)
					endif()
				endif()
			endif()
		endif()
	endif()
endif()

if(USE_FFMPEG_VIDEO)
	add_definitions(-D USE_FFMPEG_VIDEO)
	if(WIN32)
		if(ENABLE_AUTO_DOWNLOAD)
			if(NOT EXISTS "${FFMPEG_PKG_PREFIX}/ffmpeg-msvc/include/libavcodec/avcodec.h")
				message(STATUS "Downloading ffmpeg-msvc...")
				file(DOWNLOAD "http://www.ensta-bretagne.fr/lebars/Share/ffmpeg-msvc.zip" "${PROJECT_SOURCE_DIR}/ffmpeg-msvc.zip")
				execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/ffmpeg-msvc.zip")
				execute_process(COMMAND ${CMAKE_COMMAND} -E copy_directory "${PROJECT_SOURCE_DIR}/ffmpeg-msvc" "${FFMPEG_PKG_PREFIX}/ffmpeg-msvc")
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove_directory "${PROJECT_SOURCE_DIR}/ffmpeg-msvc")
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/ffmpeg-msvc.zip")
				file(DOWNLOAD "http://www.ensta-bretagne.fr/lebars/Share/cmake_extra_tools.zip" "${PROJECT_SOURCE_DIR}/cmake_extra_tools.zip")
				execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/cmake_extra_tools.zip")
				execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}/cmake_extra_tools" COMMAND cmd /c pathman /as "${FFMPEG_PKG_PREFIX}\\ffmpeg-msvc\\${ARCH}\\vc15\\bin")
				execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}/cmake_extra_tools" COMMAND cmd /c "sleep 5")
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove_directory "${PROJECT_SOURCE_DIR}/cmake_extra_tools")
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/cmake_extra_tools.zip")
			endif()
		endif()
		include_directories("${FFMPEG_PKG_PREFIX}/ffmpeg-msvc/include")
		if(MSVC)
			set(CMAKE_EXE_LINKER_FLAGS "/LIBPATH:\"${FFMPEG_PKG_PREFIX}/ffmpeg-msvc/${ARCH}/vc15/lib\" ${CMAKE_EXE_LINKER_FLAGS}")
		else()
			set(CMAKE_EXE_LINKER_FLAGS "-L\"${FFMPEG_PKG_PREFIX}/ffmpeg-msvc/${ARCH}/vc15/lib\" ${CMAKE_EXE_LINKER_FLAGS}")
		endif()
		if(${CMAKE_VERSION} VERSION_LESS "3.1")
			list(APPEND UxVCtrl_LIBRARIES avcodec avdevice avfilter avformat avutil postproc swresample swscale)
		else()
			target_link_libraries(UxVCtrl avcodec avdevice avfilter avformat avutil postproc swresample swscale)
		endif()
	else()
		if(ENABLE_AUTO_DOWNLOAD)
			if((NOT EXISTS "/usr/include/libavcodec/avcodec.h") AND (NOT EXISTS "${FFMPEG_PKG_PREFIX}/include/libavcodec/avcodec.h"))
				if(APPLE)
					message(STATUS "Trying to download ffmpeg...")
					execute_process(COMMAND sh -c "${INSTALL_PKG_COMMAND} ${FFMPEG_PKG_NAME}")
				else()
					message(STATUS "Trying to download ffmpeg, run \"${SUDO_COMMAND} apt-get update\" before if needed and check if the terminal is asking for a password...")
					execute_process(COMMAND sh -c "${INSTALL_PKG_COMMAND} ${FFMPEG_PKG_NAME}")
				endif()
			endif()
		endif()
		set(CMAKE_EXE_LINKER_FLAGS "-L\"${FFMPEG_PKG_PREFIX}/lib\" ${CMAKE_EXE_LINKER_FLAGS}")
		if(${CMAKE_VERSION} VERSION_LESS "3.1")
			list(APPEND UxVCtrl_LIBRARIES avcodec avformat avutil swresample swscale)
		else()
			target_link_libraries(UxVCtrl avcodec avformat avutil swresample swscale)
		endif()
	endif()
else()
	if(WIN32)
		if(EXISTS "${FFMPEG_PKG_PREFIX}/ffmpeg-msvc/include/libavcodec/avcodec.h")
			message(STATUS "ffmpeg-msvc has been detected, see USE_FFMPEG_VIDEO option to try to use it...")
		endif()
	else()
		if((EXISTS "/usr/include/libavcodec/avcodec.h") OR (EXISTS "${FFMPEG_PKG_PREFIX}/include/libavcodec/avcodec.h"))
			message(STATUS "ffmpeg has been detected, see USE_FFMPEG_VIDEO option to try to use it...")
		endif()
	endif()
endif()

if(_DEBUG)
	add_definitions(-D _DEBUG)
endif()

if(_DEBUG_DISPLAY)
	add_definitions(-D _DEBUG_DISPLAY)
endif()

if(_DEBUG_MESSAGES)
	add_definitions(-D _DEBUG_MESSAGES)
endif()

if(_DEBUG_WARNINGS)
	add_definitions(-D _DEBUG_WARNINGS)
endif()

if(NOT MSVC)
	if(ENABLE_VALGRIND_DEBUG)
		add_definitions(-D ENABLE_VALGRIND_DEBUG)
	endif()
endif()

if(ENABLE_BUILD_OPTIMIZATION_SAILBOAT)
else()
	if(${CMAKE_VERSION} VERSION_LESS "3.1")
		list(APPEND UxVCtrl_SOURCES SSC32Interface.cpp SonarLocalization.cpp SonarAltitudeEstimation.cpp Simulator.cpp SeanetProcessing.cpp SBGInterface.cpp RazorAHRSInterface.cpp PololuInterface.cpp FollowMe.cpp ExternalProgramTrigger.cpp Hardware/SwarmonDevice.cpp Hardware/SSC32.cpp Hardware/SRF02.cpp Hardware/Seanet.cpp Hardware/SBG.cpp Hardware/RPLIDAR.cpp Hardware/Roboteq.cpp Hardware/PathfinderDVL.cpp Hardware/P33x.cpp Hardware/Ontrak.cpp Hardware/NortekDVL.cpp Hardware/MT.cpp Hardware/ArduinoPressureSensor.cpp Hardware/MS580314BA.cpp Hardware/MS5837.cpp Hardware/MiniSSC.cpp Hardware/MES.cpp Hardware/MDM.cpp Hardware/LIRMIA3.cpp Hardware/Hokuyo.cpp Hardware/IM483I.cpp)
	else()
		target_sources(UxVCtrl PUBLIC SSC32Interface.cpp SonarLocalization.cpp SonarAltitudeEstimation.cpp Simulator.cpp SeanetProcessing.cpp SBGInterface.cpp RazorAHRSInterface.cpp PololuInterface.cpp FollowMe.cpp ExternalProgramTrigger.cpp Hardware/SwarmonDevice.cpp Hardware/SSC32.cpp Hardware/SRF02.cpp Hardware/Seanet.cpp Hardware/SBG.cpp Hardware/RPLIDAR.cpp Hardware/Roboteq.cpp Hardware/PathfinderDVL.cpp Hardware/P33x.cpp Hardware/Ontrak.cpp Hardware/NortekDVL.cpp Hardware/MT.cpp Hardware/ArduinoPressureSensor.cpp Hardware/MS580314BA.cpp Hardware/MS5837.cpp Hardware/MiniSSC.cpp Hardware/MES.cpp Hardware/MDM.cpp Hardware/LIRMIA3.cpp Hardware/Hokuyo.cpp Hardware/IM483I.cpp)
	endif()
endif()

if(${CMAKE_VERSION} VERSION_LESS "3.1")
	add_executable(UxVCtrl ${UxVCtrl_SOURCES})
	target_link_libraries(UxVCtrl ${UxVCtrl_LIBRARIES})
endif()

if(USE_OPENCV_HIGHGUI_CPP_API)
	add_definitions(-D USE_OPENCV_HIGHGUI_CPP_API)
endif()

if(DISABLE_OPENCV_C_API_CTORS)
	add_definitions(-D DISABLE_OPENCV_C_API_CTORS)
endif()

if(ENABLE_OPENCV_HIGHGUI_THREADS_WORKAROUND)
	add_definitions(-D ENABLE_OPENCV_HIGHGUI_THREADS_WORKAROUND)
endif()

if(ENABLE_OPENCV_HIGHGUI_STARTWINDOWTHREAD)
	add_definitions(-D ENABLE_OPENCV_HIGHGUI_STARTWINDOWTHREAD)
endif()

if(FORCE_SINGLE_THREAD_OPENCVGUI)
	add_definitions(-D FORCE_SINGLE_THREAD_OPENCVGUI)
endif()

if(ENABLE_SHARED_WAITKEY_OPENCVGUI)
	add_definitions(-D ENABLE_SHARED_WAITKEY_OPENCVGUI)
endif()

if(DISABLE_SBG_TCP)
	add_definitions(-D DISABLE_SBG_TCP)
endif()

if(DISABLE_AIS_SUPPORT)
	add_definitions(-D DISABLE_AIS_SUPPORT)
endif()

if(USE_OLD_CHRONO)
	add_definitions(-D USE_OLD_CHRONO)
endif()

if(USE_OLD_TIMER)
	add_definitions(-D USE_OLD_TIMER)
endif()

if(ENABLE_COMPUTERI2CBUS_SUPPORT)
	add_definitions(-D ENABLE_COMPUTERI2CBUS_SUPPORT)
endif()

# mingw64 does not seem to support _stdcall that appear in LabJackUD.h...
if(ENABLE_MINGW64_STDCALL_FIX)
	add_definitions(-D _stdcall=__stdcall)
endif()

if(WIN32)
	add_definitions(-D ENABLE_GETTIMEOFDAY_WIN32 -D DISABLE_TIMEZONE_STRUCT_REDEFINITION)
	add_definitions(-D ENABLE_CANCEL_THREAD -D ENABLE_KILL_THREAD)
endif()
add_definitions(-D SIMULATED_INTERNET_SWARMONDEVICE)

if(WIN32)
	if(MSVC)
		if(ENABLE_STATIC)
			if(CMAKE_VERSION VERSION_LESS 3.15.0)
				set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} /MTd")
				set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MTd")
				set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /MT")
				set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MT")
			else()
				set_target_properties(UxVCtrl PROPERTIES MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
			endif()
		endif()
		target_link_libraries(UxVCtrl WinMM WS2_32)
	else()
		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -Wno-unknown-pragmas -Wno-unused-parameter -Wextra")
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wno-unknown-pragmas -Wno-unused-parameter -Wextra -fpermissive")
		if(ENABLE_STATIC)
			set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -static-libgcc -static-libstdc++")
		endif()
		target_link_libraries(UxVCtrl WinMM WS2_32 m)
	endif()
else()
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -Wno-unknown-pragmas -Wno-unused-parameter -Wextra")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wno-unknown-pragmas -Wno-unused-parameter -Wextra -fpermissive")
	if(ENABLE_STATIC)
		if(NOT APPLE)
			set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -static-libgcc -static-libstdc++")
			if(DISABLE_OPENCV_SUPPORT)
				set(CMAKE_EXE_LINKER_FLAGS "-static ${CMAKE_EXE_LINKER_FLAGS}")
			else()
				# Adding -static would refuse any dynamic library left...
			endif()
		endif()
	endif()
	if(APPLE)
		target_link_libraries(UxVCtrl pthread m)
	else()
		target_link_libraries(UxVCtrl pthread rt m)
	endif()
endif()

if(WIN32)
	message(STATUS "You might need to update your PATH and reboot depending on the prerequisites installed so that UxVCtrl can always find the necessary binaries and libraries at runtime, you might need also to enable Media and .NET 2.0/3.0/3.5 features in Windows and install Visual Studio 2008-2019 Redistributable...")
else()
	message(STATUS "You might need to update your PATH/LD_LIBRARY_PATH and reboot depending on the prerequisites installed so that UxVCtrl can always find the necessary binaries and libraries at runtime...")
endif()
