cmake_minimum_required(VERSION 2.6)
project(UxVCtrl)

add_executable(UxVCtrl SSC32Interface.cpp RazorAHRSInterface.cpp Observer.cpp NMEAInterface.cpp Main.cpp Globals.cpp FollowMe.cpp Controller.cpp Config.cpp Computations.cpp Commands.cpp Hardware/ublox.cpp Hardware/SwarmonDevice.cpp Hardware/SSC32.cpp Hardware/RS232Port.cpp Hardware/RazorAHRS.cpp Hardware/NMEADevice.cpp Hardware/MT.cpp Hardware/MiniSSC.cpp Hardware/Maestro.cpp Hardware/IM483I.cpp Hardware/gpControl.cpp ../interval/imatrix.cpp ../interval/rmatrix.cpp ../interval/box.cpp ../interval/interval.cpp ../interval/iboolean.cpp ../OSUtils/OSTimer.c ../OSUtils/OSTime.c ../OSUtils/OSThread.c ../OSUtils/OSSem.c ../OSUtils/OSNet.c ../OSUtils/OSMisc.c ../OSUtils/OSEv.c ../OSUtils/OSCriticalSection.c ../OSUtils/OSCore.c ../OSUtils/OSComputerRS232Port.c)

option(DISABLE_OPENCV_SUPPORT "DISABLE_OPENCV_SUPPORT" ON) 
option(ENABLE_MAVLINK_SUPPORT "ENABLE_MAVLINK_SUPPORT" OFF) 
option(ENABLE_LABJACK_SUPPORT "ENABLE_LABJACK_SUPPORT" OFF) 
option(ENABLE_LIBMODBUS_SUPPORT "ENABLE_LIBMODBUS_SUPPORT" OFF) 
option(ENABLE_SBG_SUPPORT "ENABLE_SBG_SUPPORT" OFF) 
option(ENABLE_BLUEVIEW_SUPPORT "ENABLE_BLUEVIEW_SUPPORT" OFF)

#
option(ENABLE_BUILD_OPTIMIZATION_SAILBOAT "ENABLE_BUILD_OPTIMIZATION_SAILBOAT" OFF)

option(OPENCV2413 "OPENCV2413" ON)
option(OPENCV320 "OPENCV320" OFF)

option(USE_ALTERNATE_RECORDING "USE_ALTERNATE_RECORDING" OFF)

option(DISABLE_AIS_SUPPORT "DISABLE_AIS_SUPPORT" OFF)

if(ENABLE_BUILD_OPTIMIZATION_SAILBOAT)
	add_definitions(-DENABLE_BUILD_OPTIMIZATION_SAILBOAT)
endif()

#ENABLE_CVKINECT2SDKHOOK;ENABLE_CVCLEYESDKHOOK;

if(DISABLE_OPENCV_SUPPORT)
	add_definitions(-DDISABLE_OPENCV_SUPPORT)
else()
	target_sources(UxVCtrl PUBLIC Ball.cpp ExternalVisualLocalization.cpp MissingWorker.cpp OpenCVGUI.cpp Pinger.cpp Pipeline.cpp SurfaceVisualObstacle.cpp VisualObstacle.cpp VideoRecord.cpp Wall.cpp Hardware/Video.cpp ../Extensions/Img/CvCore.c ../Extensions/Img/CvDisp.c ../Extensions/Img/CvDraw.c ../Extensions/Img/CvFiles.c ../Extensions/Img/CvProc.c)
	if(OPENCV2413)
		add_definitions(-DOPENCV2413)
	elseif(OPENCV320)
		add_definitions(-DOPENCV320)
	endif()
	if(WIN32)
		if(MSVC)
			include_directories("C:/OpenCV2.4.13/include")
			target_link_libraries(UxVCtrl -L"C:/OpenCV2.4.13/x86/vc15/lib")
			target_link_libraries(UxVCtrl opencv_core2413.lib opencv_imgproc2413.lib opencv_highgui2413.lib)
		else()
			include_directories("C:/OpenCV2.4.13/include")
			target_link_libraries(UxVCtrl -L"C:/OpenCV2.4.13/x86/mingw/lib")
			target_link_libraries(UxVCtrl opencv_core2413 opencv_imgproc2413 opencv_highgui2413)
		endif()
	else()
		target_link_libraries(UxVCtrl opencv_core opencv_imgproc opencv_highgui)
	endif()
endif()

if (ENABLE_MAVLINK_SUPPORT)
	add_definitions(-DENABLE_MAVLINK_SUPPORT)
	target_sources(UxVCtrl PUBLIC MAVLinkInterface.cpp Hardware/MAVLinkDevice.cpp) 
	if (WIN32)
		if(MSVC)
			target_link_libraries(UxVCtrl -L"${ProgramFiles}/LabJack/Drivers")
		else()
			target_link_libraries(UxVCtrl -L"${ProgramFiles}/LabJack/Drivers")
		endif()
	else()
	endif()
else()
endif()

if (ENABLE_LABJACK_SUPPORT)
	add_definitions(-DENABLE_LABJACK_SUPPORT)
	target_sources(UxVCtrl PUBLIC Hardware/UE9A.cpp ../Extensions/Devices/LabjackUtils/UE9Utils/UE9UtilsUE9Mgr.cpp ../Extensions/Devices/LabjackUtils/UE9Utils/UE9Cfg.cpp ../Extensions/Devices/LabjackUtils/UE9Utils/UE9Core.cpp ../Extensions/Devices/LabjackUtils/UE9Utils/ue9.cpp ../Extensions/Devices/LabjackUtils/liblabjackusb/labjackusb.cpp)
	include_directories("${PROJECT_SOURCE_DIR}/../Extensions/Devices/LabjackUtils/liblabjackusb")
	include_directories("${PROJECT_SOURCE_DIR}/../Extensions/Devices/LabjackUtils/UE9Utils")
	if (WIN32)
		if(MSVC)
			target_link_libraries(UxVCtrl -L"${ProgramFiles}/LabJack/Drivers")
			target_link_libraries(UxVCtrl labjackud.lib)
		else()
			target_link_libraries(UxVCtrl -L"${ProgramFiles}/LabJack/Drivers")
			target_link_libraries(UxVCtrl labjackud)
		endif()
	else()
	endif()
else()
endif()

if (ENABLE_LIBMODBUS_SUPPORT)
	add_definitions(-DENABLE_LIBMODBUS_SUPPORT)
	target_sources(UxVCtrl PUBLIC Hardware/CISCREA.cpp) 
	if (WIN32)
		if(MSVC)
			target_link_libraries(UxVCtrl -L"${ProgramFiles}/libmodbus-3.0.6-msvc/x86/vc15/lib")
			target_link_libraries(UxVCtrl libmodbus.lib)
		else()
			target_link_libraries(UxVCtrl -L"${ProgramFiles}/libmodbus-3.0.6-msvc/x86/vc9/lib")
			target_link_libraries(UxVCtrl libmodbus)
		endif()
	else()
		target_link_libraries(UxVCtrl modbus)
	endif()
else()
endif()

if (ENABLE_SBG_SUPPORT)
	add_definitions(-DENABLE_SBG_SUPPORT)
	target_sources(UxVCtrl PUBLIC Hardware/SBG.cpp) 
	if (WIN32)
		if(MSVC)
			target_link_libraries(UxVCtrl -L"${SBG_SDK_DIR}/x86/vc15/lib")
			target_link_libraries(UxVCtrl sbgEComd.lib debug)
			target_link_libraries(UxVCtrl sbgECom.lib optimized)
		else()
			target_link_libraries(UxVCtrl -L"${SBG_SDK_DIR}/x86/vc9/lib")
			target_link_libraries(UxVCtrl sbgECom)
		endif()
	else()
		include_directories("/usr/local/include/sbgECom/src")
		include_directories("/usr/local/include/sbgECom/common")
		target_link_libraries(UxVCtrl sbgECom)
	endif()
else()
endif()

if (ENABLE_BLUEVIEW_SUPPORT)
	add_definitions(-DENABLE_BLUEVIEW_SUPPORT)
	add_definitions(-DBVTSDK_VERSION=4)
	target_sources(UxVCtrl PUBLIC Hardware/BlueView.cpp) 
	if (WIN32)
		if(MSVC)
			target_link_libraries(UxVCtrl -L"${BVTSDK_DIR}/x86/vc15/lib")
			target_link_libraries(UxVCtrl bvtsdk4.lib)
		else()
			target_link_libraries(UxVCtrl -L"${BVTSDK_DIR}/x86/vc9/lib")
			target_link_libraries(UxVCtrl bvtsdk4)
		endif()
	else()
		target_link_libraries(UxVCtrl bvtsdk)
	endif()
else()
endif()

if(ENABLE_BUILD_OPTIMIZATION_SAILBOAT)
else()
 target_sources(UxVCtrl PUBLIC SeanetProcessing.cpp SonarLocalization.cpp SonarAltitudeEstimation.cpp Simulator.cpp Hardware/NortekDVL.cpp Hardware/Seanet.cpp Hardware/RPLIDAR.cpp Hardware/PathfinderDVL.cpp Hardware/P33x.cpp Hardware/MES.cpp Hardware/MDM.cpp Hardware/MS583730BA.cpp Hardware/MS580314BA.cpp Hardware/LIRMIA3.cpp Hardware/Hokuyo.cpp)
endif()

if(USE_ALTERNATE_RECORDING)
	add_definitions(-DUSE_ALTERNATE_RECORDING)
endif()

if(DISABLE_AIS_SUPPORT)
	add_definitions(-DDISABLE_AIS_SUPPORT)
endif()

if (WIN32)
	add_definitions(-DENABLE_GETTIMEOFDAY_WIN32 -DDISABLE_TIMEZONE_STRUCT_REDEFINITION)
	add_definitions(-DENABLE_CANCEL_THREAD -DENABLE_KILL_THREAD)
else()
	add_definitions(-DENABLE_OPENCV_HIGHGUI_THREADS_WORKAROUND)
endif()
add_definitions(-DSIMULATED_INTERNET_SWARMONDEVICE)

include_directories("${PROJECT_SOURCE_DIR}")
include_directories("${PROJECT_SOURCE_DIR}/../OSUtils")
include_directories("${PROJECT_SOURCE_DIR}/../Extensions/Img")
include_directories("${PROJECT_SOURCE_DIR}/../interval")
include_directories("${PROJECT_SOURCE_DIR}/../matrix_lib")
include_directories("${PROJECT_SOURCE_DIR}/Hardware")
include_directories("..")

if (WIN32)
	if(MSVC)
		target_link_libraries(UxVCtrl WinMM.lib WS2_32.lib)
	else()
		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O3 -Wall -Wno-unknown-pragmas -Wno-unused-parameter")
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fpermissive")
		target_link_libraries(UxVCtrl WinMM WS2_32)
	endif()
else()
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O3 -Wall -Wno-unknown-pragmas -Wno-unused-parameter")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fpermissive")
	target_link_libraries(UxVCtrl pthread rt m)
endif()
