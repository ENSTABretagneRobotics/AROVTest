# target_sources not compatible with 2.8...
cmake_minimum_required(VERSION 3.2)

if(POLICY CMP0076)
cmake_policy(SET CMP0076 OLD)
endif()

project(UxVCtrl)

if(NOT(PROJECT_BINARY_DIR STREQUAL PROJECT_SOURCE_DIR))
	message(WARNING "Please set the CMake build folder to the same as the source folder...")
endif()

# Used below to set VCX value for MinGW...
option(OPENCV2413 "OPENCV2413" OFF)
option(OPENCV320 "OPENCV320" ON)
option(OPENCV342 "OPENCV342" OFF)
option(OPENCV412 "OPENCV412" OFF)

if(WIN32)
	# Get CMake bitness
	if(CMAKE_SIZEOF_VOID_P EQUAL 8)
		message(WARNING "Only 32 bit version of CMake is currently supported on Windows 64 bit...")
		set(PLTFRM "x64")
	elseif(CMAKE_SIZEOF_VOID_P EQUAL 4)
		set(PLTFRM "x86")
	else()
		message(WARNING "Unknown architecture...")
	endif()
	if(MSVC)
		# Get cl target bitness
		if("${CMAKE_GENERATOR_PLATFORM}" STREQUAL "x64")
			set(PLTFRM "x64")
		elseif("${CMAKE_GENERATOR_PLATFORM}" STREQUAL "Win64")
			set(PLTFRM "x64")
		elseif("${CMAKE_GENERATOR_PLATFORM}" STREQUAL "x86")
			set(PLTFRM "x86")
		elseif("${CMAKE_GENERATOR_PLATFORM}" STREQUAL "Win32")
			set(PLTFRM "x86")
		else()
			set(PLTFRM "x86")
		endif()
		if(MSVC_TOOLSET_VERSION EQUAL 80)
			set(VCX "vc8")
		elseif(MSVC_TOOLSET_VERSION EQUAL 90)
			set(VCX "vc9")
		elseif(MSVC_TOOLSET_VERSION EQUAL 100)
			set(VCX "vc10")
		elseif(MSVC_TOOLSET_VERSION EQUAL 110)
			set(VCX "vc11")
		elseif(MSVC_TOOLSET_VERSION EQUAL 120)
			set(VCX "vc12")
		elseif(MSVC_TOOLSET_VERSION EQUAL 140)
			set(VCX "vc14")
		elseif(MSVC_TOOLSET_VERSION EQUAL 141)
			set(VCX "vc15")
		elseif(MSVC_TOOLSET_VERSION EQUAL 142)
			set(VCX "vc16")
		else()
			set(VCX "vc15")
		endif()
		set(LIBPREFIXVCX "")
		set(LIBEXTVCX ".lib")
	elseif(MINGW)
		if(OPENCV2413)
			set(VCX "mingw")
		elseif(OPENCV320)
			if(PLTFRM STREQUAL "x64")
				set(VCX "mingw8")
			else()
				set(VCX "mingw")
			endif()
		elseif(OPENCV342)
			set(VCX "mingw5")
		elseif(OPENCV412)
			if(PLTFRM STREQUAL "x64")
				set(VCX "mingw8")
			else()
				set(VCX "mingw7")
			endif()
		else()
			if(PLTFRM STREQUAL "x64")
				set(VCX "mingw8")
			else()
				set(VCX "mingw")
			endif()
		endif()
		set(LIBPREFIXVCX "lib")
		set(LIBEXTVCX ".dll.a")
	else()
		set(VCX "vc15")
		set(LIBPREFIXVCX "")
		set(LIBEXTVCX ".lib")
	endif()
else()
	if(CMAKE_SIZEOF_VOID_P EQUAL 8)
		set(PLTFRM "x86_64")
		set(USR_LIB_ARCH_DIR "/usr/lib/x86_64-linux-gnu")
	elseif(CMAKE_SIZEOF_VOID_P EQUAL 4)
		set(PLTFRM "i386")
		set(USR_LIB_ARCH_DIR "/usr/lib/i386-linux-gnu")
	else()
		message(WARNING "Unknown architecture...")
		set(USR_LIB_ARCH_DIR "/usr/lib")
	endif()
endif()

option(ENABLE_AUTO_DOWNLOAD "ENABLE_AUTO_DOWNLOAD" ON)
if(WIN32)
else()
#	option(ENABLE_AUTO_SUDO "ENABLE_AUTO_SUDO" ON)
	option(ENABLE_FIND_PACKAGE "ENABLE_FIND_PACKAGE" ON)
	option(ENABLE_STATIC "ENABLE_STATIC" OFF)
endif()

if(ENABLE_AUTO_DOWNLOAD)
	if(WIN32)
		message(STATUS "If behind a proxy, you might need to type e.g. \"set https_proxy=192.168.1.17:8080\" in the same terminal before running cmake-gui/cmake to configure the proxy settings...")
	else()
		message(STATUS "If behind a proxy, you might need to type e.g. \"export https_proxy=192.168.1.17:8080\" in the same terminal before running cmake-gui/cmake to configure the proxy settings...")
	endif()
	message(STATUS "If some prerequisites cannot be downloaded and installed automatically, try to install them manually and change ENABLE_AUTO_DOWNLOAD option in cmake-gui/cmake...")
endif()

if(ENABLE_AUTO_DOWNLOAD)
	if(NOT EXISTS "${PROJECT_SOURCE_DIR}/../OSUtils")
		message(STATUS "Downloading OSUtils...")
		file(DOWNLOAD "https://github.com/ENSTABretagneRobotics/OSUtils/archive/master.zip" "${PROJECT_SOURCE_DIR}/../OSUtils.zip")
		execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/../OSUtils.zip")
		execute_process(COMMAND ${CMAKE_COMMAND} -E rename "${PROJECT_SOURCE_DIR}/OSUtils-master" "${PROJECT_SOURCE_DIR}/../OSUtils")
		execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/../OSUtils.zip")
	endif()
	if(NOT EXISTS "${PROJECT_SOURCE_DIR}/../Extensions")
		message(STATUS "Downloading Extensions...")
		file(DOWNLOAD "https://github.com/ENSTABretagneRobotics/Extensions/archive/master.zip" "${PROJECT_SOURCE_DIR}/../Extensions.zip")
		execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/../Extensions.zip")
		execute_process(COMMAND ${CMAKE_COMMAND} -E rename "${PROJECT_SOURCE_DIR}/Extensions-master" "${PROJECT_SOURCE_DIR}/../Extensions")
		execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/../Extensions.zip")
	endif()
	if(NOT EXISTS "${PROJECT_SOURCE_DIR}/../interval")
		message(STATUS "Downloading interval...")
		file(DOWNLOAD "https://github.com/ENSTABretagneRobotics/interval/archive/master.zip" "${PROJECT_SOURCE_DIR}/../interval.zip")
		execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/../interval.zip")
		execute_process(COMMAND ${CMAKE_COMMAND} -E rename "${PROJECT_SOURCE_DIR}/interval-master" "${PROJECT_SOURCE_DIR}/../interval")
		execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/../interval.zip")
	endif()
	if(NOT EXISTS "${PROJECT_SOURCE_DIR}/../matrix_lib")
		message(STATUS "Downloading matrix_lib...")
		file(DOWNLOAD "https://github.com/ENSTABretagneRobotics/matrix_lib/archive/master.zip" "${PROJECT_SOURCE_DIR}/../matrix_lib.zip")
		execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/../matrix_lib.zip")
		execute_process(COMMAND ${CMAKE_COMMAND} -E rename "${PROJECT_SOURCE_DIR}/matrix_lib-master" "${PROJECT_SOURCE_DIR}/../matrix_lib")
		execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/../matrix_lib.zip")
	endif()
endif()

add_executable(UxVCtrl Observer.cpp NMEAInterface.cpp Main.cpp Globals.cpp Controller.cpp Config.cpp Computations.cpp Commands.cpp Hardware/ublox.cpp Hardware/RS232Port.cpp Hardware/RazorAHRS.cpp Hardware/Pololu.cpp Hardware/NMEADevice.cpp Hardware/I2CBus.cpp Hardware/gpControl.cpp ../interval/imatrix.cpp ../interval/rmatrix.cpp ../interval/box.cpp ../interval/interval.cpp ../interval/iboolean.cpp ../OSUtils/OSTimer.c ../OSUtils/OSTime.c ../OSUtils/OSThread.c ../OSUtils/OSSem.c ../OSUtils/OSNet.c ../OSUtils/OSMisc.c ../OSUtils/OSEv.c ../OSUtils/OSCriticalSection.c ../OSUtils/OSCore.c ../OSUtils/OSComputerRS232Port.c ../OSUtils/OSComputerI2CBus.c)

if(WIN32)
	option(ENABLE_CVKINECT2SDKHOOK "ENABLE_CVKINECT2SDKHOOK" OFF)
	option(ENABLE_CVCLEYESDKHOOK "ENABLE_CVCLEYESDKHOOK" OFF)
endif()
option(ENABLE_BLUEVIEW_SUPPORT "ENABLE_BLUEVIEW_SUPPORT" OFF)
option(ENABLE_MAVLINK_SUPPORT "ENABLE_MAVLINK_SUPPORT" OFF) 
option(ENABLE_LABJACK_SUPPORT "ENABLE_LABJACK_SUPPORT" OFF) 
option(ENABLE_LIBMODBUS_SUPPORT "ENABLE_LIBMODBUS_SUPPORT" OFF) 
option(ENABLE_SBG_SUPPORT "ENABLE_SBG_SUPPORT" OFF) 
option(DISABLE_SBG_TCP "DISABLE_SBG_TCP" OFF) 
option(DISABLE_OPENCV_SUPPORT "DISABLE_OPENCV_SUPPORT" ON) 

option(ENABLE_BUILD_OPTIMIZATION_SAILBOAT "ENABLE_BUILD_OPTIMIZATION_SAILBOAT" OFF)
option(USE_OPENCV_HIGHGUI_CPP_API "USE_OPENCV_HIGHGUI_CPP_API" OFF)
if(WIN32)
	option(ENABLE_OPENCV_HIGHGUI_THREADS_WORKAROUND "ENABLE_OPENCV_HIGHGUI_THREADS_WORKAROUND" OFF)
	option(FORCE_SINGLE_THREAD_OPENCVGUI "FORCE_SINGLE_THREAD_OPENCVGUI" OFF)
else()
	option(ENABLE_OPENCV_HIGHGUI_THREADS_WORKAROUND "ENABLE_OPENCV_HIGHGUI_THREADS_WORKAROUND" ON)
	option(FORCE_SINGLE_THREAD_OPENCVGUI "FORCE_SINGLE_THREAD_OPENCVGUI" ON)
endif()
option(ENABLE_OPENCV_HIGHGUI_STARTWINDOWTHREAD "ENABLE_OPENCV_HIGHGUI_STARTWINDOWTHREAD" OFF)
option(ENABLE_SHARED_WAITKEY_OPENCVGUI "ENABLE_SHARED_WAITKEY_OPENCVGUI" OFF)
option(USE_FFMPEG_VIDEO "USE_FFMPEG_VIDEO" OFF)
option(DISABLE_AIS_SUPPORT "DISABLE_AIS_SUPPORT" OFF)
if(APPLE)
	option(USE_OLD_CHRONO "USE_OLD_CHRONO" ON)
	option(USE_OLD_TIMER "USE_OLD_TIMER" ON)
	option(ENABLE_COMPUTERI2CBUS_SUPPORT "ENABLE_COMPUTERI2CBUS_SUPPORT" OFF)
else()
	option(USE_OLD_CHRONO "USE_OLD_CHRONO" OFF)
	option(USE_OLD_TIMER "USE_OLD_TIMER" OFF)
	option(ENABLE_COMPUTERI2CBUS_SUPPORT "ENABLE_COMPUTERI2CBUS_SUPPORT" ON)
endif()

mark_as_advanced(ENABLE_BUILD_OPTIMIZATION_SAILBOAT USE_OPENCV_HIGHGUI_CPP_API ENABLE_OPENCV_HIGHGUI_THREADS_WORKAROUND ENABLE_OPENCV_HIGHGUI_STARTWINDOWTHREAD ENABLE_SHARED_WAITKEY_OPENCVGUI USE_FFMPEG_VIDEO DISABLE_AIS_SUPPORT ENABLE_COMPUTERI2CBUS_SUPPORT)

if(ENABLE_BUILD_OPTIMIZATION_SAILBOAT)
	add_definitions(-DENABLE_BUILD_OPTIMIZATION_SAILBOAT)
endif()

if(ENABLE_BLUEVIEW_SUPPORT)
	add_definitions(-DENABLE_BLUEVIEW_SUPPORT)
	target_sources(UxVCtrl PUBLIC Hardware/BlueView.cpp) 
	if(WIN32)
		add_definitions(-DBVTSDK_VERSION=4)
		set(BVTSDK_DIR "$ENV{ProgramFiles}/BlueView/bvtsdk")
		if(ENABLE_AUTO_DOWNLOAD)
			if(NOT EXISTS "${BVTSDK_DIR}/include/bvt_sdk.h")
				message(STATUS "Downloading BlueView...")
				file(DOWNLOAD "http://www.ensta-bretagne.fr/lebars/Share/bv.zip" "${PROJECT_SOURCE_DIR}/bv.zip")
				execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/bv.zip")
				execute_process(COMMAND ${CMAKE_COMMAND} -E make_directory "$ENV{ProgramFiles}/BlueView")
				execute_process(COMMAND ${CMAKE_COMMAND} -E rename "${PROJECT_SOURCE_DIR}/bv/bv_4.2.0.9526_win32/bvtsdk" "${BVTSDK_DIR}")
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove_directory "${PROJECT_SOURCE_DIR}/bv")
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/bv.zip")
				file(DOWNLOAD "http://www.ensta-bretagne.fr/lebars/Share/cmake_extra_tools.zip" "${PROJECT_SOURCE_DIR}/cmake_extra_tools.zip")
				execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/cmake_extra_tools.zip")
				execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}/cmake_extra_tools" COMMAND cmd /c pathman /as "$ENV{ProgramFiles}\\BlueView\\bvtsdk\\x86\\vc15\\bin")
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove_directory "${PROJECT_SOURCE_DIR}/cmake_extra_tools")
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/cmake_extra_tools.zip")
			endif()
		endif()
		include_directories("${BVTSDK_DIR}/include")
		if(MSVC)
			set(CMAKE_EXE_LINKER_FLAGS "/LIBPATH:\"${BVTSDK_DIR}/x86/vc15/lib\" ${CMAKE_EXE_LINKER_FLAGS}")
			target_link_libraries(UxVCtrl bvtsdk4)
		else()
			set(CMAKE_EXE_LINKER_FLAGS "-L\"${BVTSDK_DIR}/x86/vc15/lib\" ${CMAKE_EXE_LINKER_FLAGS}")
			target_link_libraries(UxVCtrl bvtsdk4)
		endif()
	else()
		if(ENABLE_AUTO_DOWNLOAD)
			if(NOT EXISTS "/usr/local/include/bvt_sdk.h")
				message(STATUS "Downloading BlueView...")
				file(DOWNLOAD "http://www.ensta-bretagne.fr/lebars/Share/bv.zip" "${PROJECT_SOURCE_DIR}/bv.zip")
				execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/bv.zip")
				execute_process(COMMAND sh -c "sudo mkdir -p /usr/local/include")
				execute_process(COMMAND sh -c "sudo mkdir -p /usr/local/lib")
				execute_process(COMMAND sh -c "sudo mkdir -p /usr/include")
				execute_process(COMMAND sh -c "sudo mkdir -p /usr/lib")
				if("${CMAKE_SIZEOF_VOID_P}" EQUAL "4")
					execute_process(COMMAND sh -c "sudo cp -R \"${PROJECT_SOURCE_DIR}/bv/bv_3.5.0.5861_Ubuntu32_16.04.2/bvtsdk/include/\"* /usr/local/include/")
					execute_process(COMMAND sh -c "sudo cp -R \"${PROJECT_SOURCE_DIR}/bv/bv_3.5.0.5861_Ubuntu32_16.04.2/bvtsdk/lib/\"* /usr/local/lib/")
				else()
					execute_process(COMMAND sh -c "sudo cp -R \"${PROJECT_SOURCE_DIR}/bv/bv_3.5.0.6257_Ubuntu64_16.04.2/bvtsdk/include/\"* /usr/local/include/")
					execute_process(COMMAND sh -c "sudo cp -R \"${PROJECT_SOURCE_DIR}/bv/bv_3.5.0.6257_Ubuntu64_16.04.2/bvtsdk/lib/\"* /usr/local/lib/")
				endif()
				execute_process(COMMAND sh -c "sudo rm -f /usr/local/lib/libbvtsdk.so /usr/local/lib/libbvtsdk.so.3 /usr/local/lib/libbvtsdk.so.3.5")
				execute_process(COMMAND sh -c "sudo ln -s -f /usr/local/lib/libbvtsdk.so.3.5.0 /usr/local/lib/libbvtsdk.so")
				execute_process(COMMAND sh -c "sudo ln -s -f /usr/local/lib/libbvtsdk.so.3.5.0 /usr/local/lib/libbvtsdk.so.3")
				execute_process(COMMAND sh -c "sudo ln -s -f /usr/local/lib/libbvtsdk.so.3.5.0 /usr/local/lib/libbvtsdk.so.3.5")
				execute_process(COMMAND sh -c "sudo ln -s -f /usr/local/lib/libbv* /usr/lib/")
				execute_process(COMMAND sh -c "sudo chmod -R 777 /usr/local/include/bv*")
				execute_process(COMMAND sh -c "sudo chmod -R 777 /usr/local/lib/libbv*")
				execute_process(COMMAND sh -c "sudo chmod -R 777 /usr/lib/libbv*")
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove_directory "${PROJECT_SOURCE_DIR}/bv")
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/bv.zip")
			endif()
		endif()
		if(ENABLE_STATIC)
			target_link_libraries(UxVCtrl -static bvtsdk)
		else()
			target_link_libraries(UxVCtrl bvtsdk)
		endif()
	endif()
else()
	if(WIN32)
		if(EXISTS "$ENV{ProgramFiles}/BlueView/bvtsdk/include/bvt_sdk.h")
			message(STATUS "BlueView has been detected, see ENABLE_BLUEVIEW_SUPPORT option to try to use it...")
		endif()
	else()
		if(EXISTS "/usr/local/include/bvt_sdk.h")
			message(STATUS "BlueView has been detected, see ENABLE_BLUEVIEW_SUPPORT option to try to use it...")
		endif()
	endif()
endif()

if(ENABLE_CVKINECT2SDKHOOK)
	add_definitions(-DENABLE_CVKINECT2SDKHOOK)
	include_directories("$ENV{KINECTSDK20_DIR}/inc")
	if(MSVC)
		set(CMAKE_EXE_LINKER_FLAGS "/LIBPATH:\"$ENV{KINECTSDK20_DIR}/Lib/${PLTFRM}\" ${CMAKE_EXE_LINKER_FLAGS}")
		target_link_libraries(UxVCtrl Kinect20)
	else()
		set(CMAKE_EXE_LINKER_FLAGS "-L\"$ENV{KINECTSDK20_DIR}/Lib/${PLTFRM}\" ${CMAKE_EXE_LINKER_FLAGS}")
		target_link_libraries(UxVCtrl Kinect20)
	endif()
endif()

if(ENABLE_CVCLEYESDKHOOK)
	add_definitions(-DENABLE_CVCLEYESDKHOOK)
	include_directories("$ENV{CLEYESDK_DIR}/Include")
	if(MSVC)
		set(CMAKE_EXE_LINKER_FLAGS "/LIBPATH:\"$ENV{CLEYESDK_DIR}/Lib\" ${CMAKE_EXE_LINKER_FLAGS}")
		target_link_libraries(UxVCtrl CLEyeMulticam)
	else()
		set(CMAKE_EXE_LINKER_FLAGS "-L\"$ENV{CLEYESDK_DIR}/Lib\" ${CMAKE_EXE_LINKER_FLAGS}")
		target_link_libraries(UxVCtrl CLEyeMulticam)
	endif()
endif()

if(ENABLE_MAVLINK_SUPPORT)
	add_definitions(-DENABLE_MAVLINK_SUPPORT)
	target_sources(UxVCtrl PUBLIC MAVLinkInterface.cpp Hardware/MAVLinkDevice.cpp) 
	if(WIN32)
		set(MAVLINK_SDK_DIR "$ENV{ProgramFiles}/MAVLinkSDK")
		if(ENABLE_AUTO_DOWNLOAD)
			if(NOT EXISTS "$ENV{ProgramFiles}/MAVLinkSDK/mavlink/common/mavlink.h")
				message(STATUS "Downloading mavlink...")
				file(DOWNLOAD "http://www.ensta-bretagne.fr/lebars/Share/MAVLinkSDK.zip" "${PROJECT_SOURCE_DIR}/MAVLinkSDK.zip")
				execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/MAVLinkSDK.zip")
				execute_process(COMMAND ${CMAKE_COMMAND} -E rename "${PROJECT_SOURCE_DIR}/MAVLinkSDK" "${MAVLINK_SDK_DIR}")
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/MAVLinkSDK.zip")
			endif()
		endif()
		include_directories("${MAVLINK_SDK_DIR}")
	else()
		if(ENABLE_AUTO_DOWNLOAD)
			if(NOT EXISTS "/usr/local/include/mavlink/common/mavlink.h")
				message(STATUS "Downloading mavlink...")
				file(DOWNLOAD "https://github.com/mavlink/c_library_v2/archive/master.zip" "${PROJECT_SOURCE_DIR}/master.zip")
				execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/master.zip")
				execute_process(COMMAND sh -c "sudo mkdir -p /usr/local/include")
				execute_process(COMMAND sh -c "sudo mv -f \"${PROJECT_SOURCE_DIR}/c_library_v2-master\" /usr/local/include/mavlink")
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/master.zip")
			endif()
		endif()
	endif()
else()
	if(WIN32)
		if(EXISTS "$ENV{ProgramFiles}/MAVLinkSDK/mavlink/common/mavlink.h")
			message(STATUS "mavlink has been detected, see ENABLE_MAVLINK_SUPPORT option to try to use it...")
		endif()
	else()
		if(EXISTS "/usr/local/include/mavlink/common/mavlink.h")
			message(STATUS "mavlink has been detected, see ENABLE_MAVLINK_SUPPORT option to try to use it...")
		endif()
	endif()
endif()

if(ENABLE_LABJACK_SUPPORT)
	add_definitions(-DENABLE_LABJACK_SUPPORT)
	include_directories("${PROJECT_SOURCE_DIR}/../Extensions/Devices/LabjackUtils/liblabjackusb")
	include_directories("${PROJECT_SOURCE_DIR}/../Extensions/Devices/LabjackUtils/UE9Utils")
	include_directories("$ENV{ProgramFiles}/LabJack/Drivers")
	if(WIN32)
		target_sources(UxVCtrl PUBLIC Hardware/UE9A.cpp ../Extensions/Devices/LabjackUtils/UE9Utils/UE9Cfg.c ../Extensions/Devices/LabjackUtils/UE9Utils/UE9Core.c)
		set_source_files_properties( ../Extensions/Devices/LabjackUtils/UE9Utils/UE9Cfg.c ../Extensions/Devices/LabjackUtils/UE9Utils/UE9Core.c PROPERTIES LANGUAGE CXX)
		if(MSVC)
			set(CMAKE_EXE_LINKER_FLAGS "/LIBPATH:\"$ENV{ProgramFiles}/LabJack/Drivers\" ${CMAKE_EXE_LINKER_FLAGS}")
			target_link_libraries(UxVCtrl labjackud)
		else()
			set(CMAKE_EXE_LINKER_FLAGS "-L\"$ENV{ProgramFiles}/LabJack/Drivers\" ${CMAKE_EXE_LINKER_FLAGS}")
			target_link_libraries(UxVCtrl labjackud)
		endif()
	else()
		target_sources(UxVCtrl PUBLIC Hardware/UE9A.cpp ../Extensions/Devices/LabjackUtils/UE9Utils/UE9Cfg.c ../Extensions/Devices/LabjackUtils/UE9Utils/UE9Core.c ../Extensions/Devices/LabjackUtils/UE9Utils/ue9.c ../Extensions/Devices/LabjackUtils/liblabjackusb/labjackusb.c)
	endif()
endif()

if(ENABLE_LIBMODBUS_SUPPORT)
	add_definitions(-DENABLE_LIBMODBUS_SUPPORT)
	target_sources(UxVCtrl PUBLIC Hardware/CISCREA.cpp) 
	if(WIN32)
		if(ENABLE_AUTO_DOWNLOAD)
			if(NOT EXISTS "$ENV{ProgramFiles}/libmodbus-3.0.6-msvc/include/modbus/modbus.h")
				message(STATUS "Downloading libmodbus...")
				file(DOWNLOAD "http://www.ensta-bretagne.fr/lebars/Share/libmodbus-3.0.6-msvc.zip" "${PROJECT_SOURCE_DIR}/libmodbus-3.0.6-msvc.zip")
				execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/libmodbus-3.0.6-msvc.zip")
				execute_process(COMMAND ${CMAKE_COMMAND} -E rename "${PROJECT_SOURCE_DIR}/libmodbus-3.0.6-msvc" "$ENV{ProgramFiles}/libmodbus-3.0.6-msvc")
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/libmodbus-3.0.6-msvc.zip")
			endif()
		endif()
		include_directories("$ENV{ProgramFiles}/libmodbus-3.0.6-msvc/include")
		if(MSVC)
			set(CMAKE_EXE_LINKER_FLAGS "/LIBPATH:\"$ENV{ProgramFiles}/libmodbus-3.0.6-msvc/${PLTFRM}/${VCX}/lib\" ${CMAKE_EXE_LINKER_FLAGS}")
			target_link_libraries(UxVCtrl debug libmodbus-3.0.6-msvcd)
			target_link_libraries(UxVCtrl optimized libmodbus-3.0.6-msvc)
		else()
			#set(CMAKE_EXE_LINKER_FLAGS "-L\"$ENV{ProgramFiles}/libmodbus-3.0.6-msvc/${PLTFRM}/vc15/lib\" ${CMAKE_EXE_LINKER_FLAGS}")
			#target_link_libraries(UxVCtrl libmodbus-3.0.6-msvc)
			set(CMAKE_EXE_LINKER_FLAGS "-L\"$ENV{ProgramFiles}/libmodbus-3.0.6-msvc/${PLTFRM}/${VCX}/lib\" ${CMAKE_EXE_LINKER_FLAGS}")
			target_link_libraries(UxVCtrl modbus)
		endif()
	else()
		if(ENABLE_AUTO_DOWNLOAD)
			if(NOT EXISTS "/usr/include/modbus/modbus.h")
				if(APPLE)
					message(STATUS "Trying to download libmodbus...")
					execute_process(COMMAND sh -c "brew install libmodbus")
				else()
					message(STATUS "Trying to download libmodbus, run \"sudo apt-get update\" before if needed and check if the terminal is asking for a password...")
					execute_process(COMMAND sh -c "sudo apt-get -y install libmodbus-dev")
				endif()
			endif()
		endif()
		if(ENABLE_STATIC)
			target_link_libraries(UxVCtrl -static modbus)
		else()
			target_link_libraries(UxVCtrl modbus)
		endif()
	endif()
else()
	if(WIN32)
		if(EXISTS "$ENV{ProgramFiles}/libmodbus-3.0.6-msvc/include/modbus/modbus.h")
			message(STATUS "modbus has been detected, see ENABLE_LIBMODBUS_SUPPORT option to try to use it...")
		endif()
	else()
		if(EXISTS "/usr/include/modbus/modbus.h")
			message(STATUS "modbus has been detected, see ENABLE_LIBMODBUS_SUPPORT option to try to use it...")
		endif()
	endif()
endif()

if(ENABLE_SBG_SUPPORT)
	add_definitions(-DENABLE_SBG_SUPPORT)
	if(WIN32)
		set(SBG_SDK_DIR "$ENV{ProgramFiles}/SBG Systems/Inertial SDK/Software Development/sbgECom")
		if(ENABLE_AUTO_DOWNLOAD)
			if(NOT EXISTS "${SBG_SDK_DIR}/common/sbgCommon.h")
				message(STATUS "Downloading SBG...")
				file(DOWNLOAD "http://www.ensta-bretagne.fr/lebars/Share/SBG%20Systems.zip" "${PROJECT_SOURCE_DIR}/SBG Systems.zip")
				execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/SBG Systems.zip")
				execute_process(COMMAND ${CMAKE_COMMAND} -E rename "${PROJECT_SOURCE_DIR}/SBG Systems" "$ENV{ProgramFiles}/SBG Systems")
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/SBG Systems.zip")
			endif()
		endif()
		include_directories("${SBG_SDK_DIR}/common")
		include_directories("${SBG_SDK_DIR}/src")
		if(MSVC)
			set(CMAKE_EXE_LINKER_FLAGS "/LIBPATH:\"${SBG_SDK_DIR}/${PLTFRM}/${VCX}/lib\" ${CMAKE_EXE_LINKER_FLAGS}")
			target_link_libraries(UxVCtrl debug sbgEComd)
			target_link_libraries(UxVCtrl optimized sbgECom)
		else()
			set(CMAKE_EXE_LINKER_FLAGS "-L\"${SBG_SDK_DIR}/${PLTFRM}/vc15/lib\" ${CMAKE_EXE_LINKER_FLAGS}")
			target_link_libraries(UxVCtrl sbgECom)
		endif()
	else()
		if(ENABLE_AUTO_DOWNLOAD)
			if(NOT EXISTS "/usr/local/include/sbgECom/common/sbgCommon.h")
				message(STATUS "Downloading SBG...")
				file(DOWNLOAD "http://www.ensta-bretagne.fr/lebars/Share/SBG%20Systems.zip" "${PROJECT_SOURCE_DIR}/SBG Systems.zip")
				execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/SBG Systems.zip")
				execute_process(COMMAND sh -c "cd \"${PROJECT_SOURCE_DIR}/SBG Systems/Inertial SDK/Software Development/sbgECom/projects/unix\" && cmake . && make")
				execute_process(COMMAND sh -c "sudo mkdir -p /usr/local/include/sbgECom")
				execute_process(COMMAND sh -c "sudo mkdir -p /usr/local/lib")
				execute_process(COMMAND sh -c "sudo mv -f \"${PROJECT_SOURCE_DIR}/SBG Systems/Inertial SDK/Software Development/sbgECom/src/\" /usr/local/include/sbgECom/src")
				execute_process(COMMAND sh -c "sudo mv -f \"${PROJECT_SOURCE_DIR}/SBG Systems/Inertial SDK/Software Development/sbgECom/common/\" /usr/local/include/sbgECom/common")
				execute_process(COMMAND sh -c "sudo mv -f \"${PROJECT_SOURCE_DIR}/SBG Systems/Inertial SDK/Software Development/sbgECom/bin/libsbgECom.a\" /usr/local/lib/libsbgECom.a")
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/SBG Systems")
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/SBG Systems.zip")
			endif()
		endif()
		include_directories("/usr/local/include/sbgECom/common")
		include_directories("/usr/local/include/sbgECom/src")
		if(ENABLE_STATIC)
			target_link_libraries(UxVCtrl -static sbgECom)
		else()
			target_link_libraries(UxVCtrl sbgECom)
		endif()
	endif()
else()
	if(WIN32)
		if(EXISTS "$ENV{ProgramFiles}/SBG Systems/Inertial SDK/Software Development/sbgECom/common/sbgCommon.h")
			message(STATUS "SBG has been detected, see ENABLE_SBG_SUPPORT option to try to use it...")
		endif()
	else()
		if(EXISTS "/usr/local/include/sbgECom/common/sbgCommon.h")
			message(STATUS "SBG has been detected, see ENABLE_SBG_SUPPORT option to try to use it...")
		endif()
	endif()
endif()

if(DISABLE_OPENCV_SUPPORT)
	add_definitions(-DDISABLE_OPENCV_SUPPORT)
	if(WIN32)
		if(EXISTS "$ENV{SystemDrive}/OpenCV2.4.13/${PLTFRM}/${VCX}/lib/${LIBPREFIXVCX}opencv_core2413${LIBEXTVCX}")
			message(STATUS "OpenCV2.4.13 has been detected, see DISABLE_OPENCV_SUPPORT and OPENCV2413 options to try to use it...")
		endif()
		if(EXISTS "$ENV{SystemDrive}/OpenCV3.2.0/${PLTFRM}/${VCX}/lib/${LIBPREFIXVCX}opencv_world320${LIBEXTVCX}")
			message(STATUS "OpenCV3.2.0 has been detected, see DISABLE_OPENCV_SUPPORT and OPENCV320 options to try to use it...")
		endif()
		if(EXISTS "$ENV{SystemDrive}/OpenCV3.4.2/${PLTFRM}/${VCX}/lib/${LIBPREFIXVCX}opencv_world342${LIBEXTVCX}")
			message(STATUS "OpenCV3.4.2 has been detected, see DISABLE_OPENCV_SUPPORT and OPENCV342 options to try to use it...")
		endif()
		if(EXISTS "$ENV{SystemDrive}/OpenCV4.1.2/${PLTFRM}/${VCX}/lib/${LIBPREFIXVCX}opencv_world412${LIBEXTVCX}")
			message(STATUS "OpenCV4.1.2 has been detected, see DISABLE_OPENCV_SUPPORT and OPENCV412 options to try to use it...")
		endif()
	else()
		if(EXISTS "/usr/include/opencv/cv.h")
			if(EXISTS "${USR_LIB_ARCH_DIR}/libopencv_core.so.2.4")
				message(STATUS "OpenCV2.4 has been detected, see DISABLE_OPENCV_SUPPORT and OPENCV2413 options to try to use it...")
			endif()
			if(EXISTS "${USR_LIB_ARCH_DIR}/libopencv_core.so.3.2")
				message(STATUS "OpenCV3.2 has been detected, see DISABLE_OPENCV_SUPPORT and OPENCV320 options to try to use it...")
			endif()
			if(EXISTS "${USR_LIB_ARCH_DIR}/libopencv_core.so.3.4")
				message(STATUS "OpenCV3.4 has been detected, see DISABLE_OPENCV_SUPPORT and OPENCV342 options to try to use it...")
			endif()
			if(EXISTS "${USR_LIB_ARCH_DIR}/libopencv_core.so.4")
				message(STATUS "OpenCV4 has been detected, see DISABLE_OPENCV_SUPPORT and OPENCV412 options to try to use it...")
			endif()
		endif()
	endif()
else()
	if(ENABLE_BUILD_OPTIMIZATION_SAILBOAT)
		target_sources(UxVCtrl PUBLIC Ball.cpp OpenCVGUI.cpp VideoRecord.cpp Hardware/Video.cpp)
	else()
		target_sources(UxVCtrl PUBLIC Ball.cpp ExternalVisualLocalization.cpp Obstacle.cpp OpenCVGUI.cpp Pinger.cpp SurfaceVisualObstacle.cpp VideoInterface.cpp VideoRecord.cpp Wall.cpp Hardware/Video.cpp)
	endif()
	if(WIN32)
	else()
		if(ENABLE_FIND_PACKAGE)
			find_package(OpenCV QUIET)
			if(OpenCV_VERSION VERSION_LESS "2.0")
				if(ENABLE_AUTO_DOWNLOAD)
					if(APPLE)
						message(STATUS "Trying to download OpenCV...")
						execute_process(COMMAND sh -c "brew install opencv")
						find_package(OpenCV QUIET)
					else()
						message(STATUS "Trying to download OpenCV, run \"sudo apt-get update\" before if needed and check if the terminal is asking for a password...")
						execute_process(COMMAND sh -c "sudo apt-get -y install libopencv-dev")
						find_package(OpenCV QUIET)
					endif()
				endif()
			endif()
			if(OpenCV_VERSION VERSION_LESS "2.0")
				message(WARNING "Check if ENABLE_FIND_PACKAGE option should be disabled to try to detect OpenCV...")
			else()
				if(OpenCV_VERSION VERSION_LESS "3.0")
					if(OPENCV320)
						message(WARNING "Check if OPENCV2413 option should be enabled instead of OPENCV320...")
					elseif(OPENCV342)
						message(WARNING "Check if OPENCV2413 option should be enabled instead of OPENCV342...")
					elseif(OPENCV412)
						message(WARNING "Check if OPENCV2413 option should be enabled instead of OPENCV412...")
					endif()
				elseif(OpenCV_VERSION VERSION_LESS "3.3")
					if(OPENCV2413)
						message(WARNING "Check if OPENCV320 option should be enabled instead of OPENCV2413...")
					elseif(OPENCV342)
						message(WARNING "Check if OPENCV320 option should be enabled instead of OPENCV342...")
					elseif(OPENCV412)
						message(WARNING "Check if OPENCV320 option should be enabled instead of OPENCV412...")
					endif()
				elseif(OpenCV_VERSION VERSION_LESS "3.5")
					if(OPENCV2413)
						message(WARNING "Check if OPENCV342 option should be enabled instead of OPENCV2413...")
					elseif(OPENCV320)
						message(WARNING "Check if OPENCV342 option should be enabled instead of OPENCV320...")
					elseif(OPENCV412)
						message(WARNING "Check if OPENCV342 option should be enabled instead of OPENCV412...")
					endif()
				else()
					if(OPENCV2413)
						message(WARNING "Check if OPENCV412 option should be enabled instead of OPENCV2413...")
					elseif(OPENCV320)
						message(WARNING "Check if OPENCV412 option should be enabled instead of OPENCV320...")
					elseif(OPENCV342)
						message(WARNING "Check if OPENCV412 option should be enabled instead of OPENCV342...")
					endif()
					set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11") # Necessary starting with OpenCV 4.0.0...
				endif()
				if(ENABLE_STATIC)
					target_link_libraries(UxVCtrl -static ${OpenCV_LIBS})
				else()
					target_link_libraries(UxVCtrl ${OpenCV_LIBS})
				endif()
			endif()
		else()
			if(ENABLE_AUTO_DOWNLOAD)
				if(NOT EXISTS "/usr/include/opencv/cv.h")
					if(APPLE)
						message(STATUS "Trying to download OpenCV...")
						execute_process(COMMAND sh -c "brew install opencv")
					else()
						message(STATUS "Trying to download OpenCV, run \"sudo apt-get update\" before if needed and check if the terminal is asking for a password...")
						execute_process(COMMAND sh -c "sudo apt-get -y install libopencv-dev")
					endif()
				endif()
			endif()
			if(OPENCV2413)
				if(NOT EXISTS "${USR_LIB_ARCH_DIR}/libopencv_core.so.2.4")			
					message(WARNING "In case of problems, check if OPENCV320, OPENCV342 or OPENCV412 option should be enabled instead of OPENCV2413...")
				endif()
			elseif(OPENCV320)
				if(NOT EXISTS "${USR_LIB_ARCH_DIR}/libopencv_core.so.3.2")			
					message(WARNING "In case of problems, check if OPENCV2413, OPENCV342 or OPENCV412 option should be enabled instead of OPENCV320...")
				endif()
			elseif(OPENCV342)
				if(NOT EXISTS "${USR_LIB_ARCH_DIR}/libopencv_core.so.3.4")			
					message(WARNING "In case of problems, check if OPENCV2413, OPENCV320 or OPENCV412 option should be enabled instead of OPENCV342...")
				endif()
			elseif(OPENCV412)
				if(NOT EXISTS "${USR_LIB_ARCH_DIR}/libopencv_core.so.4")			
					message(WARNING "In case of problems, check if OPENCV2413, OPENCV320 or OPENCV342 option should be enabled instead of OPENCV412...")
				endif()
			endif()
		endif()
	endif()
	if(OPENCV2413)
		add_definitions(-DOPENCV2413)
		if(WIN32)
			if(ENABLE_AUTO_DOWNLOAD)
				if(NOT EXISTS "$ENV{SystemDrive}/OpenCV2.4.13/${PLTFRM}/${VCX}/lib/${LIBPREFIXVCX}opencv_core2413${LIBEXTVCX}")
					message(STATUS "Downloading OpenCV2.4.13...")
					file(DOWNLOAD "http://www.ensta-bretagne.fr/lebars/Share/OpenCV2.4.13.zip" "${PROJECT_SOURCE_DIR}/OpenCV2.4.13.zip")
					execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/OpenCV2.4.13.zip")
					execute_process(COMMAND ${CMAKE_COMMAND} -E rename "${PROJECT_SOURCE_DIR}/OpenCV2.4.13" "$ENV{SystemDrive}/OpenCV2.4.13")
					execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/OpenCV2.4.13.zip")
					file(DOWNLOAD "http://www.ensta-bretagne.fr/lebars/Share/cmake_extra_tools.zip" "${PROJECT_SOURCE_DIR}/cmake_extra_tools.zip")
					execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/cmake_extra_tools.zip")
					execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}/cmake_extra_tools" COMMAND cmd /c pathman /as "$ENV{SystemDrive}\\OpenCV2.4.13\\${PLTFRM}\\${VCX}\\bin")
					execute_process(COMMAND ${CMAKE_COMMAND} -E remove_directory "${PROJECT_SOURCE_DIR}/cmake_extra_tools")
					execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/cmake_extra_tools.zip")
				endif()
			endif()
			include_directories("$ENV{SystemDrive}/OpenCV2.4.13/include")
			if(MSVC)
				set(CMAKE_EXE_LINKER_FLAGS "/LIBPATH:\"$ENV{SystemDrive}/OpenCV2.4.13/${PLTFRM}/${VCX}/lib\" ${CMAKE_EXE_LINKER_FLAGS}")
				target_link_libraries(UxVCtrl debug opencv_core2413d opencv_imgproc2413d opencv_highgui2413d)
				target_link_libraries(UxVCtrl optimized opencv_core2413 opencv_imgproc2413 opencv_highgui2413)
			else()
				set(CMAKE_EXE_LINKER_FLAGS "-L\"$ENV{SystemDrive}/OpenCV2.4.13/${PLTFRM}/${VCX}/lib\" ${CMAKE_EXE_LINKER_FLAGS}")
				target_link_libraries(UxVCtrl opencv_core2413 opencv_imgproc2413 opencv_highgui2413)
			endif()
		else()
			if(ENABLE_FIND_PACKAGE)
			else()
				if(ENABLE_STATIC)
					target_link_libraries(UxVCtrl -static opencv_core opencv_imgproc opencv_highgui IlmImf libjasper libjpeg libpng libtiff zlib)
				else()
					target_link_libraries(UxVCtrl opencv_core opencv_imgproc opencv_highgui)
				endif()
			endif()
		endif()
	elseif(OPENCV320)
		add_definitions(-DOPENCV320)
		if(WIN32)
			if(ENABLE_AUTO_DOWNLOAD)
				if(NOT EXISTS "$ENV{SystemDrive}/OpenCV3.2.0/${PLTFRM}/${VCX}/lib/${LIBPREFIXVCX}opencv_world320${LIBEXTVCX}")
					message(STATUS "Downloading OpenCV3.2.0...")
					file(DOWNLOAD "http://www.ensta-bretagne.fr/lebars/Share/OpenCV3.2.0.zip" "${PROJECT_SOURCE_DIR}/OpenCV3.2.0.zip")
					execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/OpenCV3.2.0.zip")
					execute_process(COMMAND ${CMAKE_COMMAND} -E rename "${PROJECT_SOURCE_DIR}/OpenCV3.2.0" "$ENV{SystemDrive}/OpenCV3.2.0")
					execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/OpenCV3.2.0.zip")
					file(DOWNLOAD "http://www.ensta-bretagne.fr/lebars/Share/cmake_extra_tools.zip" "${PROJECT_SOURCE_DIR}/cmake_extra_tools.zip")
					execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/cmake_extra_tools.zip")
					execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}/cmake_extra_tools" COMMAND cmd /c pathman /as "$ENV{SystemDrive}\\OpenCV3.2.0\\${PLTFRM}\\${VCX}\\bin")
					execute_process(COMMAND ${CMAKE_COMMAND} -E remove_directory "${PROJECT_SOURCE_DIR}/cmake_extra_tools")
					execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/cmake_extra_tools.zip")
				endif()
			endif()
			include_directories("$ENV{SystemDrive}/OpenCV3.2.0/include")
			if(MSVC)
				set(CMAKE_EXE_LINKER_FLAGS "/LIBPATH:\"$ENV{SystemDrive}/OpenCV3.2.0/${PLTFRM}/${VCX}/lib\" ${CMAKE_EXE_LINKER_FLAGS}")
				target_link_libraries(UxVCtrl debug opencv_world320d)
				target_link_libraries(UxVCtrl optimized opencv_world320)
			else()
				set(CMAKE_EXE_LINKER_FLAGS "-L\"$ENV{SystemDrive}/OpenCV3.2.0/${PLTFRM}/${VCX}/lib\" ${CMAKE_EXE_LINKER_FLAGS}")
				target_link_libraries(UxVCtrl opencv_world320)
			endif()
		else()
			if(ENABLE_FIND_PACKAGE)
			else()
				if(ENABLE_STATIC)
					target_link_libraries(UxVCtrl -static opencv_core opencv_imgproc opencv_highgui opencv_imgcodecs opencv_videoio IlmImf libjasper libjpeg libpng libtiff libwebp zlib)
				else()
					target_link_libraries(UxVCtrl opencv_core opencv_imgproc opencv_highgui opencv_imgcodecs opencv_videoio)
				endif()
			endif()
		endif()
	elseif(OPENCV342)
		add_definitions(-DOPENCV342)
		if(WIN32)
			if(ENABLE_AUTO_DOWNLOAD)
				if(NOT EXISTS "$ENV{SystemDrive}/OpenCV3.4.2/${PLTFRM}/${VCX}/lib/${LIBPREFIXVCX}opencv_world342${LIBEXTVCX}")
					message(STATUS "Downloading OpenCV3.4.2...")
					file(DOWNLOAD "http://www.ensta-bretagne.fr/lebars/Share/OpenCV3.4.2.zip" "${PROJECT_SOURCE_DIR}/OpenCV3.4.2.zip")
					execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/OpenCV3.4.2.zip")
					execute_process(COMMAND ${CMAKE_COMMAND} -E rename "${PROJECT_SOURCE_DIR}/OpenCV3.4.2" "$ENV{SystemDrive}/OpenCV3.4.2")
					execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/OpenCV3.4.2.zip")
					file(DOWNLOAD "http://www.ensta-bretagne.fr/lebars/Share/cmake_extra_tools.zip" "${PROJECT_SOURCE_DIR}/cmake_extra_tools.zip")
					execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/cmake_extra_tools.zip")
					execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}/cmake_extra_tools" COMMAND cmd /c pathman /as "$ENV{SystemDrive}\\OpenCV3.4.2\\${PLTFRM}\\${VCX}\\bin")
					execute_process(COMMAND ${CMAKE_COMMAND} -E remove_directory "${PROJECT_SOURCE_DIR}/cmake_extra_tools")
					execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/cmake_extra_tools.zip")
				endif()
			endif()
			include_directories("$ENV{SystemDrive}/OpenCV3.4.2/include")
			if(MSVC)
				set(CMAKE_EXE_LINKER_FLAGS "/LIBPATH:\"$ENV{SystemDrive}/OpenCV3.4.2/${PLTFRM}/${VCX}/lib\" ${CMAKE_EXE_LINKER_FLAGS}")
				target_link_libraries(UxVCtrl debug opencv_world342d)
				target_link_libraries(UxVCtrl optimized opencv_world342)
			else()
				set(CMAKE_EXE_LINKER_FLAGS "-L\"$ENV{SystemDrive}/OpenCV3.4.2/${PLTFRM}/${VCX}/lib\" ${CMAKE_EXE_LINKER_FLAGS}")
				target_link_libraries(UxVCtrl opencv_world342)
			endif()
		else()
			if(ENABLE_FIND_PACKAGE)
			else()
				if(ENABLE_STATIC)
					target_link_libraries(UxVCtrl -static opencv_highgui opencv_videoio opencv_imgcodecs opencv_imgproc opencv_core IlmImf libjasper libjpeg-turbo libpng libprotobuf libtiff libwebp zlib)
				else()
					target_link_libraries(UxVCtrl opencv_highgui opencv_videoio opencv_imgcodecs opencv_imgproc opencv_core)
				endif()
			endif()
		endif()
	elseif(OPENCV412)
		add_definitions(-DOPENCV412)
		add_definitions(-DUSE_OPENCV_HIGHGUI_CPP_API)
		if(WIN32)
			if(ENABLE_AUTO_DOWNLOAD)
				if(NOT EXISTS "$ENV{SystemDrive}/OpenCV4.1.2/${PLTFRM}/${VCX}/lib/${LIBPREFIXVCX}opencv_world412${LIBEXTVCX}")
					message(STATUS "Downloading OpenCV4.1.2...")
					file(DOWNLOAD "http://www.ensta-bretagne.fr/lebars/Share/OpenCV4.1.2.zip" "${PROJECT_SOURCE_DIR}/OpenCV4.1.2.zip")
					execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/OpenCV4.1.2.zip")
					execute_process(COMMAND ${CMAKE_COMMAND} -E rename "${PROJECT_SOURCE_DIR}/OpenCV4.1.2" "$ENV{SystemDrive}/OpenCV4.1.2")
					execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/OpenCV4.1.2.zip")
					file(DOWNLOAD "http://www.ensta-bretagne.fr/lebars/Share/cmake_extra_tools.zip" "${PROJECT_SOURCE_DIR}/cmake_extra_tools.zip")
					execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/cmake_extra_tools.zip")
					execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}/cmake_extra_tools" COMMAND cmd /c pathman /as "$ENV{SystemDrive}\\OpenCV4.1.2\\${PLTFRM}\\${VCX}\\bin")
					execute_process(COMMAND ${CMAKE_COMMAND} -E remove_directory "${PROJECT_SOURCE_DIR}/cmake_extra_tools")
					execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/cmake_extra_tools.zip")
				endif()
			endif()
			include_directories("$ENV{SystemDrive}/OpenCV4.1.2/include")
			if(MSVC)
				set(CMAKE_EXE_LINKER_FLAGS "/LIBPATH:\"$ENV{SystemDrive}/OpenCV4.1.2/${PLTFRM}/${VCX}/lib\" ${CMAKE_EXE_LINKER_FLAGS}")
				target_link_libraries(UxVCtrl debug opencv_world412d)
				target_link_libraries(UxVCtrl optimized opencv_world412)
			else()
				set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
				set(CMAKE_EXE_LINKER_FLAGS "-L\"$ENV{SystemDrive}/OpenCV4.1.2/${PLTFRM}/${VCX}/lib\" ${CMAKE_EXE_LINKER_FLAGS}")
				target_link_libraries(UxVCtrl opencv_world412)
			endif()
		else()
			if(ENABLE_FIND_PACKAGE)
			else()
				include_directories("/usr/local/include/opencv4")
				set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
				set(CMAKE_EXE_LINKER_FLAGS "-L\"/usr/local/lib\" ${CMAKE_EXE_LINKER_FLAGS}")
				set(CMAKE_EXE_LINKER_FLAGS "-L\"/usr/local/lib/opencv4/3rdparty\" ${CMAKE_EXE_LINKER_FLAGS}")
				if(ENABLE_STATIC)
					target_link_libraries(UxVCtrl -static opencv_highgui opencv_videoio opencv_imgcodecs opencv_imgproc opencv_core ade quirc ippiw ittnotify ippicv libprotobuf)
				else()
					target_link_libraries(UxVCtrl opencv_highgui opencv_videoio opencv_imgcodecs opencv_imgproc opencv_core)
				endif()
			endif()
		endif()
	endif()
endif()

if(USE_FFMPEG_VIDEO)
	add_definitions(-DUSE_FFMPEG_VIDEO)
	if(WIN32)
		if(MSVC)
			include_directories("$ENV{ProgramFiles}/ffmpeg-msvc/include")
			set(CMAKE_EXE_LINKER_FLAGS "/LIBPATH:\"$ENV{ProgramFiles}/ffmpeg-msvc/${PLTFRM}/vc15/lib\" ${CMAKE_EXE_LINKER_FLAGS}")
			target_link_libraries(UxVCtrl avcodec avdevice avfilter avformat avutil postproc swresample swscale)
		else()
			include_directories("$ENV{ProgramFiles}/ffmpeg-msvc/include")
			set(CMAKE_EXE_LINKER_FLAGS "-L\"$ENV{ProgramFiles}/ffmpeg-msvc/${PLTFRM}/vc15/lib\" ${CMAKE_EXE_LINKER_FLAGS}")
			target_link_libraries(UxVCtrl avcodec avdevice avfilter avformat avutil postproc swresample swscale)
		endif()
	else()
		if(ENABLE_STATIC)
			target_link_libraries(UxVCtrl -static avcodec avformat avutil swresample swscale)
		else()
			target_link_libraries(UxVCtrl avcodec avformat avutil swresample swscale)
		endif()
	endif()
endif()

if(ENABLE_BUILD_OPTIMIZATION_SAILBOAT)
else()
 target_sources(UxVCtrl PUBLIC SSC32Interface.cpp SonarLocalization.cpp SonarAltitudeEstimation.cpp Simulator.cpp SeanetProcessing.cpp SBGInterface.cpp RazorAHRSInterface.cpp PololuInterface.cpp FollowMe.cpp ExternalProgramTrigger.cpp Hardware/SwarmonDevice.cpp Hardware/SSC32.cpp Hardware/SRF02.cpp Hardware/Seanet.cpp Hardware/SBG.cpp Hardware/RPLIDAR.cpp Hardware/Roboteq.cpp Hardware/PathfinderDVL.cpp Hardware/P33x.cpp Hardware/Ontrak.cpp Hardware/NortekDVL.cpp Hardware/MT.cpp Hardware/MS583730BA.cpp Hardware/MS580314BA.cpp Hardware/MiniSSC.cpp Hardware/MES.cpp Hardware/MDM.cpp Hardware/LIRMIA3.cpp Hardware/Hokuyo.cpp Hardware/IM483I.cpp)
endif()

if(USE_OPENCV_HIGHGUI_CPP_API)
	add_definitions(-DUSE_OPENCV_HIGHGUI_CPP_API)
endif()

if(ENABLE_OPENCV_HIGHGUI_THREADS_WORKAROUND)
	add_definitions(-DENABLE_OPENCV_HIGHGUI_THREADS_WORKAROUND)
endif()

if(ENABLE_OPENCV_HIGHGUI_STARTWINDOWTHREAD)
	add_definitions(-DENABLE_OPENCV_HIGHGUI_STARTWINDOWTHREAD)
endif()

if(FORCE_SINGLE_THREAD_OPENCVGUI)
	add_definitions(-DFORCE_SINGLE_THREAD_OPENCVGUI)
endif()

if(ENABLE_SHARED_WAITKEY_OPENCVGUI)
	add_definitions(-DENABLE_SHARED_WAITKEY_OPENCVGUI)
endif()

if(DISABLE_SBG_TCP)
	add_definitions(-DDISABLE_SBG_TCP)
endif()

if(DISABLE_AIS_SUPPORT)
	add_definitions(-DDISABLE_AIS_SUPPORT)
endif()

if(USE_OLD_CHRONO)
	add_definitions(-DUSE_OLD_CHRONO)
endif()

if(USE_OLD_TIMER)
	add_definitions(-DUSE_OLD_TIMER)
endif()

if(WIN32)
	add_definitions(-DENABLE_GETTIMEOFDAY_WIN32 -DDISABLE_TIMEZONE_STRUCT_REDEFINITION)
	add_definitions(-DENABLE_CANCEL_THREAD -DENABLE_KILL_THREAD)
endif()
add_definitions(-DSIMULATED_INTERNET_SWARMONDEVICE)

include_directories("${PROJECT_SOURCE_DIR}")
include_directories("${PROJECT_SOURCE_DIR}/../OSUtils")
include_directories("${PROJECT_SOURCE_DIR}/../Extensions/Img")
include_directories("${PROJECT_SOURCE_DIR}/../interval")
include_directories("${PROJECT_SOURCE_DIR}/../matrix_lib")
include_directories("${PROJECT_SOURCE_DIR}/Hardware")
include_directories("${PROJECT_SOURCE_DIR}/..")

if(WIN32)
	if(MSVC)
		target_link_libraries(UxVCtrl WinMM WS2_32)
	else()
		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O3 -Wall -Wno-unknown-pragmas -Wno-unused-parameter -Wextra")
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CMAKE_C_FLAGS} -fpermissive")
		target_link_libraries(UxVCtrl WinMM WS2_32)
	endif()
else()
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O3 -Wall -Wno-unknown-pragmas -Wno-unused-parameter -Wextra")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CMAKE_C_FLAGS} -fpermissive")
	if(ENABLE_STATIC)
		set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -static-libgcc -static-libstdc++")
		if(APPLE)
			target_link_libraries(UxVCtrl -static pthread m)
		else()
			target_link_libraries(UxVCtrl -static pthread rt m)
		endif()
	else()
		if(APPLE)
			target_link_libraries(UxVCtrl pthread m)
		else()
			target_link_libraries(UxVCtrl pthread rt m)
		endif()
	endif()
endif()

if(WIN32)
	message(STATUS "You might need to update your PATH and reboot depending on the prerequisites installed so that UxVCtrl can always find the necessary binaries and libraries at runtime, you might need also to enable Media Foundation feature in Windows and install Visual Studio 2010 Redistributable...")
else()
	message(STATUS "You might need to update your PATH/LD_LIBRARY_PATH and reboot depending on the prerequisites installed so that UxVCtrl can always find the necessary binaries and libraries at runtime...")
endif()
